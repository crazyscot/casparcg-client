(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/classnames/index.js":[function(require,module,exports){
!function(){"use strict";var e={}.hasOwnProperty;function t(){for(var n=[],r=0;r<arguments.length;r++){var o=arguments[r];if(o){var i=typeof o;if("string"===i||"number"===i)n.push(o);else if(Array.isArray(o)){if(o.length){var f=t.apply(null,o);f&&n.push(f)}}else if("object"===i)if(o.toString===Object.prototype.toString)for(var s in o)e.call(o,s)&&o[s]&&n.push(s);else n.push(o.toString())}}return n.join(" ")}"undefined"!=typeof module&&module.exports?(t.default=t,module.exports=t):"function"==typeof define&&"object"==typeof define.amd&&define.amd?define("classnames",[],function(){return t}):window.classNames=t}();

},{}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/events/events.js":[function(require,module,exports){
function EventEmitter(){this._events=this._events||{},this._maxListeners=this._maxListeners||void 0}function isFunction(e){return"function"==typeof e}function isNumber(e){return"number"==typeof e}function isObject(e){return"object"==typeof e&&null!==e}function isUndefined(e){return void 0===e}module.exports=EventEmitter,EventEmitter.EventEmitter=EventEmitter,EventEmitter.prototype._events=void 0,EventEmitter.prototype._maxListeners=void 0,EventEmitter.defaultMaxListeners=10,EventEmitter.prototype.setMaxListeners=function(e){if(!isNumber(e)||e<0||isNaN(e))throw TypeError("n must be a positive number");return this._maxListeners=e,this},EventEmitter.prototype.emit=function(e){var t,i,n,s,r,o;if(this._events||(this._events={}),"error"===e&&(!this._events.error||isObject(this._events.error)&&!this._events.error.length)){if((t=arguments[1])instanceof Error)throw t;var h=new Error('Uncaught, unspecified "error" event. ('+t+")");throw h.context=t,h}if(isUndefined(i=this._events[e]))return!1;if(isFunction(i))switch(arguments.length){case 1:i.call(this);break;case 2:i.call(this,arguments[1]);break;case 3:i.call(this,arguments[1],arguments[2]);break;default:s=Array.prototype.slice.call(arguments,1),i.apply(this,s)}else if(isObject(i))for(s=Array.prototype.slice.call(arguments,1),n=(o=i.slice()).length,r=0;r<n;r++)o[r].apply(this,s);return!0},EventEmitter.prototype.addListener=function(e,t){var i;if(!isFunction(t))throw TypeError("listener must be a function");return this._events||(this._events={}),this._events.newListener&&this.emit("newListener",e,isFunction(t.listener)?t.listener:t),this._events[e]?isObject(this._events[e])?this._events[e].push(t):this._events[e]=[this._events[e],t]:this._events[e]=t,isObject(this._events[e])&&!this._events[e].warned&&(i=isUndefined(this._maxListeners)?EventEmitter.defaultMaxListeners:this._maxListeners)&&i>0&&this._events[e].length>i&&(this._events[e].warned=!0,console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.",this._events[e].length),"function"==typeof console.trace&&console.trace()),this},EventEmitter.prototype.on=EventEmitter.prototype.addListener,EventEmitter.prototype.once=function(e,t){if(!isFunction(t))throw TypeError("listener must be a function");var i=!1;function n(){this.removeListener(e,n),i||(i=!0,t.apply(this,arguments))}return n.listener=t,this.on(e,n),this},EventEmitter.prototype.removeListener=function(e,t){var i,n,s,r;if(!isFunction(t))throw TypeError("listener must be a function");if(!this._events||!this._events[e])return this;if(s=(i=this._events[e]).length,n=-1,i===t||isFunction(i.listener)&&i.listener===t)delete this._events[e],this._events.removeListener&&this.emit("removeListener",e,t);else if(isObject(i)){for(r=s;r-- >0;)if(i[r]===t||i[r].listener&&i[r].listener===t){n=r;break}if(n<0)return this;1===i.length?(i.length=0,delete this._events[e]):i.splice(n,1),this._events.removeListener&&this.emit("removeListener",e,t)}return this},EventEmitter.prototype.removeAllListeners=function(e){var t,i;if(!this._events)return this;if(!this._events.removeListener)return 0===arguments.length?this._events={}:this._events[e]&&delete this._events[e],this;if(0===arguments.length){for(t in this._events)"removeListener"!==t&&this.removeAllListeners(t);return this.removeAllListeners("removeListener"),this._events={},this}if(isFunction(i=this._events[e]))this.removeListener(e,i);else if(i)for(;i.length;)this.removeListener(e,i[i.length-1]);return delete this._events[e],this},EventEmitter.prototype.listeners=function(e){return this._events&&this._events[e]?isFunction(this._events[e])?[this._events[e]]:this._events[e].slice():[]},EventEmitter.prototype.listenerCount=function(e){if(this._events){var t=this._events[e];if(isFunction(t))return 1;if(t)return t.length}return 0},EventEmitter.listenerCount=function(e,t){return e.listenerCount(t)};

},{}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/EventListener.js":[function(require,module,exports){
"use strict";var emptyFunction=require("./emptyFunction"),EventListener={listen:function(e,t,n){return e.addEventListener?(e.addEventListener(t,n,!1),{remove:function(){e.removeEventListener(t,n,!1)}}):e.attachEvent?(e.attachEvent("on"+t,n),{remove:function(){e.detachEvent("on"+t,n)}}):void 0},capture:function(e,t,n){return e.addEventListener?(e.addEventListener(t,n,!0),{remove:function(){e.removeEventListener(t,n,!0)}}):{remove:emptyFunction}},registerDefault:function(){}};module.exports=EventListener;

},{"./emptyFunction":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/emptyFunction.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/ExecutionEnvironment.js":[function(require,module,exports){
"use strict";var canUseDOM=!("undefined"==typeof window||!window.document||!window.document.createElement),ExecutionEnvironment={canUseDOM:canUseDOM,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:canUseDOM&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:canUseDOM&&!!window.screen,isInWorker:!canUseDOM};module.exports=ExecutionEnvironment;

},{}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/camelize.js":[function(require,module,exports){
"use strict";var _hyphenPattern=/-(.)/g;function camelize(e){return e.replace(_hyphenPattern,function(e,t){return t.toUpperCase()})}module.exports=camelize;

},{}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/camelizeStyleName.js":[function(require,module,exports){
"use strict";var camelize=require("./camelize"),msPattern=/^-ms-/;function camelizeStyleName(e){return camelize(e.replace(msPattern,"ms-"))}module.exports=camelizeStyleName;

},{"./camelize":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/camelize.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/containsNode.js":[function(require,module,exports){
"use strict";var isTextNode=require("./isTextNode");function containsNode(e,o){var t=!0;e:for(;t;){var n=e,i=o;if(t=!1,n&&i){if(n===i)return!0;if(isTextNode(n))return!1;if(isTextNode(i)){e=n,o=i.parentNode,t=!0;continue e}return n.contains?n.contains(i):!!n.compareDocumentPosition&&!!(16&n.compareDocumentPosition(i))}return!1}}module.exports=containsNode;

},{"./isTextNode":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/isTextNode.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/createArrayFromMixed.js":[function(require,module,exports){
"use strict";var toArray=require("./toArray");function hasArrayNature(r){return!!r&&("object"==typeof r||"function"==typeof r)&&"length"in r&&!("setInterval"in r)&&"number"!=typeof r.nodeType&&(Array.isArray(r)||"callee"in r||"item"in r)}function createArrayFromMixed(r){return hasArrayNature(r)?Array.isArray(r)?r.slice():toArray(r):[r]}module.exports=createArrayFromMixed;

},{"./toArray":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/toArray.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/createNodesFromMarkup.js":[function(require,module,exports){
"use strict";var ExecutionEnvironment=require("./ExecutionEnvironment"),createArrayFromMixed=require("./createArrayFromMixed"),getMarkupWrap=require("./getMarkupWrap"),invariant=require("./invariant"),dummyNode=ExecutionEnvironment.canUseDOM?document.createElement("div"):null,nodeNamePattern=/^\s*<(\w+)/;function getNodeName(e){var r=e.match(nodeNamePattern);return r&&r[1].toLowerCase()}function createNodesFromMarkup(e,r){var a=dummyNode;dummyNode||invariant(!1);var t=getNodeName(e),n=t&&getMarkupWrap(t);if(n){a.innerHTML=n[1]+e+n[2];for(var i=n[0];i--;)a=a.lastChild}else a.innerHTML=e;var o=a.getElementsByTagName("script");o.length&&(r||invariant(!1),createArrayFromMixed(o).forEach(r));for(var m=createArrayFromMixed(a.childNodes);a.lastChild;)a.removeChild(a.lastChild);return m}module.exports=createNodesFromMarkup;

},{"./ExecutionEnvironment":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/ExecutionEnvironment.js","./createArrayFromMixed":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/createArrayFromMixed.js","./getMarkupWrap":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/getMarkupWrap.js","./invariant":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/invariant.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/emptyFunction.js":[function(require,module,exports){
"use strict";function makeEmptyFunction(t){return function(){return t}}function emptyFunction(){}emptyFunction.thatReturns=makeEmptyFunction,emptyFunction.thatReturnsFalse=makeEmptyFunction(!1),emptyFunction.thatReturnsTrue=makeEmptyFunction(!0),emptyFunction.thatReturnsNull=makeEmptyFunction(null),emptyFunction.thatReturnsThis=function(){return this},emptyFunction.thatReturnsArgument=function(t){return t},module.exports=emptyFunction;

},{}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/emptyObject.js":[function(require,module,exports){
"use strict";var emptyObject={};module.exports=emptyObject;

},{}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/focusNode.js":[function(require,module,exports){
"use strict";function focusNode(o){try{o.focus()}catch(o){}}module.exports=focusNode;

},{}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/getActiveElement.js":[function(require,module,exports){
"use strict";function getActiveElement(){if("undefined"==typeof document)return null;try{return document.activeElement||document.body}catch(e){return document.body}}module.exports=getActiveElement;

},{}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/getMarkupWrap.js":[function(require,module,exports){
"use strict";var ExecutionEnvironment=require("./ExecutionEnvironment"),invariant=require("./invariant"),dummyNode=ExecutionEnvironment.canUseDOM?document.createElement("div"):null,shouldWrap={},selectWrap=[1,'<select multiple="true">',"</select>"],tableWrap=[1,"<table>","</table>"],trWrap=[3,"<table><tbody><tr>","</tr></tbody></table>"],svgWrap=[1,'<svg xmlns="http://www.w3.org/2000/svg">',"</svg>"],markupWrap={"*":[1,"?<div>","</div>"],area:[1,"<map>","</map>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],legend:[1,"<fieldset>","</fieldset>"],param:[1,"<object>","</object>"],tr:[2,"<table><tbody>","</tbody></table>"],optgroup:selectWrap,option:selectWrap,caption:tableWrap,colgroup:tableWrap,tbody:tableWrap,tfoot:tableWrap,thead:tableWrap,td:trWrap,th:trWrap},svgElements=["circle","clipPath","defs","ellipse","g","image","line","linearGradient","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","text","tspan"];function getMarkupWrap(t){return dummyNode||invariant(!1),markupWrap.hasOwnProperty(t)||(t="*"),shouldWrap.hasOwnProperty(t)||(dummyNode.innerHTML="*"===t?"<link />":"<"+t+"></"+t+">",shouldWrap[t]=!dummyNode.firstChild),shouldWrap[t]?markupWrap[t]:null}svgElements.forEach(function(t){markupWrap[t]=svgWrap,shouldWrap[t]=!0}),module.exports=getMarkupWrap;

},{"./ExecutionEnvironment":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/ExecutionEnvironment.js","./invariant":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/invariant.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/getUnboundedScrollPosition.js":[function(require,module,exports){
"use strict";function getUnboundedScrollPosition(o){return o===window?{x:window.pageXOffset||document.documentElement.scrollLeft,y:window.pageYOffset||document.documentElement.scrollTop}:{x:o.scrollLeft,y:o.scrollTop}}module.exports=getUnboundedScrollPosition;

},{}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/hyphenate.js":[function(require,module,exports){
"use strict";var _uppercasePattern=/([A-Z])/g;function hyphenate(e){return e.replace(_uppercasePattern,"-$1").toLowerCase()}module.exports=hyphenate;

},{}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/hyphenateStyleName.js":[function(require,module,exports){
"use strict";var hyphenate=require("./hyphenate"),msPattern=/^ms-/;function hyphenateStyleName(e){return hyphenate(e).replace(msPattern,"-ms-")}module.exports=hyphenateStyleName;

},{"./hyphenate":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/hyphenate.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/invariant.js":[function(require,module,exports){
"use strict";function invariant(e,n,r,i,o,a,t,f){if(!e){var s;if(void 0===n)s=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var d=[r,i,o,a,t,f],l=0;(s=new Error(n.replace(/%s/g,function(){return d[l++]}))).name="Invariant Violation"}throw s.framesToPop=1,s}}module.exports=invariant;

},{}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/isNode.js":[function(require,module,exports){
"use strict";function isNode(e){return!(!e||!("function"==typeof Node?e instanceof Node:"object"==typeof e&&"number"==typeof e.nodeType&&"string"==typeof e.nodeName))}module.exports=isNode;

},{}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/isTextNode.js":[function(require,module,exports){
"use strict";var isNode=require("./isNode");function isTextNode(e){return isNode(e)&&3==e.nodeType}module.exports=isTextNode;

},{"./isNode":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/isNode.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/keyMirror.js":[function(require,module,exports){
"use strict";var invariant=require("./invariant"),keyMirror=function(r){var i,n={};for(i in r instanceof Object&&!Array.isArray(r)||invariant(!1),r)r.hasOwnProperty(i)&&(n[i]=i);return n};module.exports=keyMirror;

},{"./invariant":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/invariant.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/keyOf.js":[function(require,module,exports){
"use strict";var keyOf=function(r){var e;for(e in r)if(r.hasOwnProperty(e))return e;return null};module.exports=keyOf;

},{}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/mapObject.js":[function(require,module,exports){
"use strict";var hasOwnProperty=Object.prototype.hasOwnProperty;function mapObject(r,t,e){if(!r)return null;var a={};for(var n in r)hasOwnProperty.call(r,n)&&(a[n]=t.call(e,r[n],n,r));return a}module.exports=mapObject;

},{}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/memoizeStringOnly.js":[function(require,module,exports){
"use strict";function memoizeStringOnly(n){var r={};return function(t){return r.hasOwnProperty(t)||(r[t]=n.call(this,t)),r[t]}}module.exports=memoizeStringOnly;

},{}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/shallowEqual.js":[function(require,module,exports){
"use strict";var hasOwnProperty=Object.prototype.hasOwnProperty;function shallowEqual(e,t){if(e===t)return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var r=Object.keys(e),n=Object.keys(t);if(r.length!==n.length)return!1;for(var o=hasOwnProperty.bind(t),l=0;l<r.length;l++)if(!o(r[l])||e[r[l]]!==t[r[l]])return!1;return!0}module.exports=shallowEqual;

},{}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/toArray.js":[function(require,module,exports){
"use strict";var invariant=require("./invariant");function toArray(r){var t=r.length;if((Array.isArray(r)||"object"!=typeof r&&"function"!=typeof r)&&invariant(!1),"number"!=typeof t&&invariant(!1),0===t||t-1 in r||invariant(!1),r.hasOwnProperty)try{return Array.prototype.slice.call(r)}catch(r){}for(var a=Array(t),n=0;n<t;n++)a[n]=r[n];return a}module.exports=toArray;

},{"./invariant":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/invariant.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/warning.js":[function(require,module,exports){
"use strict";var emptyFunction=require("./emptyFunction"),warning=emptyFunction;module.exports=warning;

},{"./emptyFunction":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/emptyFunction.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/gsap/TweenMax.js":[function(require,module,exports){
(function (global){(function (){
var _gsScope="undefined"!=typeof module&&module.exports&&"undefined"!=typeof global?global:this||window;(_gsScope._gsQueue||(_gsScope._gsQueue=[])).push(function(){"use strict";var t,e,i,s,r,n,a,o,l,h,_,u,f,c;_gsScope._gsDefine("TweenMax",["core.Animation","core.SimpleTimeline","TweenLite"],function(t,e,i){var s=function(t){var e,i=[],s=t.length;for(e=0;e!==s;i.push(t[e++]));return i},r=function(t,e,i){var s,r,n=t.cycle;for(s in n)r=n[s],t[s]="function"==typeof r?r(i,e[i]):r[i%r.length];delete t.cycle},n=function(t,e,s){i.call(this,t,e,s),this._cycle=0,this._yoyo=!0===this.vars.yoyo||!!this.vars.yoyoEase,this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._repeat&&this._uncache(!0),this.render=n.prototype.render},a=i._internals,o=a.isSelector,l=a.isArray,h=n.prototype=i.to({},.1,{}),_=[];n.version="1.20.5",h.constructor=n,h.kill()._gc=!1,n.killTweensOf=n.killDelayedCallsTo=i.killTweensOf,n.getTweensOf=i.getTweensOf,n.lagSmoothing=i.lagSmoothing,n.ticker=i.ticker,n.render=i.render,h.invalidate=function(){return this._yoyo=!0===this.vars.yoyo||!!this.vars.yoyoEase,this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._yoyoEase=null,this._uncache(!0),i.prototype.invalidate.call(this)},h.updateTo=function(t,e){var s,r=this.ratio,n=this.vars.immediateRender||t.immediateRender;for(s in e&&this._startTime<this._timeline._time&&(this._startTime=this._timeline._time,this._uncache(!1),this._gc?this._enabled(!0,!1):this._timeline.insert(this,this._startTime-this._delay)),t)this.vars[s]=t[s];if(this._initted||n)if(e)this._initted=!1,n&&this.render(0,!0,!0);else if(this._gc&&this._enabled(!0,!1),this._notifyPluginsOfEnabled&&this._firstPT&&i._onPluginEvent("_onDisable",this),this._time/this._duration>.998){var a=this._totalTime;this.render(0,!0,!1),this._initted=!1,this.render(a,!0,!1)}else if(this._initted=!1,this._init(),this._time>0||n)for(var o,l=1/(1-r),h=this._firstPT;h;)o=h.s+h.c,h.c*=l,h.s=o-h.c,h=h._next;return this},h.render=function(t,e,s){this._initted||0===this._duration&&this.vars.repeat&&this.invalidate();var r,n,o,l,h,_,u,f,c,p=this._dirty?this.totalDuration():this._totalDuration,d=this._time,m=this._totalTime,g=this._cycle,y=this._duration,v=this._rawPrevTime;if(t>=p-1e-7&&t>=0?(this._totalTime=p,this._cycle=this._repeat,this._yoyo&&0!=(1&this._cycle)?(this._time=0,this.ratio=this._ease._calcEnd?this._ease.getRatio(0):0):(this._time=y,this.ratio=this._ease._calcEnd?this._ease.getRatio(1):1),this._reversed||(r=!0,n="onComplete",s=s||this._timeline.autoRemoveChildren),0===y&&(this._initted||!this.vars.lazy||s)&&(this._startTime===this._timeline._duration&&(t=0),(v<0||t<=0&&t>=-1e-7||1e-10===v&&"isPause"!==this.data)&&v!==t&&(s=!0,v>1e-10&&(n="onReverseComplete")),this._rawPrevTime=f=!e||t||v===t?t:1e-10)):t<1e-7?(this._totalTime=this._time=this._cycle=0,this.ratio=this._ease._calcEnd?this._ease.getRatio(0):0,(0!==m||0===y&&v>0)&&(n="onReverseComplete",r=this._reversed),t<0&&(this._active=!1,0===y&&(this._initted||!this.vars.lazy||s)&&(v>=0&&(s=!0),this._rawPrevTime=f=!e||t||v===t?t:1e-10)),this._initted||(s=!0)):(this._totalTime=this._time=t,0!==this._repeat&&(l=y+this._repeatDelay,this._cycle=this._totalTime/l>>0,0!==this._cycle&&this._cycle===this._totalTime/l&&m<=t&&this._cycle--,this._time=this._totalTime-this._cycle*l,this._yoyo&&0!=(1&this._cycle)&&(this._time=y-this._time,(c=this._yoyoEase||this.vars.yoyoEase)&&(this._yoyoEase||(!0!==c||this._initted?this._yoyoEase=c=!0===c?this._ease:c instanceof Ease?c:Ease.map[c]:(c=this.vars.ease,this._yoyoEase=c=c?c instanceof Ease?c:"function"==typeof c?new Ease(c,this.vars.easeParams):Ease.map[c]||i.defaultEase:i.defaultEase)),this.ratio=c?1-c.getRatio((y-this._time)/y):0)),this._time>y?this._time=y:this._time<0&&(this._time=0)),this._easeType&&!c?(h=this._time/y,_=this._easeType,u=this._easePower,(1===_||3===_&&h>=.5)&&(h=1-h),3===_&&(h*=2),1===u?h*=h:2===u?h*=h*h:3===u?h*=h*h*h:4===u&&(h*=h*h*h*h),1===_?this.ratio=1-h:2===_?this.ratio=h:this._time/y<.5?this.ratio=h/2:this.ratio=1-h/2):c||(this.ratio=this._ease.getRatio(this._time/y))),d!==this._time||s||g!==this._cycle){if(!this._initted){if(this._init(),!this._initted||this._gc)return;if(!s&&this._firstPT&&(!1!==this.vars.lazy&&this._duration||this.vars.lazy&&!this._duration))return this._time=d,this._totalTime=m,this._rawPrevTime=v,this._cycle=g,a.lazyTweens.push(this),void(this._lazy=[t,e]);!this._time||r||c?r&&this._ease._calcEnd&&!c&&(this.ratio=this._ease.getRatio(0===this._time?0:1)):this.ratio=this._ease.getRatio(this._time/y)}for(!1!==this._lazy&&(this._lazy=!1),this._active||!this._paused&&this._time!==d&&t>=0&&(this._active=!0),0===m&&(2===this._initted&&t>0&&this._init(),this._startAt&&(t>=0?this._startAt.render(t,!0,s):n||(n="_dummyGS")),this.vars.onStart&&(0===this._totalTime&&0!==y||e||this._callback("onStart"))),o=this._firstPT;o;)o.f?o.t[o.p](o.c*this.ratio+o.s):o.t[o.p]=o.c*this.ratio+o.s,o=o._next;this._onUpdate&&(t<0&&this._startAt&&this._startTime&&this._startAt.render(t,!0,s),e||(this._totalTime!==m||n)&&this._callback("onUpdate")),this._cycle!==g&&(e||this._gc||this.vars.onRepeat&&this._callback("onRepeat")),n&&(this._gc&&!s||(t<0&&this._startAt&&!this._onUpdate&&this._startTime&&this._startAt.render(t,!0,s),r&&(this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!e&&this.vars[n]&&this._callback(n),0===y&&1e-10===this._rawPrevTime&&1e-10!==f&&(this._rawPrevTime=0)))}else m!==this._totalTime&&this._onUpdate&&(e||this._callback("onUpdate"))},n.to=function(t,e,i){return new n(t,e,i)},n.from=function(t,e,i){return i.runBackwards=!0,i.immediateRender=0!=i.immediateRender,new n(t,e,i)},n.fromTo=function(t,e,i,s){return s.startAt=i,s.immediateRender=0!=s.immediateRender&&0!=i.immediateRender,new n(t,e,s)},n.staggerTo=n.allTo=function(t,e,a,h,u,f,c){h=h||0;var p,d,m,g,y=0,v=[],T=function(){a.onComplete&&a.onComplete.apply(a.onCompleteScope||this,arguments),u.apply(c||a.callbackScope||this,f||_)},x=a.cycle,b=a.startAt&&a.startAt.cycle;for(l(t)||("string"==typeof t&&(t=i.selector(t)||t),o(t)&&(t=s(t))),t=t||[],h<0&&((t=s(t)).reverse(),h*=-1),p=t.length-1,m=0;m<=p;m++){for(g in d={},a)d[g]=a[g];if(x&&(r(d,t,m),null!=d.duration&&(e=d.duration,delete d.duration)),b){for(g in b=d.startAt={},a.startAt)b[g]=a.startAt[g];r(d.startAt,t,m)}d.delay=y+(d.delay||0),m===p&&u&&(d.onComplete=T),v[m]=new n(t[m],e,d),y+=h}return v},n.staggerFrom=n.allFrom=function(t,e,i,s,r,a,o){return i.runBackwards=!0,i.immediateRender=0!=i.immediateRender,n.staggerTo(t,e,i,s,r,a,o)},n.staggerFromTo=n.allFromTo=function(t,e,i,s,r,a,o,l){return s.startAt=i,s.immediateRender=0!=s.immediateRender&&0!=i.immediateRender,n.staggerTo(t,e,s,r,a,o,l)},n.delayedCall=function(t,e,i,s,r){return new n(e,0,{delay:t,onComplete:e,onCompleteParams:i,callbackScope:s,onReverseComplete:e,onReverseCompleteParams:i,immediateRender:!1,useFrames:r,overwrite:0})},n.set=function(t,e){return new n(t,0,e)},n.isTweening=function(t){return i.getTweensOf(t,!0).length>0};var u=function(t,e){for(var s=[],r=0,n=t._first;n;)n instanceof i?s[r++]=n:(e&&(s[r++]=n),r=(s=s.concat(u(n,e))).length),n=n._next;return s},f=n.getAllTweens=function(e){return u(t._rootTimeline,e).concat(u(t._rootFramesTimeline,e))};n.killAll=function(t,i,s,r){null==i&&(i=!0),null==s&&(s=!0);var n,a,o,l=f(0!=r),h=l.length,_=i&&s&&r;for(o=0;o<h;o++)a=l[o],(_||a instanceof e||(n=a.target===a.vars.onComplete)&&s||i&&!n)&&(t?a.totalTime(a._reversed?0:a.totalDuration()):a._enabled(!1,!1))},n.killChildTweensOf=function(t,e){if(null!=t){var r,h,_,u,f,c=a.tweenLookup;if("string"==typeof t&&(t=i.selector(t)||t),o(t)&&(t=s(t)),l(t))for(u=t.length;--u>-1;)n.killChildTweensOf(t[u],e);else{for(_ in r=[],c)for(h=c[_].target.parentNode;h;)h===t&&(r=r.concat(c[_].tweens)),h=h.parentNode;for(f=r.length,u=0;u<f;u++)e&&r[u].totalTime(r[u].totalDuration()),r[u]._enabled(!1,!1)}}};var c=function(t,i,s,r){i=!1!==i,s=!1!==s;for(var n,a,o=f(r=!1!==r),l=i&&s&&r,h=o.length;--h>-1;)a=o[h],(l||a instanceof e||(n=a.target===a.vars.onComplete)&&s||i&&!n)&&a.paused(t)};return n.pauseAll=function(t,e,i){c(!0,t,e,i)},n.resumeAll=function(t,e,i){c(!1,t,e,i)},n.globalTimeScale=function(e){var s=t._rootTimeline,r=i.ticker.time;return arguments.length?(e=e||1e-10,s._startTime=r-(r-s._startTime)*s._timeScale/e,s=t._rootFramesTimeline,r=i.ticker.frame,s._startTime=r-(r-s._startTime)*s._timeScale/e,s._timeScale=t._rootTimeline._timeScale=e,e):s._timeScale},h.progress=function(t,e){return arguments.length?this.totalTime(this.duration()*(this._yoyo&&0!=(1&this._cycle)?1-t:t)+this._cycle*(this._duration+this._repeatDelay),e):this._time/this.duration()},h.totalProgress=function(t,e){return arguments.length?this.totalTime(this.totalDuration()*t,e):this._totalTime/this.totalDuration()},h.time=function(t,e){return arguments.length?(this._dirty&&this.totalDuration(),t>this._duration&&(t=this._duration),this._yoyo&&0!=(1&this._cycle)?t=this._duration-t+this._cycle*(this._duration+this._repeatDelay):0!==this._repeat&&(t+=this._cycle*(this._duration+this._repeatDelay)),this.totalTime(t,e)):this._time},h.duration=function(e){return arguments.length?t.prototype.duration.call(this,e):this._duration},h.totalDuration=function(t){return arguments.length?-1===this._repeat?this:this.duration((t-this._repeat*this._repeatDelay)/(this._repeat+1)):(this._dirty&&(this._totalDuration=-1===this._repeat?999999999999:this._duration*(this._repeat+1)+this._repeatDelay*this._repeat,this._dirty=!1),this._totalDuration)},h.repeat=function(t){return arguments.length?(this._repeat=t,this._uncache(!0)):this._repeat},h.repeatDelay=function(t){return arguments.length?(this._repeatDelay=t,this._uncache(!0)):this._repeatDelay},h.yoyo=function(t){return arguments.length?(this._yoyo=t,this):this._yoyo},n},!0),_gsScope._gsDefine("TimelineLite",["core.Animation","core.SimpleTimeline","TweenLite"],function(t,e,i){var s=function(t){e.call(this,t),this._labels={},this.autoRemoveChildren=!0===this.vars.autoRemoveChildren,this.smoothChildTiming=!0===this.vars.smoothChildTiming,this._sortChildren=!0,this._onUpdate=this.vars.onUpdate;var i,s,r=this.vars;for(s in r)i=r[s],o(i)&&-1!==i.join("").indexOf("{self}")&&(r[s]=this._swapSelfInParams(i));o(r.tweens)&&this.add(r.tweens,0,r.align,r.stagger)},r=i._internals,n=s._internals={},a=r.isSelector,o=r.isArray,l=r.lazyTweens,h=r.lazyRender,_=_gsScope._gsDefine.globals,u=function(t){var e,i={};for(e in t)i[e]=t[e];return i},f=function(t,e,i){var s,r,n=t.cycle;for(s in n)r=n[s],t[s]="function"==typeof r?r(i,e[i]):r[i%r.length];delete t.cycle},c=n.pauseCallback=function(){},p=function(t){var e,i=[],s=t.length;for(e=0;e!==s;i.push(t[e++]));return i},d=s.prototype=new e;return s.version="1.20.4",d.constructor=s,d.kill()._gc=d._forcingPlayhead=d._hasPause=!1,d.to=function(t,e,s,r){var n=s.repeat&&_.TweenMax||i;return e?this.add(new n(t,e,s),r):this.set(t,s,r)},d.from=function(t,e,s,r){return this.add((s.repeat&&_.TweenMax||i).from(t,e,s),r)},d.fromTo=function(t,e,s,r,n){var a=r.repeat&&_.TweenMax||i;return e?this.add(a.fromTo(t,e,s,r),n):this.set(t,r,n)},d.staggerTo=function(t,e,r,n,o,l,h,_){var c,d,m=new s({onComplete:l,onCompleteParams:h,callbackScope:_,smoothChildTiming:this.smoothChildTiming}),g=r.cycle;for("string"==typeof t&&(t=i.selector(t)||t),a(t=t||[])&&(t=p(t)),(n=n||0)<0&&((t=p(t)).reverse(),n*=-1),d=0;d<t.length;d++)(c=u(r)).startAt&&(c.startAt=u(c.startAt),c.startAt.cycle&&f(c.startAt,t,d)),g&&(f(c,t,d),null!=c.duration&&(e=c.duration,delete c.duration)),m.to(t[d],e,c,d*n);return this.add(m,o)},d.staggerFrom=function(t,e,i,s,r,n,a,o){return i.immediateRender=0!=i.immediateRender,i.runBackwards=!0,this.staggerTo(t,e,i,s,r,n,a,o)},d.staggerFromTo=function(t,e,i,s,r,n,a,o,l){return s.startAt=i,s.immediateRender=0!=s.immediateRender&&0!=i.immediateRender,this.staggerTo(t,e,s,r,n,a,o,l)},d.call=function(t,e,s,r){return this.add(i.delayedCall(0,t,e,s),r)},d.set=function(t,e,s){return s=this._parseTimeOrLabel(s,0,!0),null==e.immediateRender&&(e.immediateRender=s===this._time&&!this._paused),this.add(new i(t,0,e),s)},s.exportRoot=function(t,e){null==(t=t||{}).smoothChildTiming&&(t.smoothChildTiming=!0);var r,n,a,o,l=new s(t),h=l._timeline;for(null==e&&(e=!0),h._remove(l,!0),l._startTime=0,l._rawPrevTime=l._time=l._totalTime=h._time,a=h._first;a;)o=a._next,e&&a instanceof i&&a.target===a.vars.onComplete||((n=a._startTime-a._delay)<0&&(r=1),l.add(a,n)),a=o;return h.add(l,0),r&&l.totalDuration(),l},d.add=function(r,n,a,l){var h,_,u,f,c,p;if("number"!=typeof n&&(n=this._parseTimeOrLabel(n,0,!0,r)),!(r instanceof t)){if(r instanceof Array||r&&r.push&&o(r)){for(a=a||"normal",l=l||0,h=n,_=r.length,u=0;u<_;u++)o(f=r[u])&&(f=new s({tweens:f})),this.add(f,h),"string"!=typeof f&&"function"!=typeof f&&("sequence"===a?h=f._startTime+f.totalDuration()/f._timeScale:"start"===a&&(f._startTime-=f.delay())),h+=l;return this._uncache(!0)}if("string"==typeof r)return this.addLabel(r,n);if("function"!=typeof r)throw"Cannot add "+r+" into the timeline; it is not a tween, timeline, function, or string.";r=i.delayedCall(0,r)}if(e.prototype.add.call(this,r,n),r._time&&r.render((this.rawTime()-r._startTime)*r._timeScale,!1,!1),(this._gc||this._time===this._duration)&&!this._paused&&this._duration<this.duration())for(p=(c=this).rawTime()>r._startTime;c._timeline;)p&&c._timeline.smoothChildTiming?c.totalTime(c._totalTime,!0):c._gc&&c._enabled(!0,!1),c=c._timeline;return this},d.remove=function(e){if(e instanceof t){this._remove(e,!1);var i=e._timeline=e.vars.useFrames?t._rootFramesTimeline:t._rootTimeline;return e._startTime=(e._paused?e._pauseTime:i._time)-(e._reversed?e.totalDuration()-e._totalTime:e._totalTime)/e._timeScale,this}if(e instanceof Array||e&&e.push&&o(e)){for(var s=e.length;--s>-1;)this.remove(e[s]);return this}return"string"==typeof e?this.removeLabel(e):this.kill(null,e)},d._remove=function(t,i){return e.prototype._remove.call(this,t,i),this._last?this._time>this.duration()&&(this._time=this._duration,this._totalTime=this._totalDuration):this._time=this._totalTime=this._duration=this._totalDuration=0,this},d.append=function(t,e){return this.add(t,this._parseTimeOrLabel(null,e,!0,t))},d.insert=d.insertMultiple=function(t,e,i,s){return this.add(t,e||0,i,s)},d.appendMultiple=function(t,e,i,s){return this.add(t,this._parseTimeOrLabel(null,e,!0,t),i,s)},d.addLabel=function(t,e){return this._labels[t]=this._parseTimeOrLabel(e),this},d.addPause=function(t,e,s,r){var n=i.delayedCall(0,c,s,r||this);return n.vars.onComplete=n.vars.onReverseComplete=e,n.data="isPause",this._hasPause=!0,this.add(n,t)},d.removeLabel=function(t){return delete this._labels[t],this},d.getLabelTime=function(t){return null!=this._labels[t]?this._labels[t]:-1},d._parseTimeOrLabel=function(e,i,s,r){var n,a;if(r instanceof t&&r.timeline===this)this.remove(r);else if(r&&(r instanceof Array||r.push&&o(r)))for(a=r.length;--a>-1;)r[a]instanceof t&&r[a].timeline===this&&this.remove(r[a]);if(n="number"!=typeof e||i?this.duration()>99999999999?this.recent().endTime(!1):this._duration:0,"string"==typeof i)return this._parseTimeOrLabel(i,s&&"number"==typeof e&&null==this._labels[i]?e-n:0,s);if(i=i||0,"string"!=typeof e||!isNaN(e)&&null==this._labels[e])null==e&&(e=n);else{if(-1===(a=e.indexOf("=")))return null==this._labels[e]?s?this._labels[e]=n+i:i:this._labels[e]+i;i=parseInt(e.charAt(a-1)+"1",10)*Number(e.substr(a+1)),e=a>1?this._parseTimeOrLabel(e.substr(0,a-1),0,s):n}return Number(e)+i},d.seek=function(t,e){return this.totalTime("number"==typeof t?t:this._parseTimeOrLabel(t),!1!==e)},d.stop=function(){return this.paused(!0)},d.gotoAndPlay=function(t,e){return this.play(t,e)},d.gotoAndStop=function(t,e){return this.pause(t,e)},d.render=function(t,e,i){this._gc&&this._enabled(!0,!1);var s,r,n,a,o,_,u,f=this._time,c=this._dirty?this.totalDuration():this._totalDuration,p=this._startTime,d=this._timeScale,m=this._paused;if(f!==this._time&&(t+=this._time-f),t>=c-1e-7&&t>=0)this._totalTime=this._time=c,this._reversed||this._hasPausedChild()||(r=!0,a="onComplete",o=!!this._timeline.autoRemoveChildren,0===this._duration&&(t<=0&&t>=-1e-7||this._rawPrevTime<0||1e-10===this._rawPrevTime)&&this._rawPrevTime!==t&&this._first&&(o=!0,this._rawPrevTime>1e-10&&(a="onReverseComplete"))),this._rawPrevTime=this._duration||!e||t||this._rawPrevTime===t?t:1e-10,t=c+1e-4;else if(t<1e-7)if(this._totalTime=this._time=0,(0!==f||0===this._duration&&1e-10!==this._rawPrevTime&&(this._rawPrevTime>0||t<0&&this._rawPrevTime>=0))&&(a="onReverseComplete",r=this._reversed),t<0)this._active=!1,this._timeline.autoRemoveChildren&&this._reversed?(o=r=!0,a="onReverseComplete"):this._rawPrevTime>=0&&this._first&&(o=!0),this._rawPrevTime=t;else{if(this._rawPrevTime=this._duration||!e||t||this._rawPrevTime===t?t:1e-10,0===t&&r)for(s=this._first;s&&0===s._startTime;)s._duration||(r=!1),s=s._next;t=0,this._initted||(o=!0)}else{if(this._hasPause&&!this._forcingPlayhead&&!e){if(t>=f)for(s=this._first;s&&s._startTime<=t&&!_;)s._duration||"isPause"!==s.data||s.ratio||0===s._startTime&&0===this._rawPrevTime||(_=s),s=s._next;else for(s=this._last;s&&s._startTime>=t&&!_;)s._duration||"isPause"===s.data&&s._rawPrevTime>0&&(_=s),s=s._prev;_&&(this._time=t=_._startTime,this._totalTime=t+this._cycle*(this._totalDuration+this._repeatDelay))}this._totalTime=this._time=this._rawPrevTime=t}if(this._time!==f&&this._first||i||o||_){if(this._initted||(this._initted=!0),this._active||!this._paused&&this._time!==f&&t>0&&(this._active=!0),0===f&&this.vars.onStart&&(0===this._time&&this._duration||e||this._callback("onStart")),(u=this._time)>=f)for(s=this._first;s&&(n=s._next,u===this._time&&(!this._paused||m));)(s._active||s._startTime<=u&&!s._paused&&!s._gc)&&(_===s&&this.pause(),s._reversed?s.render((s._dirty?s.totalDuration():s._totalDuration)-(t-s._startTime)*s._timeScale,e,i):s.render((t-s._startTime)*s._timeScale,e,i)),s=n;else for(s=this._last;s&&(n=s._prev,u===this._time&&(!this._paused||m));){if(s._active||s._startTime<=f&&!s._paused&&!s._gc){if(_===s){for(_=s._prev;_&&_.endTime()>this._time;)_.render(_._reversed?_.totalDuration()-(t-_._startTime)*_._timeScale:(t-_._startTime)*_._timeScale,e,i),_=_._prev;_=null,this.pause()}s._reversed?s.render((s._dirty?s.totalDuration():s._totalDuration)-(t-s._startTime)*s._timeScale,e,i):s.render((t-s._startTime)*s._timeScale,e,i)}s=n}this._onUpdate&&(e||(l.length&&h(),this._callback("onUpdate"))),a&&(this._gc||p!==this._startTime&&d===this._timeScale||(0===this._time||c>=this.totalDuration())&&(r&&(l.length&&h(),this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!e&&this.vars[a]&&this._callback(a)))}},d._hasPausedChild=function(){for(var t=this._first;t;){if(t._paused||t instanceof s&&t._hasPausedChild())return!0;t=t._next}return!1},d.getChildren=function(t,e,s,r){r=r||-9999999999;for(var n=[],a=this._first,o=0;a;)a._startTime<r||(a instanceof i?!1!==e&&(n[o++]=a):(!1!==s&&(n[o++]=a),!1!==t&&(o=(n=n.concat(a.getChildren(!0,e,s))).length))),a=a._next;return n},d.getTweensOf=function(t,e){var s,r,n=this._gc,a=[],o=0;for(n&&this._enabled(!0,!0),r=(s=i.getTweensOf(t)).length;--r>-1;)(s[r].timeline===this||e&&this._contains(s[r]))&&(a[o++]=s[r]);return n&&this._enabled(!1,!0),a},d.recent=function(){return this._recent},d._contains=function(t){for(var e=t.timeline;e;){if(e===this)return!0;e=e.timeline}return!1},d.shiftChildren=function(t,e,i){i=i||0;for(var s,r=this._first,n=this._labels;r;)r._startTime>=i&&(r._startTime+=t),r=r._next;if(e)for(s in n)n[s]>=i&&(n[s]+=t);return this._uncache(!0)},d._kill=function(t,e){if(!t&&!e)return this._enabled(!1,!1);for(var i=e?this.getTweensOf(e):this.getChildren(!0,!0,!1),s=i.length,r=!1;--s>-1;)i[s]._kill(t,e)&&(r=!0);return r},d.clear=function(t){var e=this.getChildren(!1,!0,!0),i=e.length;for(this._time=this._totalTime=0;--i>-1;)e[i]._enabled(!1,!1);return!1!==t&&(this._labels={}),this._uncache(!0)},d.invalidate=function(){for(var e=this._first;e;)e.invalidate(),e=e._next;return t.prototype.invalidate.call(this)},d._enabled=function(t,i){if(t===this._gc)for(var s=this._first;s;)s._enabled(t,!0),s=s._next;return e.prototype._enabled.call(this,t,i)},d.totalTime=function(e,i,s){this._forcingPlayhead=!0;var r=t.prototype.totalTime.apply(this,arguments);return this._forcingPlayhead=!1,r},d.duration=function(t){return arguments.length?(0!==this.duration()&&0!==t&&this.timeScale(this._duration/t),this):(this._dirty&&this.totalDuration(),this._duration)},d.totalDuration=function(t){if(!arguments.length){if(this._dirty){for(var e,i,s=0,r=this._last,n=999999999999;r;)e=r._prev,r._dirty&&r.totalDuration(),r._startTime>n&&this._sortChildren&&!r._paused&&!this._calculatingDuration?(this._calculatingDuration=1,this.add(r,r._startTime-r._delay),this._calculatingDuration=0):n=r._startTime,r._startTime<0&&!r._paused&&(s-=r._startTime,this._timeline.smoothChildTiming&&(this._startTime+=r._startTime/this._timeScale,this._time-=r._startTime,this._totalTime-=r._startTime,this._rawPrevTime-=r._startTime),this.shiftChildren(-r._startTime,!1,-9999999999),n=0),(i=r._startTime+r._totalDuration/r._timeScale)>s&&(s=i),r=e;this._duration=this._totalDuration=s,this._dirty=!1}return this._totalDuration}return t&&this.totalDuration()?this.timeScale(this._totalDuration/t):this},d.paused=function(e){if(!e)for(var i=this._first,s=this._time;i;)i._startTime===s&&"isPause"===i.data&&(i._rawPrevTime=0),i=i._next;return t.prototype.paused.apply(this,arguments)},d.usesFrames=function(){for(var e=this._timeline;e._timeline;)e=e._timeline;return e===t._rootFramesTimeline},d.rawTime=function(t){return t&&(this._paused||this._repeat&&this.time()>0&&this.totalProgress()<1)?this._totalTime%(this._duration+this._repeatDelay):this._paused?this._totalTime:(this._timeline.rawTime(t)-this._startTime)*this._timeScale},s},!0),_gsScope._gsDefine("TimelineMax",["TimelineLite","TweenLite","easing.Ease"],function(t,e,i){var s=function(e){t.call(this,e),this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._cycle=0,this._yoyo=!0===this.vars.yoyo,this._dirty=!0},r=e._internals,n=r.lazyTweens,a=r.lazyRender,o=_gsScope._gsDefine.globals,l=new i(null,null,1,0),h=s.prototype=new t;return h.constructor=s,h.kill()._gc=!1,s.version="1.20.4",h.invalidate=function(){return this._yoyo=!0===this.vars.yoyo,this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._uncache(!0),t.prototype.invalidate.call(this)},h.addCallback=function(t,i,s,r){return this.add(e.delayedCall(0,t,s,r),i)},h.removeCallback=function(t,e){if(t)if(null==e)this._kill(null,t);else for(var i=this.getTweensOf(t,!1),s=i.length,r=this._parseTimeOrLabel(e);--s>-1;)i[s]._startTime===r&&i[s]._enabled(!1,!1);return this},h.removePause=function(e){return this.removeCallback(t._internals.pauseCallback,e)},h.tweenTo=function(t,i){i=i||{};var s,r,n,a={ease:l,useFrames:this.usesFrames(),immediateRender:!1,lazy:!1},h=i.repeat&&o.TweenMax||e;for(r in i)a[r]=i[r];return a.time=this._parseTimeOrLabel(t),s=Math.abs(Number(a.time)-this._time)/this._timeScale||.001,n=new h(this,s,a),a.onStart=function(){n.target.paused(!0),n.vars.time===n.target.time()||s!==n.duration()||n.isFromTo||n.duration(Math.abs(n.vars.time-n.target.time())/n.target._timeScale).render(n.time(),!0,!0),i.onStart&&i.onStart.apply(i.onStartScope||i.callbackScope||n,i.onStartParams||[])},n},h.tweenFromTo=function(t,e,i){i=i||{},t=this._parseTimeOrLabel(t),i.startAt={onComplete:this.seek,onCompleteParams:[t],callbackScope:this},i.immediateRender=!1!==i.immediateRender;var s=this.tweenTo(e,i);return s.isFromTo=1,s.duration(Math.abs(s.vars.time-t)/this._timeScale||.001)},h.render=function(t,e,i){this._gc&&this._enabled(!0,!1);var s,r,o,l,h,_,u,f,c=this._time,p=this._dirty?this.totalDuration():this._totalDuration,d=this._duration,m=this._totalTime,g=this._startTime,y=this._timeScale,v=this._rawPrevTime,T=this._paused,x=this._cycle;if(c!==this._time&&(t+=this._time-c),t>=p-1e-7&&t>=0)this._locked||(this._totalTime=p,this._cycle=this._repeat),this._reversed||this._hasPausedChild()||(r=!0,l="onComplete",h=!!this._timeline.autoRemoveChildren,0===this._duration&&(t<=0&&t>=-1e-7||v<0||1e-10===v)&&v!==t&&this._first&&(h=!0,v>1e-10&&(l="onReverseComplete"))),this._rawPrevTime=this._duration||!e||t||this._rawPrevTime===t?t:1e-10,this._yoyo&&0!=(1&this._cycle)?this._time=t=0:(this._time=d,t=d+1e-4);else if(t<1e-7)if(this._locked||(this._totalTime=this._cycle=0),this._time=0,(0!==c||0===d&&1e-10!==v&&(v>0||t<0&&v>=0)&&!this._locked)&&(l="onReverseComplete",r=this._reversed),t<0)this._active=!1,this._timeline.autoRemoveChildren&&this._reversed?(h=r=!0,l="onReverseComplete"):v>=0&&this._first&&(h=!0),this._rawPrevTime=t;else{if(this._rawPrevTime=d||!e||t||this._rawPrevTime===t?t:1e-10,0===t&&r)for(s=this._first;s&&0===s._startTime;)s._duration||(r=!1),s=s._next;t=0,this._initted||(h=!0)}else if(0===d&&v<0&&(h=!0),this._time=this._rawPrevTime=t,this._locked||(this._totalTime=t,0!==this._repeat&&(_=d+this._repeatDelay,this._cycle=this._totalTime/_>>0,0!==this._cycle&&this._cycle===this._totalTime/_&&m<=t&&this._cycle--,this._time=this._totalTime-this._cycle*_,this._yoyo&&0!=(1&this._cycle)&&(this._time=d-this._time),this._time>d?(this._time=d,t=d+1e-4):this._time<0?this._time=t=0:t=this._time)),this._hasPause&&!this._forcingPlayhead&&!e){if((t=this._time)>=c||this._repeat&&x!==this._cycle)for(s=this._first;s&&s._startTime<=t&&!u;)s._duration||"isPause"!==s.data||s.ratio||0===s._startTime&&0===this._rawPrevTime||(u=s),s=s._next;else for(s=this._last;s&&s._startTime>=t&&!u;)s._duration||"isPause"===s.data&&s._rawPrevTime>0&&(u=s),s=s._prev;u&&u._startTime<d&&(this._time=t=u._startTime,this._totalTime=t+this._cycle*(this._totalDuration+this._repeatDelay))}if(this._cycle!==x&&!this._locked){var b=this._yoyo&&0!=(1&x),w=b===(this._yoyo&&0!=(1&this._cycle)),P=this._totalTime,O=this._cycle,S=this._rawPrevTime,k=this._time;if(this._totalTime=x*d,this._cycle<x?b=!b:this._totalTime+=d,this._time=c,this._rawPrevTime=0===d?v-1e-4:v,this._cycle=x,this._locked=!0,c=b?0:d,this.render(c,e,0===d),e||this._gc||this.vars.onRepeat&&(this._cycle=O,this._locked=!1,this._callback("onRepeat")),c!==this._time)return;if(w&&(this._cycle=x,this._locked=!0,c=b?d+1e-4:-1e-4,this.render(c,!0,!1)),this._locked=!1,this._paused&&!T)return;this._time=k,this._totalTime=P,this._cycle=O,this._rawPrevTime=S}if(this._time!==c&&this._first||i||h||u){if(this._initted||(this._initted=!0),this._active||!this._paused&&this._totalTime!==m&&t>0&&(this._active=!0),0===m&&this.vars.onStart&&(0===this._totalTime&&this._totalDuration||e||this._callback("onStart")),(f=this._time)>=c)for(s=this._first;s&&(o=s._next,f===this._time&&(!this._paused||T));)(s._active||s._startTime<=this._time&&!s._paused&&!s._gc)&&(u===s&&this.pause(),s._reversed?s.render((s._dirty?s.totalDuration():s._totalDuration)-(t-s._startTime)*s._timeScale,e,i):s.render((t-s._startTime)*s._timeScale,e,i)),s=o;else for(s=this._last;s&&(o=s._prev,f===this._time&&(!this._paused||T));){if(s._active||s._startTime<=c&&!s._paused&&!s._gc){if(u===s){for(u=s._prev;u&&u.endTime()>this._time;)u.render(u._reversed?u.totalDuration()-(t-u._startTime)*u._timeScale:(t-u._startTime)*u._timeScale,e,i),u=u._prev;u=null,this.pause()}s._reversed?s.render((s._dirty?s.totalDuration():s._totalDuration)-(t-s._startTime)*s._timeScale,e,i):s.render((t-s._startTime)*s._timeScale,e,i)}s=o}this._onUpdate&&(e||(n.length&&a(),this._callback("onUpdate"))),l&&(this._locked||this._gc||g!==this._startTime&&y===this._timeScale||(0===this._time||p>=this.totalDuration())&&(r&&(n.length&&a(),this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!e&&this.vars[l]&&this._callback(l)))}else m!==this._totalTime&&this._onUpdate&&(e||this._callback("onUpdate"))},h.getActive=function(t,e,i){null==t&&(t=!0),null==e&&(e=!0),null==i&&(i=!1);var s,r,n=[],a=this.getChildren(t,e,i),o=0,l=a.length;for(s=0;s<l;s++)(r=a[s]).isActive()&&(n[o++]=r);return n},h.getLabelAfter=function(t){t||0!==t&&(t=this._time);var e,i=this.getLabelsArray(),s=i.length;for(e=0;e<s;e++)if(i[e].time>t)return i[e].name;return null},h.getLabelBefore=function(t){null==t&&(t=this._time);for(var e=this.getLabelsArray(),i=e.length;--i>-1;)if(e[i].time<t)return e[i].name;return null},h.getLabelsArray=function(){var t,e=[],i=0;for(t in this._labels)e[i++]={time:this._labels[t],name:t};return e.sort(function(t,e){return t.time-e.time}),e},h.invalidate=function(){return this._locked=!1,t.prototype.invalidate.call(this)},h.progress=function(t,e){return arguments.length?this.totalTime(this.duration()*(this._yoyo&&0!=(1&this._cycle)?1-t:t)+this._cycle*(this._duration+this._repeatDelay),e):this._time/this.duration()||0},h.totalProgress=function(t,e){return arguments.length?this.totalTime(this.totalDuration()*t,e):this._totalTime/this.totalDuration()||0},h.totalDuration=function(e){return arguments.length?-1!==this._repeat&&e?this.timeScale(this.totalDuration()/e):this:(this._dirty&&(t.prototype.totalDuration.call(this),this._totalDuration=-1===this._repeat?999999999999:this._duration*(this._repeat+1)+this._repeatDelay*this._repeat),this._totalDuration)},h.time=function(t,e){return arguments.length?(this._dirty&&this.totalDuration(),t>this._duration&&(t=this._duration),this._yoyo&&0!=(1&this._cycle)?t=this._duration-t+this._cycle*(this._duration+this._repeatDelay):0!==this._repeat&&(t+=this._cycle*(this._duration+this._repeatDelay)),this.totalTime(t,e)):this._time},h.repeat=function(t){return arguments.length?(this._repeat=t,this._uncache(!0)):this._repeat},h.repeatDelay=function(t){return arguments.length?(this._repeatDelay=t,this._uncache(!0)):this._repeatDelay},h.yoyo=function(t){return arguments.length?(this._yoyo=t,this):this._yoyo},h.currentLabel=function(t){return arguments.length?this.seek(t,!0):this.getLabelBefore(this._time+1e-8)},s},!0),t=180/Math.PI,e=[],i=[],s=[],r={},n=_gsScope._gsDefine.globals,a=function(t,e,i,s){i===s&&(i=s-(s-e)/1e6),t===e&&(e=t+(i-t)/1e6),this.a=t,this.b=e,this.c=i,this.d=s,this.da=s-t,this.ca=i-t,this.ba=e-t},o=function(t,e,i,s){var r={a:t},n={},a={},o={c:s},l=(t+e)/2,h=(e+i)/2,_=(i+s)/2,u=(l+h)/2,f=(h+_)/2,c=(f-u)/8;return r.b=l+(t-l)/4,n.b=u+c,r.c=n.a=(r.b+n.b)/2,n.c=a.a=(u+f)/2,a.b=f-c,o.b=_+(s-_)/4,a.c=o.a=(a.b+o.b)/2,[r,n,a,o]},l=function(t,r,n,a,l){var h,_,u,f,c,p,d,m,g,y,v,T,x,b=t.length-1,w=0,P=t[0].a;for(h=0;h<b;h++)_=(c=t[w]).a,u=c.d,f=t[w+1].d,l?(v=e[h],x=((T=i[h])+v)*r*.25/(a?.5:s[h]||.5),m=u-((p=u-(u-_)*(a?.5*r:0!==v?x/v:0))+(((d=u+(f-u)*(a?.5*r:0!==T?x/T:0))-p)*(3*v/(v+T)+.5)/4||0))):m=u-((p=u-(u-_)*r*.5)+(d=u+(f-u)*r*.5))/2,p+=m,d+=m,c.c=g=p,c.b=0!==h?P:P=c.a+.6*(c.c-c.a),c.da=u-_,c.ca=g-_,c.ba=P-_,n?(y=o(_,P,g,u),t.splice(w,1,y[0],y[1],y[2],y[3]),w+=4):w++,P=d;(c=t[w]).b=P,c.c=P+.4*(c.d-P),c.da=c.d-c.a,c.ca=c.c-c.a,c.ba=P-c.a,n&&(y=o(c.a,P,c.c,c.d),t.splice(w,1,y[0],y[1],y[2],y[3]))},h=function(t,s,r,n){var o,l,h,_,u,f,c=[];if(n)for(l=(t=[n].concat(t)).length;--l>-1;)"string"==typeof(f=t[l][s])&&"="===f.charAt(1)&&(t[l][s]=n[s]+Number(f.charAt(0)+f.substr(2)));if((o=t.length-2)<0)return c[0]=new a(t[0][s],0,0,t[0][s]),c;for(l=0;l<o;l++)h=t[l][s],_=t[l+1][s],c[l]=new a(h,0,0,_),r&&(u=t[l+2][s],e[l]=(e[l]||0)+(_-h)*(_-h),i[l]=(i[l]||0)+(u-_)*(u-_));return c[l]=new a(t[l][s],0,0,t[l+1][s]),c},_=function(t,n,a,o,_,u){var f,c,p,d,m,g,y,v,T={},x=[],b=u||t[0];for(c in _="string"==typeof _?","+_+",":",x,y,z,left,top,right,bottom,marginTop,marginLeft,marginRight,marginBottom,paddingLeft,paddingTop,paddingRight,paddingBottom,backgroundPosition,backgroundPosition_y,",null==n&&(n=1),t[0])x.push(c);if(t.length>1){for(v=t[t.length-1],y=!0,f=x.length;--f>-1;)if(c=x[f],Math.abs(b[c]-v[c])>.05){y=!1;break}y&&(t=t.concat(),u&&t.unshift(u),t.push(t[1]),u=t[t.length-3])}for(e.length=i.length=s.length=0,f=x.length;--f>-1;)c=x[f],r[c]=-1!==_.indexOf(","+c+","),T[c]=h(t,c,r[c],u);for(f=e.length;--f>-1;)e[f]=Math.sqrt(e[f]),i[f]=Math.sqrt(i[f]);if(!o){for(f=x.length;--f>-1;)if(r[c])for(g=(p=T[x[f]]).length-1,d=0;d<g;d++)m=p[d+1].da/i[d]+p[d].da/e[d]||0,s[d]=(s[d]||0)+m*m;for(f=s.length;--f>-1;)s[f]=Math.sqrt(s[f])}for(f=x.length,d=a?4:1;--f>-1;)p=T[c=x[f]],l(p,n,a,o,r[c]),y&&(p.splice(0,d),p.splice(p.length-d,d));return T},u=function(t,e,i){for(var s,r,n,a,o,l,h,_,u,f,c,p=1/i,d=t.length;--d>-1;)for(n=(f=t[d]).a,a=f.d-n,o=f.c-n,l=f.b-n,s=r=0,_=1;_<=i;_++)s=r-(r=((h=p*_)*h*a+3*(u=1-h)*(h*o+u*l))*h),e[c=d*i+_-1]=(e[c]||0)+s*s},f=_gsScope._gsDefine.plugin({propName:"bezier",priority:-1,version:"1.3.8",API:2,global:!0,init:function(t,e,i){this._target=t,e instanceof Array&&(e={values:e}),this._func={},this._mod={},this._props=[],this._timeRes=null==e.timeResolution?6:parseInt(e.timeResolution,10);var s,r,n,o,l,h=e.values||[],f={},c=h[0],p=e.autoRotate||i.vars.orientToBezier;for(s in this._autoRotate=p?p instanceof Array?p:[["x","y","rotation",!0===p?0:Number(p)||0]]:null,c)this._props.push(s);for(n=this._props.length;--n>-1;)s=this._props[n],this._overwriteProps.push(s),r=this._func[s]="function"==typeof t[s],f[s]=r?t[s.indexOf("set")||"function"!=typeof t["get"+s.substr(3)]?s:"get"+s.substr(3)]():parseFloat(t[s]),l||f[s]!==h[0][s]&&(l=f);if(this._beziers="cubic"!==e.type&&"quadratic"!==e.type&&"soft"!==e.type?_(h,isNaN(e.curviness)?1:e.curviness,!1,"thruBasic"===e.type,e.correlate,l):function(t,e,i){var s,r,n,o,l,h,_,u,f,c,p,d={},m="cubic"===(e=e||"soft")?3:2,g="soft"===e,y=[];if(g&&i&&(t=[i].concat(t)),null==t||t.length<m+1)throw"invalid Bezier data";for(f in t[0])y.push(f);for(h=y.length;--h>-1;){for(d[f=y[h]]=l=[],c=0,u=t.length,_=0;_<u;_++)s=null==i?t[_][f]:"string"==typeof(p=t[_][f])&&"="===p.charAt(1)?i[f]+Number(p.charAt(0)+p.substr(2)):Number(p),g&&_>1&&_<u-1&&(l[c++]=(s+l[c-2])/2),l[c++]=s;for(u=c-m+1,c=0,_=0;_<u;_+=m)s=l[_],r=l[_+1],n=l[_+2],o=2===m?0:l[_+3],l[c++]=p=3===m?new a(s,r,n,o):new a(s,(2*r+s)/3,(2*r+n)/3,n);l.length=c}return d}(h,e.type,f),this._segCount=this._beziers[s].length,this._timeRes){var d=function(t,e){var i,s,r,n,a=[],o=[],l=0,h=0,_=(e=e>>0||6)-1,f=[],c=[];for(i in t)u(t[i],a,e);for(r=a.length,s=0;s<r;s++)l+=Math.sqrt(a[s]),c[n=s%e]=l,n===_&&(h+=l,f[n=s/e>>0]=c,o[n]=h,l=0,c=[]);return{length:h,lengths:o,segments:f}}(this._beziers,this._timeRes);this._length=d.length,this._lengths=d.lengths,this._segments=d.segments,this._l1=this._li=this._s1=this._si=0,this._l2=this._lengths[0],this._curSeg=this._segments[0],this._s2=this._curSeg[0],this._prec=1/this._curSeg.length}if(p=this._autoRotate)for(this._initialRotations=[],p[0]instanceof Array||(this._autoRotate=p=[p]),n=p.length;--n>-1;){for(o=0;o<3;o++)s=p[n][o],this._func[s]="function"==typeof t[s]&&t[s.indexOf("set")||"function"!=typeof t["get"+s.substr(3)]?s:"get"+s.substr(3)];s=p[n][2],this._initialRotations[n]=(this._func[s]?this._func[s].call(this._target):this._target[s])||0,this._overwriteProps.push(s)}return this._startRatio=i.vars.runBackwards?1:0,!0},set:function(e){var i,s,r,n,a,o,l,h,_,u,f=this._segCount,c=this._func,p=this._target,d=e!==this._startRatio;if(this._timeRes){if(_=this._lengths,u=this._curSeg,e*=this._length,r=this._li,e>this._l2&&r<f-1){for(h=f-1;r<h&&(this._l2=_[++r])<=e;);this._l1=_[r-1],this._li=r,this._curSeg=u=this._segments[r],this._s2=u[this._s1=this._si=0]}else if(e<this._l1&&r>0){for(;r>0&&(this._l1=_[--r])>=e;);0===r&&e<this._l1?this._l1=0:r++,this._l2=_[r],this._li=r,this._curSeg=u=this._segments[r],this._s1=u[(this._si=u.length-1)-1]||0,this._s2=u[this._si]}if(i=r,e-=this._l1,r=this._si,e>this._s2&&r<u.length-1){for(h=u.length-1;r<h&&(this._s2=u[++r])<=e;);this._s1=u[r-1],this._si=r}else if(e<this._s1&&r>0){for(;r>0&&(this._s1=u[--r])>=e;);0===r&&e<this._s1?this._s1=0:r++,this._s2=u[r],this._si=r}o=(r+(e-this._s1)/(this._s2-this._s1))*this._prec||0}else o=(e-(i=e<0?0:e>=1?f-1:f*e>>0)*(1/f))*f;for(s=1-o,r=this._props.length;--r>-1;)n=this._props[r],l=(o*o*(a=this._beziers[n][i]).da+3*s*(o*a.ca+s*a.ba))*o+a.a,this._mod[n]&&(l=this._mod[n](l,p)),c[n]?p[n](l):p[n]=l;if(this._autoRotate){var m,g,y,v,T,x,b,w=this._autoRotate;for(r=w.length;--r>-1;)n=w[r][2],x=w[r][3]||0,b=!0===w[r][4]?1:t,a=this._beziers[w[r][0]],m=this._beziers[w[r][1]],a&&m&&(a=a[i],m=m[i],g=a.a+(a.b-a.a)*o,g+=((v=a.b+(a.c-a.b)*o)-g)*o,v+=(a.c+(a.d-a.c)*o-v)*o,y=m.a+(m.b-m.a)*o,y+=((T=m.b+(m.c-m.b)*o)-y)*o,T+=(m.c+(m.d-m.c)*o-T)*o,l=d?Math.atan2(T-y,v-g)*b+x:this._initialRotations[r],this._mod[n]&&(l=this._mod[n](l,p)),c[n]?p[n](l):p[n]=l)}}}),c=f.prototype,f.bezierThrough=_,f.cubicToQuadratic=o,f._autoCSS=!0,f.quadraticToCubic=function(t,e,i){return new a(t,(2*e+t)/3,(2*e+i)/3,i)},f._cssRegister=function(){var t=n.CSSPlugin;if(t){var e=t._internals,i=e._parseToProxy,s=e._setPluginRatio,r=e.CSSPropTween;e._registerComplexSpecialProp("bezier",{parser:function(t,e,n,a,o,l){e instanceof Array&&(e={values:e}),l=new f;var h,_,u,c=e.values,p=c.length-1,d=[],m={};if(p<0)return o;for(h=0;h<=p;h++)u=i(t,c[h],a,o,l,p!==h),d[h]=u.end;for(_ in e)m[_]=e[_];return m.values=d,(o=new r(t,"bezier",0,0,u.pt,2)).data=u,o.plugin=l,o.setRatio=s,0===m.autoRotate&&(m.autoRotate=!0),!m.autoRotate||m.autoRotate instanceof Array||(h=!0===m.autoRotate?0:Number(m.autoRotate),m.autoRotate=null!=u.end.left?[["left","top","rotation",h,!1]]:null!=u.end.x&&[["x","y","rotation",h,!1]]),m.autoRotate&&(a._transform||a._enableTransforms(!1),u.autoRotate=a._target._gsTransform,u.proxy.rotation=u.autoRotate.rotation||0,a._overwriteProps.push("rotation")),l._onInitTween(u.proxy,m,a._tween),o}})}},c._mod=function(t){for(var e,i=this._overwriteProps,s=i.length;--s>-1;)(e=t[i[s]])&&"function"==typeof e&&(this._mod[i[s]]=e)},c._kill=function(t){var e,i,s=this._props;for(e in this._beziers)if(e in t)for(delete this._beziers[e],delete this._func[e],i=s.length;--i>-1;)s[i]===e&&s.splice(i,1);if(s=this._autoRotate)for(i=s.length;--i>-1;)t[s[i][2]]&&s.splice(i,1);return this._super._kill.call(this,t)},_gsScope._gsDefine("plugins.CSSPlugin",["plugins.TweenPlugin","TweenLite"],function(t,e){var i,s,r,n,a=function(){t.call(this,"css"),this._overwriteProps.length=0,this.setRatio=a.prototype.setRatio},o=_gsScope._gsDefine.globals,l={},h=a.prototype=new t("css");h.constructor=a,a.version="1.20.5",a.API=2,a.defaultTransformPerspective=0,a.defaultSkewType="compensated",a.defaultSmoothOrigin=!0,h="px",a.suffixMap={top:h,right:h,bottom:h,left:h,width:h,height:h,fontSize:h,padding:h,margin:h,perspective:h,lineHeight:""};var _,u,f,c,p,d,m,g,y=/(?:\-|\.|\b)(\d|\.|e\-)+/g,v=/(?:\d|\-\d|\.\d|\-\.\d|\+=\d|\-=\d|\+=.\d|\-=\.\d)+/g,T=/(?:\+=|\-=|\-|\b)[\d\-\.]+[a-zA-Z0-9]*(?:%|\b)/gi,x=/(?![+-]?\d*\.?\d+|[+-]|e[+-]\d+)[^0-9]/g,b=/(?:\d|\-|\+|=|#|\.)*/g,w=/opacity *= *([^)]*)/i,P=/opacity:([^;]*)/i,O=/alpha\(opacity *=.+?\)/i,S=/^(rgb|hsl)/,k=/([A-Z])/g,R=/-([a-z])/gi,A=/(^(?:url\(\"|url\())|(?:(\"\))$|\)$)/gi,C=function(t,e){return e.toUpperCase()},M=/(?:Left|Right|Width)/i,D=/(M11|M12|M21|M22)=[\d\-\.e]+/gi,F=/progid\:DXImageTransform\.Microsoft\.Matrix\(.+?\)/i,z=/,(?=[^\)]*(?:\(|$))/gi,E=/[\s,\(]/i,I=Math.PI/180,X=180/Math.PI,L={},N={style:{}},B=_gsScope.document||{createElement:function(){return N}},Y=function(t,e){return B.createElementNS?B.createElementNS(e||"http://www.w3.org/1999/xhtml",t):B.createElement(t)},j=Y("div"),U=Y("img"),V=a._internals={_specialProps:l},q=(_gsScope.navigator||{}).userAgent||"",W=function(){var t=q.indexOf("Android"),e=Y("a");return f=-1!==q.indexOf("Safari")&&-1===q.indexOf("Chrome")&&(-1===t||parseFloat(q.substr(t+8,2))>3),p=f&&parseFloat(q.substr(q.indexOf("Version/")+8,2))<6,c=-1!==q.indexOf("Firefox"),(/MSIE ([0-9]{1,}[\.0-9]{0,})/.exec(q)||/Trident\/.*rv:([0-9]{1,}[\.0-9]{0,})/.exec(q))&&(d=parseFloat(RegExp.$1)),!!e&&(e.style.cssText="top:1px;opacity:.55;",/^0.55/.test(e.style.opacity))}(),G=function(t){return w.test("string"==typeof t?t:(t.currentStyle?t.currentStyle.filter:t.style.filter)||"")?parseFloat(RegExp.$1)/100:1},Z=function(t){_gsScope.console&&console.log(t)},H="",$="",Q=function(t,e){var i,s,r=(e=e||j).style;if(void 0!==r[t])return t;for(t=t.charAt(0).toUpperCase()+t.substr(1),i=["O","Moz","ms","Ms","Webkit"],s=5;--s>-1&&void 0===r[i[s]+t];);return s>=0?(H="-"+($=3===s?"ms":i[s]).toLowerCase()+"-",$+t):null},K=("undefined"!=typeof window?window:B.defaultView||{getComputedStyle:function(){}}).getComputedStyle,J=a.getStyle=function(t,e,i,s,r){var n;return W||"opacity"!==e?(!s&&t.style[e]?n=t.style[e]:(i=i||K(t))?n=i[e]||i.getPropertyValue(e)||i.getPropertyValue(e.replace(k,"-$1").toLowerCase()):t.currentStyle&&(n=t.currentStyle[e]),null==r||n&&"none"!==n&&"auto"!==n&&"auto auto"!==n?n:r):G(t)},tt=V.convertToPixels=function(t,i,s,r,n){if("px"===r||!r&&"lineHeight"!==i)return s;if("auto"===r||!s)return 0;var o,l,h,_=M.test(i),u=t,f=j.style,c=s<0,p=1===s;if(c&&(s=-s),p&&(s*=100),"lineHeight"!==i||r)if("%"===r&&-1!==i.indexOf("border"))o=s/100*(_?t.clientWidth:t.clientHeight);else{if(f.cssText="border:0 solid red;position:"+J(t,"position")+";line-height:0;","%"!==r&&u.appendChild&&"v"!==r.charAt(0)&&"rem"!==r)f[_?"borderLeftWidth":"borderTopWidth"]=s+r;else{if(u=t.parentNode||B.body,-1!==J(u,"display").indexOf("flex")&&(f.position="absolute"),l=u._gsCache,h=e.ticker.frame,l&&_&&l.time===h)return l.width*s/100;f[_?"width":"height"]=s+r}u.appendChild(j),o=parseFloat(j[_?"offsetWidth":"offsetHeight"]),u.removeChild(j),_&&"%"===r&&!1!==a.cacheWidths&&((l=u._gsCache=u._gsCache||{}).time=h,l.width=o/s*100),0!==o||n||(o=tt(t,i,s,r,!0))}else l=K(t).lineHeight,t.style.lineHeight=s,o=parseFloat(K(t).lineHeight),t.style.lineHeight=l;return p&&(o/=100),c?-o:o},et=V.calculateOffset=function(t,e,i){if("absolute"!==J(t,"position",i))return 0;var s="left"===e?"Left":"Top",r=J(t,"margin"+s,i);return t["offset"+s]-(tt(t,e,parseFloat(r),r.replace(b,""))||0)},it=function(t,e){var i,s,r,n={};if(e=e||K(t,null))if(i=e.length)for(;--i>-1;)-1!==(r=e[i]).indexOf("-transform")&&Ft!==r||(n[r.replace(R,C)]=e.getPropertyValue(r));else for(i in e)-1!==i.indexOf("Transform")&&Dt!==i||(n[i]=e[i]);else if(e=t.currentStyle||t.style)for(i in e)"string"==typeof i&&void 0===n[i]&&(n[i.replace(R,C)]=e[i]);return W||(n.opacity=G(t)),s=Wt(t,e,!1),n.rotation=s.rotation,n.skewX=s.skewX,n.scaleX=s.scaleX,n.scaleY=s.scaleY,n.x=s.x,n.y=s.y,Et&&(n.z=s.z,n.rotationX=s.rotationX,n.rotationY=s.rotationY,n.scaleZ=s.scaleZ),n.filters&&delete n.filters,n},st=function(t,e,i,s,r){var n,a,o,l={},h=t.style;for(a in i)"cssText"!==a&&"length"!==a&&isNaN(a)&&(e[a]!==(n=i[a])||r&&r[a])&&-1===a.indexOf("Origin")&&("number"!=typeof n&&"string"!=typeof n||(l[a]="auto"!==n||"left"!==a&&"top"!==a?""!==n&&"auto"!==n&&"none"!==n||"string"!=typeof e[a]||""===e[a].replace(x,"")?n:0:et(t,a),void 0!==h[a]&&(o=new yt(h,a,h[a],o))));if(s)for(a in s)"className"!==a&&(l[a]=s[a]);return{difs:l,firstMPT:o}},rt={width:["Left","Right"],height:["Top","Bottom"]},nt=["marginLeft","marginRight","marginTop","marginBottom"],at=function(t,e,i){if("svg"===(t.nodeName+"").toLowerCase())return(i||K(t))[e]||0;if(t.getCTM&&Ut(t))return t.getBBox()[e]||0;var s=parseFloat("width"===e?t.offsetWidth:t.offsetHeight),r=rt[e],n=r.length;for(i=i||K(t,null);--n>-1;)s-=parseFloat(J(t,"padding"+r[n],i,!0))||0,s-=parseFloat(J(t,"border"+r[n]+"Width",i,!0))||0;return s},ot=function(t,e){if("contain"===t||"auto"===t||"auto auto"===t)return t+" ";null!=t&&""!==t||(t="0 0");var i,s=t.split(" "),r=-1!==t.indexOf("left")?"0%":-1!==t.indexOf("right")?"100%":s[0],n=-1!==t.indexOf("top")?"0%":-1!==t.indexOf("bottom")?"100%":s[1];if(s.length>3&&!e){for(s=t.split(", ").join(",").split(","),t=[],i=0;i<s.length;i++)t.push(ot(s[i]));return t.join(",")}return null==n?n="center"===r?"50%":"0":"center"===n&&(n="50%"),("center"===r||isNaN(parseFloat(r))&&-1===(r+"").indexOf("="))&&(r="50%"),t=r+" "+n+(s.length>2?" "+s[2]:""),e&&(e.oxp=-1!==r.indexOf("%"),e.oyp=-1!==n.indexOf("%"),e.oxr="="===r.charAt(1),e.oyr="="===n.charAt(1),e.ox=parseFloat(r.replace(x,"")),e.oy=parseFloat(n.replace(x,"")),e.v=t),e||t},lt=function(t,e){return"function"==typeof t&&(t=t(g,m)),"string"==typeof t&&"="===t.charAt(1)?parseInt(t.charAt(0)+"1",10)*parseFloat(t.substr(2)):parseFloat(t)-parseFloat(e)||0},ht=function(t,e){return"function"==typeof t&&(t=t(g,m)),null==t?e:"string"==typeof t&&"="===t.charAt(1)?parseInt(t.charAt(0)+"1",10)*parseFloat(t.substr(2))+e:parseFloat(t)||0},_t=function(t,e,i,s){var r,n,a,o,l;return"function"==typeof t&&(t=t(g,m)),null==t?o=e:"number"==typeof t?o=t:(r=360,n=t.split("_"),a=((l="="===t.charAt(1))?parseInt(t.charAt(0)+"1",10)*parseFloat(n[0].substr(2)):parseFloat(n[0]))*(-1===t.indexOf("rad")?1:X)-(l?0:e),n.length&&(s&&(s[i]=e+a),-1!==t.indexOf("short")&&(a%=r)!==a%(r/2)&&(a=a<0?a+r:a-r),-1!==t.indexOf("_cw")&&a<0?a=(a+9999999999*r)%r-(a/r|0)*r:-1!==t.indexOf("ccw")&&a>0&&(a=(a-9999999999*r)%r-(a/r|0)*r)),o=e+a),o<1e-6&&o>-1e-6&&(o=0),o},ut={aqua:[0,255,255],lime:[0,255,0],silver:[192,192,192],black:[0,0,0],maroon:[128,0,0],teal:[0,128,128],blue:[0,0,255],navy:[0,0,128],white:[255,255,255],fuchsia:[255,0,255],olive:[128,128,0],yellow:[255,255,0],orange:[255,165,0],gray:[128,128,128],purple:[128,0,128],green:[0,128,0],red:[255,0,0],pink:[255,192,203],cyan:[0,255,255],transparent:[255,255,255,0]},ft=function(t,e,i){return 255*(6*(t=t<0?t+1:t>1?t-1:t)<1?e+(i-e)*t*6:t<.5?i:3*t<2?e+(i-e)*(2/3-t)*6:e)+.5|0},ct=a.parseColor=function(t,e){var i,s,r,n,a,o,l,h,_,u,f;if(t)if("number"==typeof t)i=[t>>16,t>>8&255,255&t];else{if(","===t.charAt(t.length-1)&&(t=t.substr(0,t.length-1)),ut[t])i=ut[t];else if("#"===t.charAt(0))4===t.length&&(t="#"+(s=t.charAt(1))+s+(r=t.charAt(2))+r+(n=t.charAt(3))+n),i=[(t=parseInt(t.substr(1),16))>>16,t>>8&255,255&t];else if("hsl"===t.substr(0,3))if(i=f=t.match(y),e){if(-1!==t.indexOf("="))return t.match(v)}else a=Number(i[0])%360/360,o=Number(i[1])/100,s=2*(l=Number(i[2])/100)-(r=l<=.5?l*(o+1):l+o-l*o),i.length>3&&(i[3]=Number(i[3])),i[0]=ft(a+1/3,s,r),i[1]=ft(a,s,r),i[2]=ft(a-1/3,s,r);else i=t.match(y)||ut.transparent;i[0]=Number(i[0]),i[1]=Number(i[1]),i[2]=Number(i[2]),i.length>3&&(i[3]=Number(i[3]))}else i=ut.black;return e&&!f&&(s=i[0]/255,r=i[1]/255,n=i[2]/255,l=((h=Math.max(s,r,n))+(_=Math.min(s,r,n)))/2,h===_?a=o=0:(u=h-_,o=l>.5?u/(2-h-_):u/(h+_),a=h===s?(r-n)/u+(r<n?6:0):h===r?(n-s)/u+2:(s-r)/u+4,a*=60),i[0]=a+.5|0,i[1]=100*o+.5|0,i[2]=100*l+.5|0),i},pt=function(t,e){var i,s,r,n=t.match(dt)||[],a=0,o="";if(!n.length)return t;for(i=0;i<n.length;i++)s=n[i],a+=(r=t.substr(a,t.indexOf(s,a)-a)).length+s.length,3===(s=ct(s,e)).length&&s.push(1),o+=r+(e?"hsla("+s[0]+","+s[1]+"%,"+s[2]+"%,"+s[3]:"rgba("+s.join(","))+")";return o+t.substr(a)},dt="(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3}){1,2}\\b";for(h in ut)dt+="|"+h+"\\b";dt=new RegExp(dt+")","gi"),a.colorStringFilter=function(t){var e,i=t[0]+" "+t[1];dt.test(i)&&(e=-1!==i.indexOf("hsl(")||-1!==i.indexOf("hsla("),t[0]=pt(t[0],e),t[1]=pt(t[1],e)),dt.lastIndex=0},e.defaultStringFilter||(e.defaultStringFilter=a.colorStringFilter);var mt=function(t,e,i,s){if(null==t)return function(t){return t};var r,n=e?(t.match(dt)||[""])[0]:"",a=t.split(n).join("").match(T)||[],o=t.substr(0,t.indexOf(a[0])),l=")"===t.charAt(t.length-1)?")":"",h=-1!==t.indexOf(" ")?" ":",",_=a.length,u=_>0?a[0].replace(y,""):"";return _?r=e?function(t){var e,f,c,p;if("number"==typeof t)t+=u;else if(s&&z.test(t)){for(p=t.replace(z,"|").split("|"),c=0;c<p.length;c++)p[c]=r(p[c]);return p.join(",")}if(e=(t.match(dt)||[n])[0],c=(f=t.split(e).join("").match(T)||[]).length,_>c--)for(;++c<_;)f[c]=i?f[(c-1)/2|0]:a[c];return o+f.join(h)+h+e+l+(-1!==t.indexOf("inset")?" inset":"")}:function(t){var e,n,f;if("number"==typeof t)t+=u;else if(s&&z.test(t)){for(n=t.replace(z,"|").split("|"),f=0;f<n.length;f++)n[f]=r(n[f]);return n.join(",")}if(f=(e=t.match(T)||[]).length,_>f--)for(;++f<_;)e[f]=i?e[(f-1)/2|0]:a[f];return o+e.join(h)+l}:function(t){return t}},gt=function(t){return t=t.split(","),function(e,i,s,r,n,a,o){var l,h=(i+"").split(" ");for(o={},l=0;l<4;l++)o[t[l]]=h[l]=h[l]||h[(l-1)/2>>0];return r.parse(e,o,n,a)}},yt=(V._setPluginRatio=function(t){this.plugin.setRatio(t);for(var e,i,s,r,n,a=this.data,o=a.proxy,l=a.firstMPT;l;)e=o[l.v],l.r?e=l.r(e):e<1e-6&&e>-1e-6&&(e=0),l.t[l.p]=e,l=l._next;if(a.autoRotate&&(a.autoRotate.rotation=a.mod?a.mod.call(this._tween,o.rotation,this.t,this._tween):o.rotation),1===t||0===t)for(l=a.firstMPT,n=1===t?"e":"b";l;){if((i=l.t).type){if(1===i.type){for(r=i.xs0+i.s+i.xs1,s=1;s<i.l;s++)r+=i["xn"+s]+i["xs"+(s+1)];i[n]=r}}else i[n]=i.s+i.xs0;l=l._next}},function(t,e,i,s,r){this.t=t,this.p=e,this.v=i,this.r=r,s&&(s._prev=this,this._next=s)}),vt=(V._parseToProxy=function(t,e,i,s,r,n){var a,o,l,h,_,u=s,f={},c={},p=i._transform,d=L;for(i._transform=null,L=e,s=_=i.parse(t,e,s,r),L=d,n&&(i._transform=p,u&&(u._prev=null,u._prev&&(u._prev._next=null)));s&&s!==u;){if(s.type<=1&&(c[o=s.p]=s.s+s.c,f[o]=s.s,n||(h=new yt(s,"s",o,h,s.r),s.c=0),1===s.type))for(a=s.l;--a>0;)l="xn"+a,c[o=s.p+"_"+l]=s.data[l],f[o]=s[l],n||(h=new yt(s,l,o,h,s.rxp[l]));s=s._next}return{proxy:f,end:c,firstMPT:h,pt:_}},V.CSSPropTween=function(t,e,s,r,a,o,l,h,_,u,f){this.t=t,this.p=e,this.s=s,this.c=r,this.n=l||e,t instanceof vt||n.push(this.n),this.r=h?"function"==typeof h?h:Math.round:h,this.type=o||0,_&&(this.pr=_,i=!0),this.b=void 0===u?s:u,this.e=void 0===f?s+r:f,a&&(this._next=a,a._prev=this)}),Tt=function(t,e,i,s,r,n){var a=new vt(t,e,i,s-i,r,-1,n);return a.b=i,a.e=a.xs0=s,a},xt=a.parseComplex=function(t,e,i,s,r,n,o,l,h,u){i=i||n||"","function"==typeof s&&(s=s(g,m)),o=new vt(t,e,0,0,o,u?2:1,null,!1,l,i,s),s+="",r&&dt.test(s+i)&&(s=[i,s],a.colorStringFilter(s),i=s[0],s=s[1]);var f,c,p,d,T,x,b,w,P,O,S,k,R,A=i.split(", ").join(",").split(" "),C=s.split(", ").join(",").split(" "),M=A.length,D=!1!==_;for(-1===s.indexOf(",")&&-1===i.indexOf(",")||(-1!==(s+i).indexOf("rgb")||-1!==(s+i).indexOf("hsl")?(A=A.join(" ").replace(z,", ").split(" "),C=C.join(" ").replace(z,", ").split(" ")):(A=A.join(" ").split(",").join(", ").split(" "),C=C.join(" ").split(",").join(", ").split(" ")),M=A.length),M!==C.length&&(M=(A=(n||"").split(" ")).length),o.plugin=h,o.setRatio=u,dt.lastIndex=0,f=0;f<M;f++)if(d=A[f],T=C[f]+"",(w=parseFloat(d))||0===w)o.appendXtra("",w,lt(T,w),T.replace(v,""),!(!D||-1===T.indexOf("px"))&&Math.round,!0);else if(r&&dt.test(d))k=")"+((k=T.indexOf(")")+1)?T.substr(k):""),R=-1!==T.indexOf("hsl")&&W,O=T,d=ct(d,R),T=ct(T,R),(P=d.length+T.length>6)&&!W&&0===T[3]?(o["xs"+o.l]+=o.l?" transparent":"transparent",o.e=o.e.split(C[f]).join("transparent")):(W||(P=!1),R?o.appendXtra(O.substr(0,O.indexOf("hsl"))+(P?"hsla(":"hsl("),d[0],lt(T[0],d[0]),",",!1,!0).appendXtra("",d[1],lt(T[1],d[1]),"%,",!1).appendXtra("",d[2],lt(T[2],d[2]),P?"%,":"%"+k,!1):o.appendXtra(O.substr(0,O.indexOf("rgb"))+(P?"rgba(":"rgb("),d[0],T[0]-d[0],",",Math.round,!0).appendXtra("",d[1],T[1]-d[1],",",Math.round).appendXtra("",d[2],T[2]-d[2],P?",":k,Math.round),P&&(d=d.length<4?1:d[3],o.appendXtra("",d,(T.length<4?1:T[3])-d,k,!1))),dt.lastIndex=0;else if(x=d.match(y)){if(!(b=T.match(v))||b.length!==x.length)return o;for(p=0,c=0;c<x.length;c++)S=x[c],O=d.indexOf(S,p),o.appendXtra(d.substr(p,O-p),Number(S),lt(b[c],S),"",!(!D||"px"!==d.substr(O+S.length,2))&&Math.round,0===c),p=O+S.length;o["xs"+o.l]+=d.substr(p)}else o["xs"+o.l]+=o.l||o["xs"+o.l]?" "+T:T;if(-1!==s.indexOf("=")&&o.data){for(k=o.xs0+o.data.s,f=1;f<o.l;f++)k+=o["xs"+f]+o.data["xn"+f];o.e=k+o["xs"+f]}return o.l||(o.type=-1,o.xs0=o.e),o.xfirst||o},bt=9;for((h=vt.prototype).l=h.pr=0;--bt>0;)h["xn"+bt]=0,h["xs"+bt]="";h.xs0="",h._next=h._prev=h.xfirst=h.data=h.plugin=h.setRatio=h.rxp=null,h.appendXtra=function(t,e,i,s,r,n){var a=this,o=a.l;return a["xs"+o]+=n&&(o||a["xs"+o])?" "+t:t||"",i||0===o||a.plugin?(a.l++,a.type=a.setRatio?2:1,a["xs"+a.l]=s||"",o>0?(a.data["xn"+o]=e+i,a.rxp["xn"+o]=r,a["xn"+o]=e,a.plugin||(a.xfirst=new vt(a,"xn"+o,e,i,a.xfirst||a,0,a.n,r,a.pr),a.xfirst.xs0=0),a):(a.data={s:e+i},a.rxp={},a.s=e,a.c=i,a.r=r,a)):(a["xs"+o]+=e+(s||""),a)};var wt=function(t,e){e=e||{},this.p=e.prefix&&Q(t)||t,l[t]=l[this.p]=this,this.format=e.formatter||mt(e.defaultValue,e.color,e.collapsible,e.multi),e.parser&&(this.parse=e.parser),this.clrs=e.color,this.multi=e.multi,this.keyword=e.keyword,this.dflt=e.defaultValue,this.pr=e.priority||0},Pt=V._registerComplexSpecialProp=function(t,e,i){"object"!=typeof e&&(e={parser:i});var s,r=t.split(","),n=e.defaultValue;for(i=i||[n],s=0;s<r.length;s++)e.prefix=0===s&&e.prefix,e.defaultValue=i[s]||n,new wt(r[s],e)},Ot=V._registerPluginProp=function(t){if(!l[t]){var e=t.charAt(0).toUpperCase()+t.substr(1)+"Plugin";Pt(t,{parser:function(t,i,s,r,n,a,h){var _=o.com.greensock.plugins[e];return _?(_._cssRegister(),l[s].parse(t,i,s,r,n,a,h)):(Z("Error: "+e+" js file not loaded."),n)}})}};(h=wt.prototype).parseComplex=function(t,e,i,s,r,n){var a,o,l,h,_,u,f=this.keyword;if(this.multi&&(z.test(i)||z.test(e)?(o=e.replace(z,"|").split("|"),l=i.replace(z,"|").split("|")):f&&(o=[e],l=[i])),l){for(h=l.length>o.length?l.length:o.length,a=0;a<h;a++)e=o[a]=o[a]||this.dflt,i=l[a]=l[a]||this.dflt,f&&(_=e.indexOf(f))!==(u=i.indexOf(f))&&(-1===u?o[a]=o[a].split(f).join(""):-1===_&&(o[a]+=" "+f));e=o.join(", "),i=l.join(", ")}return xt(t,this.p,e,i,this.clrs,this.dflt,s,this.pr,r,n)},h.parse=function(t,e,i,s,n,a,o){return this.parseComplex(t.style,this.format(J(t,this.p,r,!1,this.dflt)),this.format(e),n,a)},a.registerSpecialProp=function(t,e,i){Pt(t,{parser:function(t,s,r,n,a,o,l){var h=new vt(t,r,0,0,a,2,r,!1,i);return h.plugin=o,h.setRatio=e(t,s,n._tween,r),h},priority:i})},a.useSVGTransformAttr=!0;var St,kt,Rt,At,Ct,Mt="scaleX,scaleY,scaleZ,x,y,z,skewX,skewY,rotation,rotationX,rotationY,perspective,xPercent,yPercent".split(","),Dt=Q("transform"),Ft=H+"transform",zt=Q("transformOrigin"),Et=null!==Q("perspective"),It=V.Transform=function(){this.perspective=parseFloat(a.defaultTransformPerspective)||0,this.force3D=!(!1===a.defaultForce3D||!Et)&&(a.defaultForce3D||"auto")},Xt=_gsScope.SVGElement,Lt=function(t,e,i){var s,r=B.createElementNS("http://www.w3.org/2000/svg",t),n=/([a-z])([A-Z])/g;for(s in i)r.setAttributeNS(null,s.replace(n,"$1-$2").toLowerCase(),i[s]);return e.appendChild(r),r},Nt=B.documentElement||{},Bt=(Ct=d||/Android/i.test(q)&&!_gsScope.chrome,B.createElementNS&&!Ct&&(kt=Lt("svg",Nt),At=(Rt=Lt("rect",kt,{width:100,height:50,x:100})).getBoundingClientRect().width,Rt.style[zt]="50% 50%",Rt.style[Dt]="scaleX(0.5)",Ct=At===Rt.getBoundingClientRect().width&&!(c&&Et),Nt.removeChild(kt)),Ct),Yt=function(t,e,i,s,r,n){var o,l,h,_,u,f,c,p,d,m,g,y,v,T,x=t._gsTransform,b=qt(t,!0);x&&(v=x.xOrigin,T=x.yOrigin),(!s||(o=s.split(" ")).length<2)&&(0===(c=t.getBBox()).x&&0===c.y&&c.width+c.height===0&&(c={x:parseFloat(t.hasAttribute("x")?t.getAttribute("x"):t.hasAttribute("cx")?t.getAttribute("cx"):0)||0,y:parseFloat(t.hasAttribute("y")?t.getAttribute("y"):t.hasAttribute("cy")?t.getAttribute("cy"):0)||0,width:0,height:0}),o=[(-1!==(e=ot(e).split(" "))[0].indexOf("%")?parseFloat(e[0])/100*c.width:parseFloat(e[0]))+c.x,(-1!==e[1].indexOf("%")?parseFloat(e[1])/100*c.height:parseFloat(e[1]))+c.y]),i.xOrigin=_=parseFloat(o[0]),i.yOrigin=u=parseFloat(o[1]),s&&b!==Vt&&(f=b[0],c=b[1],p=b[2],d=b[3],m=b[4],g=b[5],(y=f*d-c*p)&&(l=_*(d/y)+u*(-p/y)+(p*g-d*m)/y,h=_*(-c/y)+u*(f/y)-(f*g-c*m)/y,_=i.xOrigin=o[0]=l,u=i.yOrigin=o[1]=h)),x&&(n&&(i.xOffset=x.xOffset,i.yOffset=x.yOffset,x=i),r||!1!==r&&!1!==a.defaultSmoothOrigin?(l=_-v,h=u-T,x.xOffset+=l*b[0]+h*b[2]-l,x.yOffset+=l*b[1]+h*b[3]-h):x.xOffset=x.yOffset=0),n||t.setAttribute("data-svg-origin",o.join(" "))},jt=function(t){var e,i=Y("svg",this.ownerSVGElement&&this.ownerSVGElement.getAttribute("xmlns")||"http://www.w3.org/2000/svg"),s=this.parentNode,r=this.nextSibling,n=this.style.cssText;if(Nt.appendChild(i),i.appendChild(this),this.style.display="block",t)try{e=this.getBBox(),this._originalGetBBox=this.getBBox,this.getBBox=jt}catch(t){}else this._originalGetBBox&&(e=this._originalGetBBox());return r?s.insertBefore(this,r):s.appendChild(this),Nt.removeChild(i),this.style.cssText=n,e},Ut=function(t){return!(!Xt||!t.getCTM||t.parentNode&&!t.ownerSVGElement||!function(t){try{return t.getBBox()}catch(e){return jt.call(t,!0)}}(t))},Vt=[1,0,0,1,0,0],qt=function(t,e){var i,s,r,n,a,o,l=t._gsTransform||new It,h=t.style;if(Dt?s=J(t,Ft,null,!0):t.currentStyle&&(s=(s=t.currentStyle.filter.match(D))&&4===s.length?[s[0].substr(4),Number(s[2].substr(4)),Number(s[1].substr(4)),s[3].substr(4),l.x||0,l.y||0].join(","):""),i=!s||"none"===s||"matrix(1, 0, 0, 1, 0, 0)"===s,!Dt||!(o=!K(t)||"none"===K(t).display)&&t.parentNode||(o&&(n=h.display,h.display="block"),t.parentNode||(a=1,Nt.appendChild(t)),i=!(s=J(t,Ft,null,!0))||"none"===s||"matrix(1, 0, 0, 1, 0, 0)"===s,n?h.display=n:o&&$t(h,"display"),a&&Nt.removeChild(t)),(l.svg||t.getCTM&&Ut(t))&&(i&&-1!==(h[Dt]+"").indexOf("matrix")&&(s=h[Dt],i=0),r=t.getAttribute("transform"),i&&r&&(s="matrix("+(r=t.transform.baseVal.consolidate().matrix).a+","+r.b+","+r.c+","+r.d+","+r.e+","+r.f+")",i=0)),i)return Vt;for(r=(s||"").match(y)||[],bt=r.length;--bt>-1;)n=Number(r[bt]),r[bt]=(a=n-(n|=0))?(1e5*a+(a<0?-.5:.5)|0)/1e5+n:n;return e&&r.length>6?[r[0],r[1],r[4],r[5],r[12],r[13]]:r},Wt=V.getTransform=function(t,i,s,r){if(t._gsTransform&&s&&!r)return t._gsTransform;var n,o,l,h,_,u,f=s&&t._gsTransform||new It,c=f.scaleX<0,p=Et&&(parseFloat(J(t,zt,i,!1,"0 0 0").split(" ")[2])||f.zOrigin)||0,d=parseFloat(a.defaultTransformPerspective)||0;if(f.svg=!(!t.getCTM||!Ut(t)),f.svg&&(Yt(t,J(t,zt,i,!1,"50% 50%")+"",f,t.getAttribute("data-svg-origin")),St=a.useSVGTransformAttr||Bt),(n=qt(t))!==Vt){if(16===n.length){var m,g,y,v,T,x=n[0],b=n[1],w=n[2],P=n[3],O=n[4],S=n[5],k=n[6],R=n[7],A=n[8],C=n[9],M=n[10],D=n[12],F=n[13],z=n[14],E=n[11],I=Math.atan2(k,M);f.zOrigin&&(D=A*(z=-f.zOrigin)-n[12],F=C*z-n[13],z=M*z+f.zOrigin-n[14]),f.rotationX=I*X,I&&(m=O*(v=Math.cos(-I))+A*(T=Math.sin(-I)),g=S*v+C*T,y=k*v+M*T,A=O*-T+A*v,C=S*-T+C*v,M=k*-T+M*v,E=R*-T+E*v,O=m,S=g,k=y),I=Math.atan2(-w,M),f.rotationY=I*X,I&&(g=b*(v=Math.cos(-I))-C*(T=Math.sin(-I)),y=w*v-M*T,C=b*T+C*v,M=w*T+M*v,E=P*T+E*v,x=m=x*v-A*T,b=g,w=y),I=Math.atan2(b,x),f.rotation=I*X,I&&(m=x*(v=Math.cos(I))+b*(T=Math.sin(I)),g=O*v+S*T,y=A*v+C*T,b=b*v-x*T,S=S*v-O*T,C=C*v-A*T,x=m,O=g,A=y),f.rotationX&&Math.abs(f.rotationX)+Math.abs(f.rotation)>359.9&&(f.rotationX=f.rotation=0,f.rotationY=180-f.rotationY),I=Math.atan2(O,S),f.scaleX=(1e5*Math.sqrt(x*x+b*b+w*w)+.5|0)/1e5,f.scaleY=(1e5*Math.sqrt(S*S+k*k)+.5|0)/1e5,f.scaleZ=(1e5*Math.sqrt(A*A+C*C+M*M)+.5|0)/1e5,x/=f.scaleX,O/=f.scaleY,b/=f.scaleX,S/=f.scaleY,Math.abs(I)>2e-5?(f.skewX=I*X,O=0,"simple"!==f.skewType&&(f.scaleY*=1/Math.cos(I))):f.skewX=0,f.perspective=E?1/(E<0?-E:E):0,f.x=D,f.y=F,f.z=z,f.svg&&(f.x-=f.xOrigin-(f.xOrigin*x-f.yOrigin*O),f.y-=f.yOrigin-(f.yOrigin*b-f.xOrigin*S))}else if(!Et||r||!n.length||f.x!==n[4]||f.y!==n[5]||!f.rotationX&&!f.rotationY){var L=n.length>=6,N=L?n[0]:1,B=n[1]||0,Y=n[2]||0,j=L?n[3]:1;f.x=n[4]||0,f.y=n[5]||0,l=Math.sqrt(N*N+B*B),h=Math.sqrt(j*j+Y*Y),_=N||B?Math.atan2(B,N)*X:f.rotation||0,u=Y||j?Math.atan2(Y,j)*X+_:f.skewX||0,f.scaleX=l,f.scaleY=h,f.rotation=_,f.skewX=u,Et&&(f.rotationX=f.rotationY=f.z=0,f.perspective=d,f.scaleZ=1),f.svg&&(f.x-=f.xOrigin-(f.xOrigin*N+f.yOrigin*Y),f.y-=f.yOrigin-(f.xOrigin*B+f.yOrigin*j))}for(o in Math.abs(f.skewX)>90&&Math.abs(f.skewX)<270&&(c?(f.scaleX*=-1,f.skewX+=f.rotation<=0?180:-180,f.rotation+=f.rotation<=0?180:-180):(f.scaleY*=-1,f.skewX+=f.skewX<=0?180:-180)),f.zOrigin=p,f)f[o]<2e-5&&f[o]>-2e-5&&(f[o]=0)}return s&&(t._gsTransform=f,f.svg&&(St&&t.style[Dt]?e.delayedCall(.001,function(){$t(t.style,Dt)}):!St&&t.getAttribute("transform")&&e.delayedCall(.001,function(){t.removeAttribute("transform")}))),f},Gt=function(t){var e,i,s=this.data,r=-s.rotation*I,n=r+s.skewX*I,a=(Math.cos(r)*s.scaleX*1e5|0)/1e5,o=(Math.sin(r)*s.scaleX*1e5|0)/1e5,l=(Math.sin(n)*-s.scaleY*1e5|0)/1e5,h=(Math.cos(n)*s.scaleY*1e5|0)/1e5,_=this.t.style,u=this.t.currentStyle;if(u){i=o,o=-l,l=-i,e=u.filter,_.filter="";var f,c,p=this.t.offsetWidth,m=this.t.offsetHeight,g="absolute"!==u.position,y="progid:DXImageTransform.Microsoft.Matrix(M11="+a+", M12="+o+", M21="+l+", M22="+h,v=s.x+p*s.xPercent/100,T=s.y+m*s.yPercent/100;if(null!=s.ox&&(v+=(f=(s.oxp?p*s.ox*.01:s.ox)-p/2)-(f*a+(c=(s.oyp?m*s.oy*.01:s.oy)-m/2)*o),T+=c-(f*l+c*h)),y+=g?", Dx="+((f=p/2)-(f*a+(c=m/2)*o)+v)+", Dy="+(c-(f*l+c*h)+T)+")":", sizingMethod='auto expand')",-1!==e.indexOf("DXImageTransform.Microsoft.Matrix(")?_.filter=e.replace(F,y):_.filter=y+" "+e,0!==t&&1!==t||1===a&&0===o&&0===l&&1===h&&(g&&-1===y.indexOf("Dx=0, Dy=0")||w.test(e)&&100!==parseFloat(RegExp.$1)||-1===e.indexOf(e.indexOf("Alpha"))&&_.removeAttribute("filter")),!g){var x,P,O,S=d<8?1:-1;for(f=s.ieOffsetX||0,c=s.ieOffsetY||0,s.ieOffsetX=Math.round((p-((a<0?-a:a)*p+(o<0?-o:o)*m))/2+v),s.ieOffsetY=Math.round((m-((h<0?-h:h)*m+(l<0?-l:l)*p))/2+T),bt=0;bt<4;bt++)O=(i=-1!==(x=u[P=nt[bt]]).indexOf("px")?parseFloat(x):tt(this.t,P,parseFloat(x),x.replace(b,""))||0)!==s[P]?bt<2?-s.ieOffsetX:-s.ieOffsetY:bt<2?f-s.ieOffsetX:c-s.ieOffsetY,_[P]=(s[P]=Math.round(i-O*(0===bt||2===bt?1:S)))+"px"}}},Zt=V.set3DTransformRatio=V.setTransformRatio=function(t){var e,i,s,r,n,a,o,l,h,_,u,f,p,d,m,g,y,v,T,x,b,w=this.data,P=this.t.style,O=w.rotation,S=w.rotationX,k=w.rotationY,R=w.scaleX,A=w.scaleY,C=w.scaleZ,M=w.x,D=w.y,F=w.z,z=w.svg,E=w.perspective,X=w.force3D,L=w.skewY,N=w.skewX;if(L&&(N+=L,O+=L),!((1!==t&&0!==t||"auto"!==X||this.tween._totalTime!==this.tween._totalDuration&&this.tween._totalTime)&&X||F||E||k||S||1!==C)||St&&z||!Et)O||N||z?(O*=I,x=N*I,b=1e5,i=Math.cos(O)*R,n=Math.sin(O)*R,s=Math.sin(O-x)*-A,a=Math.cos(O-x)*A,x&&"simple"===w.skewType&&(e=Math.tan(x-L*I),s*=e=Math.sqrt(1+e*e),a*=e,L&&(e=Math.tan(L*I),i*=e=Math.sqrt(1+e*e),n*=e)),z&&(M+=w.xOrigin-(w.xOrigin*i+w.yOrigin*s)+w.xOffset,D+=w.yOrigin-(w.xOrigin*n+w.yOrigin*a)+w.yOffset,St&&(w.xPercent||w.yPercent)&&(m=this.t.getBBox(),M+=.01*w.xPercent*m.width,D+=.01*w.yPercent*m.height),M<(m=1e-6)&&M>-m&&(M=0),D<m&&D>-m&&(D=0)),T=(i*b|0)/b+","+(n*b|0)/b+","+(s*b|0)/b+","+(a*b|0)/b+","+M+","+D+")",z&&St?this.t.setAttribute("transform","matrix("+T):P[Dt]=(w.xPercent||w.yPercent?"translate("+w.xPercent+"%,"+w.yPercent+"%) matrix(":"matrix(")+T):P[Dt]=(w.xPercent||w.yPercent?"translate("+w.xPercent+"%,"+w.yPercent+"%) matrix(":"matrix(")+R+",0,0,"+A+","+M+","+D+")";else{if(c&&(R<(m=1e-4)&&R>-m&&(R=C=2e-5),A<m&&A>-m&&(A=C=2e-5),!E||w.z||w.rotationX||w.rotationY||(E=0)),O||N)O*=I,g=i=Math.cos(O),y=n=Math.sin(O),N&&(O-=N*I,g=Math.cos(O),y=Math.sin(O),"simple"===w.skewType&&(e=Math.tan((N-L)*I),g*=e=Math.sqrt(1+e*e),y*=e,w.skewY&&(e=Math.tan(L*I),i*=e=Math.sqrt(1+e*e),n*=e))),s=-y,a=g;else{if(!(k||S||1!==C||E||z))return void(P[Dt]=(w.xPercent||w.yPercent?"translate("+w.xPercent+"%,"+w.yPercent+"%) translate3d(":"translate3d(")+M+"px,"+D+"px,"+F+"px)"+(1!==R||1!==A?" scale("+R+","+A+")":""));i=a=1,s=n=0}_=1,r=o=l=h=u=f=0,p=E?-1/E:0,d=w.zOrigin,m=1e-6,",","0",(O=k*I)&&(g=Math.cos(O),l=-(y=Math.sin(O)),u=p*-y,r=i*y,o=n*y,_=g,p*=g,i*=g,n*=g),(O=S*I)&&(e=s*(g=Math.cos(O))+r*(y=Math.sin(O)),v=a*g+o*y,h=_*y,f=p*y,r=s*-y+r*g,o=a*-y+o*g,_*=g,p*=g,s=e,a=v),1!==C&&(r*=C,o*=C,_*=C,p*=C),1!==A&&(s*=A,a*=A,h*=A,f*=A),1!==R&&(i*=R,n*=R,l*=R,u*=R),(d||z)&&(d&&(M+=r*-d,D+=o*-d,F+=_*-d+d),z&&(M+=w.xOrigin-(w.xOrigin*i+w.yOrigin*s)+w.xOffset,D+=w.yOrigin-(w.xOrigin*n+w.yOrigin*a)+w.yOffset),M<m&&M>-m&&(M="0"),D<m&&D>-m&&(D="0"),F<m&&F>-m&&(F=0)),T=w.xPercent||w.yPercent?"translate("+w.xPercent+"%,"+w.yPercent+"%) matrix3d(":"matrix3d(",T+=(i<m&&i>-m?"0":i)+","+(n<m&&n>-m?"0":n)+","+(l<m&&l>-m?"0":l),T+=","+(u<m&&u>-m?"0":u)+","+(s<m&&s>-m?"0":s)+","+(a<m&&a>-m?"0":a),S||k||1!==C?(T+=","+(h<m&&h>-m?"0":h)+","+(f<m&&f>-m?"0":f)+","+(r<m&&r>-m?"0":r),T+=","+(o<m&&o>-m?"0":o)+","+(_<m&&_>-m?"0":_)+","+(p<m&&p>-m?"0":p)+","):T+=",0,0,0,0,1,0,",T+=M+","+D+","+F+","+(E?1+-F/E:1)+")",P[Dt]=T}};(h=It.prototype).x=h.y=h.z=h.skewX=h.skewY=h.rotation=h.rotationX=h.rotationY=h.zOrigin=h.xPercent=h.yPercent=h.xOffset=h.yOffset=0,h.scaleX=h.scaleY=h.scaleZ=1,Pt("transform,scale,scaleX,scaleY,scaleZ,x,y,z,rotation,rotationX,rotationY,rotationZ,skewX,skewY,shortRotation,shortRotationX,shortRotationY,shortRotationZ,transformOrigin,svgOrigin,transformPerspective,directionalRotation,parseTransform,force3D,skewType,xPercent,yPercent,smoothOrigin",{parser:function(t,e,i,s,n,o,l){if(s._lastParsedTransform===l)return n;s._lastParsedTransform=l;var h,_=l.scale&&"function"==typeof l.scale?l.scale:0;"function"==typeof l[i]&&(h=l[i],l[i]=e),_&&(l.scale=_(g,t));var u,f,c,p,d,y,v,T,x,b=t._gsTransform,w=t.style,P=Mt.length,O=l,S={},k=Wt(t,r,!0,O.parseTransform),R=O.transform&&("function"==typeof O.transform?O.transform(g,m):O.transform);if(k.skewType=O.skewType||k.skewType||a.defaultSkewType,s._transform=k,R&&"string"==typeof R&&Dt)(f=j.style)[Dt]=R,f.display="block",f.position="absolute",-1!==R.indexOf("%")&&(f.width=J(t,"width"),f.height=J(t,"height")),B.body.appendChild(j),u=Wt(j,null,!1),"simple"===k.skewType&&(u.scaleY*=Math.cos(u.skewX*I)),k.svg&&(y=k.xOrigin,v=k.yOrigin,u.x-=k.xOffset,u.y-=k.yOffset,(O.transformOrigin||O.svgOrigin)&&(R={},Yt(t,ot(O.transformOrigin),R,O.svgOrigin,O.smoothOrigin,!0),y=R.xOrigin,v=R.yOrigin,u.x-=R.xOffset-k.xOffset,u.y-=R.yOffset-k.yOffset),(y||v)&&(T=qt(j,!0),u.x-=y-(y*T[0]+v*T[2]),u.y-=v-(y*T[1]+v*T[3]))),B.body.removeChild(j),u.perspective||(u.perspective=k.perspective),null!=O.xPercent&&(u.xPercent=ht(O.xPercent,k.xPercent)),null!=O.yPercent&&(u.yPercent=ht(O.yPercent,k.yPercent));else if("object"==typeof O){if(u={scaleX:ht(null!=O.scaleX?O.scaleX:O.scale,k.scaleX),scaleY:ht(null!=O.scaleY?O.scaleY:O.scale,k.scaleY),scaleZ:ht(O.scaleZ,k.scaleZ),x:ht(O.x,k.x),y:ht(O.y,k.y),z:ht(O.z,k.z),xPercent:ht(O.xPercent,k.xPercent),yPercent:ht(O.yPercent,k.yPercent),perspective:ht(O.transformPerspective,k.perspective)},null!=(d=O.directionalRotation))if("object"==typeof d)for(f in d)O[f]=d[f];else O.rotation=d;"string"==typeof O.x&&-1!==O.x.indexOf("%")&&(u.x=0,u.xPercent=ht(O.x,k.xPercent)),"string"==typeof O.y&&-1!==O.y.indexOf("%")&&(u.y=0,u.yPercent=ht(O.y,k.yPercent)),u.rotation=_t("rotation"in O?O.rotation:"shortRotation"in O?O.shortRotation+"_short":"rotationZ"in O?O.rotationZ:k.rotation,k.rotation,"rotation",S),Et&&(u.rotationX=_t("rotationX"in O?O.rotationX:"shortRotationX"in O?O.shortRotationX+"_short":k.rotationX||0,k.rotationX,"rotationX",S),u.rotationY=_t("rotationY"in O?O.rotationY:"shortRotationY"in O?O.shortRotationY+"_short":k.rotationY||0,k.rotationY,"rotationY",S)),u.skewX=_t(O.skewX,k.skewX),u.skewY=_t(O.skewY,k.skewY)}for(Et&&null!=O.force3D&&(k.force3D=O.force3D,p=!0),(c=k.force3D||k.z||k.rotationX||k.rotationY||u.z||u.rotationX||u.rotationY||u.perspective)||null==O.scale||(u.scaleZ=1);--P>-1;)((R=u[x=Mt[P]]-k[x])>1e-6||R<-1e-6||null!=O[x]||null!=L[x])&&(p=!0,n=new vt(k,x,k[x],R,n),x in S&&(n.e=S[x]),n.xs0=0,n.plugin=o,s._overwriteProps.push(n.n));return R=O.transformOrigin,k.svg&&(R||O.svgOrigin)&&(y=k.xOffset,v=k.yOffset,Yt(t,ot(R),u,O.svgOrigin,O.smoothOrigin),n=Tt(k,"xOrigin",(b?k:u).xOrigin,u.xOrigin,n,"transformOrigin"),n=Tt(k,"yOrigin",(b?k:u).yOrigin,u.yOrigin,n,"transformOrigin"),y===k.xOffset&&v===k.yOffset||(n=Tt(k,"xOffset",b?y:k.xOffset,k.xOffset,n,"transformOrigin"),n=Tt(k,"yOffset",b?v:k.yOffset,k.yOffset,n,"transformOrigin")),R="0px 0px"),(R||Et&&c&&k.zOrigin)&&(Dt?(p=!0,x=zt,R=(R||J(t,x,r,!1,"50% 50%"))+"",(n=new vt(w,x,0,0,n,-1,"transformOrigin")).b=w[x],n.plugin=o,Et?(f=k.zOrigin,R=R.split(" "),k.zOrigin=(R.length>2&&(0===f||"0px"!==R[2])?parseFloat(R[2]):f)||0,n.xs0=n.e=R[0]+" "+(R[1]||"50%")+" 0px",(n=new vt(k,"zOrigin",0,0,n,-1,n.n)).b=f,n.xs0=n.e=k.zOrigin):n.xs0=n.e=R):ot(R+"",k)),p&&(s._transformType=k.svg&&St||!c&&3!==this._transformType?2:3),h&&(l[i]=h),_&&(l.scale=_),n},prefix:!0}),Pt("boxShadow",{defaultValue:"0px 0px 0px 0px #999",prefix:!0,color:!0,multi:!0,keyword:"inset"}),Pt("borderRadius",{defaultValue:"0px",parser:function(t,e,i,n,a,o){e=this.format(e);var l,h,_,u,f,c,p,d,m,g,y,v,T,x,b,w,P=["borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius"],O=t.style;for(m=parseFloat(t.offsetWidth),g=parseFloat(t.offsetHeight),l=e.split(" "),h=0;h<P.length;h++)this.p.indexOf("border")&&(P[h]=Q(P[h])),-1!==(f=u=J(t,P[h],r,!1,"0px")).indexOf(" ")&&(f=(u=f.split(" "))[0],u=u[1]),c=_=l[h],p=parseFloat(f),v=f.substr((p+"").length),(T="="===c.charAt(1))?(d=parseInt(c.charAt(0)+"1",10),c=c.substr(2),d*=parseFloat(c),y=c.substr((d+"").length-(d<0?1:0))||""):(d=parseFloat(c),y=c.substr((d+"").length)),""===y&&(y=s[i]||v),y!==v&&(x=tt(t,"borderLeft",p,v),b=tt(t,"borderTop",p,v),"%"===y?(f=x/m*100+"%",u=b/g*100+"%"):"em"===y?(f=x/(w=tt(t,"borderLeft",1,"em"))+"em",u=b/w+"em"):(f=x+"px",u=b+"px"),T&&(c=parseFloat(f)+d+y,_=parseFloat(u)+d+y)),a=xt(O,P[h],f+" "+u,c+" "+_,!1,"0px",a);return a},prefix:!0,formatter:mt("0px 0px 0px 0px",!1,!0)}),Pt("borderBottomLeftRadius,borderBottomRightRadius,borderTopLeftRadius,borderTopRightRadius",{defaultValue:"0px",parser:function(t,e,i,s,n,a){return xt(t.style,i,this.format(J(t,i,r,!1,"0px 0px")),this.format(e),!1,"0px",n)},prefix:!0,formatter:mt("0px 0px",!1,!0)}),Pt("backgroundPosition",{defaultValue:"0 0",parser:function(t,e,i,s,n,a){var o,l,h,_,u,f,c="background-position",p=r||K(t,null),m=this.format((p?d?p.getPropertyValue(c+"-x")+" "+p.getPropertyValue(c+"-y"):p.getPropertyValue(c):t.currentStyle.backgroundPositionX+" "+t.currentStyle.backgroundPositionY)||"0 0"),g=this.format(e);if(-1!==m.indexOf("%")!=(-1!==g.indexOf("%"))&&g.split(",").length<2&&(f=J(t,"backgroundImage").replace(A,""))&&"none"!==f){for(o=m.split(" "),l=g.split(" "),U.setAttribute("src",f),h=2;--h>-1;)(_=-1!==(m=o[h]).indexOf("%"))!==(-1!==l[h].indexOf("%"))&&(u=0===h?t.offsetWidth-U.width:t.offsetHeight-U.height,o[h]=_?parseFloat(m)/100*u+"px":parseFloat(m)/u*100+"%");m=o.join(" ")}return this.parseComplex(t.style,m,g,n,a)},formatter:ot}),Pt("backgroundSize",{defaultValue:"0 0",formatter:function(t){return"co"===(t+="").substr(0,2)?t:ot(-1===t.indexOf(" ")?t+" "+t:t)}}),Pt("perspective",{defaultValue:"0px",prefix:!0}),Pt("perspectiveOrigin",{defaultValue:"50% 50%",prefix:!0}),Pt("transformStyle",{prefix:!0}),Pt("backfaceVisibility",{prefix:!0}),Pt("userSelect",{prefix:!0}),Pt("margin",{parser:gt("marginTop,marginRight,marginBottom,marginLeft")}),Pt("padding",{parser:gt("paddingTop,paddingRight,paddingBottom,paddingLeft")}),Pt("clip",{defaultValue:"rect(0px,0px,0px,0px)",parser:function(t,e,i,s,n,a){var o,l,h;return d<9?(l=t.currentStyle,h=d<8?" ":",",o="rect("+l.clipTop+h+l.clipRight+h+l.clipBottom+h+l.clipLeft+")",e=this.format(e).split(",").join(h)):(o=this.format(J(t,this.p,r,!1,this.dflt)),e=this.format(e)),this.parseComplex(t.style,o,e,n,a)}}),Pt("textShadow",{defaultValue:"0px 0px 0px #999",color:!0,multi:!0}),Pt("autoRound,strictUnits",{parser:function(t,e,i,s,r){return r}}),Pt("border",{defaultValue:"0px solid #000",parser:function(t,e,i,s,n,a){var o=J(t,"borderTopWidth",r,!1,"0px"),l=this.format(e).split(" "),h=l[0].replace(b,"");return"px"!==h&&(o=parseFloat(o)/tt(t,"borderTopWidth",1,h)+h),this.parseComplex(t.style,this.format(o+" "+J(t,"borderTopStyle",r,!1,"solid")+" "+J(t,"borderTopColor",r,!1,"#000")),l.join(" "),n,a)},color:!0,formatter:function(t){var e=t.split(" ");return e[0]+" "+(e[1]||"solid")+" "+(t.match(dt)||["#000"])[0]}}),Pt("borderWidth",{parser:gt("borderTopWidth,borderRightWidth,borderBottomWidth,borderLeftWidth")}),Pt("float,cssFloat,styleFloat",{parser:function(t,e,i,s,r,n){var a=t.style,o="cssFloat"in a?"cssFloat":"styleFloat";return new vt(a,o,0,0,r,-1,i,!1,0,a[o],e)}});var Ht=function(t){var e,i=this.t,s=i.filter||J(this.data,"filter")||"",r=this.s+this.c*t|0;100===r&&(-1===s.indexOf("atrix(")&&-1===s.indexOf("radient(")&&-1===s.indexOf("oader(")?(i.removeAttribute("filter"),e=!J(this.data,"filter")):(i.filter=s.replace(O,""),e=!0)),e||(this.xn1&&(i.filter=s=s||"alpha(opacity="+r+")"),-1===s.indexOf("pacity")?0===r&&this.xn1||(i.filter=s+" alpha(opacity="+r+")"):i.filter=s.replace(w,"opacity="+r))};Pt("opacity,alpha,autoAlpha",{defaultValue:"1",parser:function(t,e,i,s,n,a){var o=parseFloat(J(t,"opacity",r,!1,"1")),l=t.style,h="autoAlpha"===i;return"string"==typeof e&&"="===e.charAt(1)&&(e=("-"===e.charAt(0)?-1:1)*parseFloat(e.substr(2))+o),h&&1===o&&"hidden"===J(t,"visibility",r)&&0!==e&&(o=0),W?n=new vt(l,"opacity",o,e-o,n):((n=new vt(l,"opacity",100*o,100*(e-o),n)).xn1=h?1:0,l.zoom=1,n.type=2,n.b="alpha(opacity="+n.s+")",n.e="alpha(opacity="+(n.s+n.c)+")",n.data=t,n.plugin=a,n.setRatio=Ht),h&&((n=new vt(l,"visibility",0,0,n,-1,null,!1,0,0!==o?"inherit":"hidden",0===e?"hidden":"inherit")).xs0="inherit",s._overwriteProps.push(n.n),s._overwriteProps.push(i)),n}});var $t=function(t,e){e&&(t.removeProperty?("ms"!==e.substr(0,2)&&"webkit"!==e.substr(0,6)||(e="-"+e),t.removeProperty(e.replace(k,"-$1").toLowerCase())):t.removeAttribute(e))},Qt=function(t){if(this.t._gsClassPT=this,1===t||0===t){this.t.setAttribute("class",0===t?this.b:this.e);for(var e=this.data,i=this.t.style;e;)e.v?i[e.p]=e.v:$t(i,e.p),e=e._next;1===t&&this.t._gsClassPT===this&&(this.t._gsClassPT=null)}else this.t.getAttribute("class")!==this.e&&this.t.setAttribute("class",this.e)};Pt("className",{parser:function(t,e,s,n,a,o,l){var h,_,u,f,c,p=t.getAttribute("class")||"",d=t.style.cssText;if((a=n._classNamePT=new vt(t,s,0,0,a,2)).setRatio=Qt,a.pr=-11,i=!0,a.b=p,_=it(t,r),u=t._gsClassPT){for(f={},c=u.data;c;)f[c.p]=1,c=c._next;u.setRatio(1)}return t._gsClassPT=a,a.e="="!==e.charAt(1)?e:p.replace(new RegExp("(?:\\s|^)"+e.substr(2)+"(?![\\w-])"),"")+("+"===e.charAt(0)?" "+e.substr(2):""),t.setAttribute("class",a.e),h=st(t,_,it(t),l,f),t.setAttribute("class",p),a.data=h.firstMPT,t.style.cssText=d,a=a.xfirst=n.parse(t,h.difs,a,o)}});var Kt=function(t){if((1===t||0===t)&&this.data._totalTime===this.data._totalDuration&&"isFromStart"!==this.data.data){var e,i,s,r,n,a=this.t.style,o=l.transform.parse;if("all"===this.e)a.cssText="",r=!0;else for(s=(e=this.e.split(" ").join("").split(",")).length;--s>-1;)i=e[s],l[i]&&(l[i].parse===o?r=!0:i="transformOrigin"===i?zt:l[i].p),$t(a,i);r&&($t(a,Dt),(n=this.t._gsTransform)&&(n.svg&&(this.t.removeAttribute("data-svg-origin"),this.t.removeAttribute("transform")),delete this.t._gsTransform))}};for(Pt("clearProps",{parser:function(t,e,s,r,n){return(n=new vt(t,s,0,0,n,2)).setRatio=Kt,n.e=e,n.pr=-10,n.data=r._tween,i=!0,n}}),h="bezier,throwProps,physicsProps,physics2D".split(","),bt=h.length;bt--;)Ot(h[bt]);(h=a.prototype)._firstPT=h._lastParsedTransform=h._transform=null,h._onInitTween=function(t,e,o,h){if(!t.nodeType)return!1;this._target=m=t,this._tween=o,this._vars=e,g=h,_=e.autoRound,i=!1,s=e.suffixMap||a.suffixMap,r=K(t,""),n=this._overwriteProps;var c,d,y,v,T,x,b,w,O,S=t.style;if(u&&""===S.zIndex&&("auto"!==(c=J(t,"zIndex",r))&&""!==c||this._addLazySet(S,"zIndex",0)),"string"==typeof e&&(v=S.cssText,c=it(t,r),S.cssText=v+";"+e,c=st(t,c,it(t)).difs,!W&&P.test(e)&&(c.opacity=parseFloat(RegExp.$1)),e=c,S.cssText=v),e.className?this._firstPT=d=l.className.parse(t,e.className,"className",this,null,null,e):this._firstPT=d=this.parse(t,e,null),this._transformType){for(O=3===this._transformType,Dt?f&&(u=!0,""===S.zIndex&&("auto"!==(b=J(t,"zIndex",r))&&""!==b||this._addLazySet(S,"zIndex",0)),p&&this._addLazySet(S,"WebkitBackfaceVisibility",this._vars.WebkitBackfaceVisibility||(O?"visible":"hidden"))):S.zoom=1,y=d;y&&y._next;)y=y._next;w=new vt(t,"transform",0,0,null,2),this._linkCSSP(w,null,y),w.setRatio=Dt?Zt:Gt,w.data=this._transform||Wt(t,r,!0),w.tween=o,w.pr=-1,n.pop()}if(i){for(;d;){for(x=d._next,y=v;y&&y.pr>d.pr;)y=y._next;(d._prev=y?y._prev:T)?d._prev._next=d:v=d,(d._next=y)?y._prev=d:T=d,d=x}this._firstPT=v}return!0},h.parse=function(t,e,i,n){var a,o,h,u,f,c,p,d,y,v,T=t.style;for(a in e){if("function"==typeof(c=e[a])&&(c=c(g,m)),o=l[a])i=o.parse(t,c,a,this,i,n,e);else{if("--"===a.substr(0,2)){this._tween._propLookup[a]=this._addTween.call(this._tween,t.style,"setProperty",K(t).getPropertyValue(a)+"",c+"",a,!1,a);continue}f=J(t,a,r)+"",y="string"==typeof c,"color"===a||"fill"===a||"stroke"===a||-1!==a.indexOf("Color")||y&&S.test(c)?(y||(c=((c=ct(c)).length>3?"rgba(":"rgb(")+c.join(",")+")"),i=xt(T,a,f,c,!0,"transparent",i,0,n)):y&&E.test(c)?i=xt(T,a,f,c,!0,null,i,0,n):(p=(h=parseFloat(f))||0===h?f.substr((h+"").length):"",""!==f&&"auto"!==f||("width"===a||"height"===a?(h=at(t,a,r),p="px"):"left"===a||"top"===a?(h=et(t,a,r),p="px"):(h="opacity"!==a?0:1,p="")),(v=y&&"="===c.charAt(1))?(u=parseInt(c.charAt(0)+"1",10),c=c.substr(2),u*=parseFloat(c),d=c.replace(b,"")):(u=parseFloat(c),d=y?c.replace(b,""):""),""===d&&(d=a in s?s[a]:p),c=u||0===u?(v?u+h:u)+d:e[a],p!==d&&(""===d&&"lineHeight"!==a||(u||0===u)&&h&&(h=tt(t,a,h,p),"%"===d?(h/=tt(t,a,100,"%")/100,!0!==e.strictUnits&&(f=h+"%")):"em"===d||"rem"===d||"vw"===d||"vh"===d?h/=tt(t,a,1,d):"px"!==d&&(u=tt(t,a,u,d),d="px"),v&&(u||0===u)&&(c=u+h+d))),v&&(u+=h),!h&&0!==h||!u&&0!==u?void 0!==T[a]&&(c||c+""!="NaN"&&null!=c)?(i=new vt(T,a,u||h||0,0,i,-1,a,!1,0,f,c)).xs0="none"!==c||"display"!==a&&-1===a.indexOf("Style")?c:f:Z("invalid "+a+" tween value: "+e[a]):(i=new vt(T,a,h,u-h,i,0,a,!1!==_&&("px"===d||"zIndex"===a),0,f,c)).xs0=d)}n&&i&&!i.plugin&&(i.plugin=n)}return i},h.setRatio=function(t){var e,i,s,r=this._firstPT;if(1!==t||this._tween._time!==this._tween._duration&&0!==this._tween._time)if(t||this._tween._time!==this._tween._duration&&0!==this._tween._time||-1e-6===this._tween._rawPrevTime)for(;r;){if(e=r.c*t+r.s,r.r?e=r.r(e):e<1e-6&&e>-1e-6&&(e=0),r.type)if(1===r.type)if(2===(s=r.l))r.t[r.p]=r.xs0+e+r.xs1+r.xn1+r.xs2;else if(3===s)r.t[r.p]=r.xs0+e+r.xs1+r.xn1+r.xs2+r.xn2+r.xs3;else if(4===s)r.t[r.p]=r.xs0+e+r.xs1+r.xn1+r.xs2+r.xn2+r.xs3+r.xn3+r.xs4;else if(5===s)r.t[r.p]=r.xs0+e+r.xs1+r.xn1+r.xs2+r.xn2+r.xs3+r.xn3+r.xs4+r.xn4+r.xs5;else{for(i=r.xs0+e+r.xs1,s=1;s<r.l;s++)i+=r["xn"+s]+r["xs"+(s+1)];r.t[r.p]=i}else-1===r.type?r.t[r.p]=r.xs0:r.setRatio&&r.setRatio(t);else r.t[r.p]=e+r.xs0;r=r._next}else for(;r;)2!==r.type?r.t[r.p]=r.b:r.setRatio(t),r=r._next;else for(;r;){if(2!==r.type)if(r.r&&-1!==r.type)if(e=r.r(r.s+r.c),r.type){if(1===r.type){for(s=r.l,i=r.xs0+e+r.xs1,s=1;s<r.l;s++)i+=r["xn"+s]+r["xs"+(s+1)];r.t[r.p]=i}}else r.t[r.p]=e+r.xs0;else r.t[r.p]=r.e;else r.setRatio(t);r=r._next}},h._enableTransforms=function(t){this._transform=this._transform||Wt(this._target,r,!0),this._transformType=this._transform.svg&&St||!t&&3!==this._transformType?2:3};var Jt=function(t){this.t[this.p]=this.e,this.data._linkCSSP(this,this._next,null,!0)};h._addLazySet=function(t,e,i){var s=this._firstPT=new vt(t,e,0,0,this._firstPT,2);s.e=i,s.setRatio=Jt,s.data=this},h._linkCSSP=function(t,e,i,s){return t&&(e&&(e._prev=t),t._next&&(t._next._prev=t._prev),t._prev?t._prev._next=t._next:this._firstPT===t&&(this._firstPT=t._next,s=!0),i?i._next=t:s||null!==this._firstPT||(this._firstPT=t),t._next=e,t._prev=i),t},h._mod=function(t){for(var e=this._firstPT;e;)"function"==typeof t[e.p]&&(e.r=t[e.p]),e=e._next},h._kill=function(e){var i,s,r,n=e;if(e.autoAlpha||e.alpha){for(s in n={},e)n[s]=e[s];n.opacity=1,n.autoAlpha&&(n.visibility=1)}for(e.className&&(i=this._classNamePT)&&((r=i.xfirst)&&r._prev?this._linkCSSP(r._prev,i._next,r._prev._prev):r===this._firstPT&&(this._firstPT=i._next),i._next&&this._linkCSSP(i._next,i._next._next,r._prev),this._classNamePT=null),i=this._firstPT;i;)i.plugin&&i.plugin!==s&&i.plugin._kill&&(i.plugin._kill(e),s=i.plugin),i=i._next;return t.prototype._kill.call(this,n)};var te=function(t,e,i){var s,r,n,a;if(t.slice)for(r=t.length;--r>-1;)te(t[r],e,i);else for(r=(s=t.childNodes).length;--r>-1;)a=(n=s[r]).type,n.style&&(e.push(it(n)),i&&i.push(n)),1!==a&&9!==a&&11!==a||!n.childNodes.length||te(n,e,i)};return a.cascadeTo=function(t,i,s){var r,n,a,o,l=e.to(t,i,s),h=[l],_=[],u=[],f=[],c=e._internals.reservedProps;for(t=l._targets||l.target,te(t,_,f),l.render(i,!0,!0),te(t,u),l.render(0,!0,!0),l._enabled(!0),r=f.length;--r>-1;)if((n=st(f[r],_[r],u[r])).firstMPT){for(a in n=n.difs,s)c[a]&&(n[a]=s[a]);for(a in o={},n)o[a]=_[r][a];h.push(e.fromTo(f[r],i,o,n))}return h},t.activate([a]),a},!0),function(){var t=function(t){var e=t<1?Math.pow(10,(t+"").length-2):1;return function(i){return(Math.round(i/t)*t*e|0)/e}},e=function(t,e){for(;t;)t.f||t.blob||(t.m=e||Math.round),t=t._next},i=_gsScope._gsDefine.plugin({propName:"roundProps",version:"1.7.0",priority:-1,API:2,init:function(t,e,i){return this._tween=i,!0}}).prototype;i._onInitAllProps=function(){var i,s,r,n,a=this._tween,o=a.vars.roundProps,l={},h=a._propLookup.roundProps;if("object"!=typeof o||o.push)for("string"==typeof o&&(o=o.split(",")),r=o.length;--r>-1;)l[o[r]]=Math.round;else for(n in o)l[n]=t(o[n]);for(n in l)for(i=a._firstPT;i;)s=i._next,i.pg?i.t._mod(l):i.n===n&&(2===i.f&&i.t?e(i.t._firstPT,l[n]):(this._add(i.t,n,i.s,i.c,l[n]),s&&(s._prev=i._prev),i._prev?i._prev._next=s:a._firstPT===i&&(a._firstPT=s),i._next=i._prev=null,a._propLookup[n]=h)),i=s;return!1},i._add=function(t,e,i,s,r){this._addTween(t,e,i,i+s,e,r||Math.round),this._overwriteProps.push(e)}}(),_gsScope._gsDefine.plugin({propName:"attr",API:2,version:"0.6.1",init:function(t,e,i,s){var r,n;if("function"!=typeof t.setAttribute)return!1;for(r in e)"function"==typeof(n=e[r])&&(n=n(s,t)),this._addTween(t,"setAttribute",t.getAttribute(r)+"",n+"",r,!1,r),this._overwriteProps.push(r);return!0}}),_gsScope._gsDefine.plugin({propName:"directionalRotation",version:"0.3.1",API:2,init:function(t,e,i,s){"object"!=typeof e&&(e={rotation:e}),this.finals={};var r,n,a,o,l,h,_=!0===e.useRadians?2*Math.PI:360;for(r in e)"useRadians"!==r&&("function"==typeof(o=e[r])&&(o=o(s,t)),n=(h=(o+"").split("_"))[0],a=parseFloat("function"!=typeof t[r]?t[r]:t[r.indexOf("set")||"function"!=typeof t["get"+r.substr(3)]?r:"get"+r.substr(3)]()),l=(o=this.finals[r]="string"==typeof n&&"="===n.charAt(1)?a+parseInt(n.charAt(0)+"1",10)*Number(n.substr(2)):Number(n)||0)-a,h.length&&(-1!==(n=h.join("_")).indexOf("short")&&(l%=_)!==l%(_/2)&&(l=l<0?l+_:l-_),-1!==n.indexOf("_cw")&&l<0?l=(l+9999999999*_)%_-(l/_|0)*_:-1!==n.indexOf("ccw")&&l>0&&(l=(l-9999999999*_)%_-(l/_|0)*_)),(l>1e-6||l<-1e-6)&&(this._addTween(t,r,a,a+l,r),this._overwriteProps.push(r)));return!0},set:function(t){var e;if(1!==t)this._super.setRatio.call(this,t);else for(e=this._firstPT;e;)e.f?e.t[e.p](this.finals[e.p]):e.t[e.p]=this.finals[e.p],e=e._next}})._autoCSS=!0,_gsScope._gsDefine("easing.Back",["easing.Ease"],function(t){var e,i,s,r,n=_gsScope.GreenSockGlobals||_gsScope,a=n.com.greensock,o=2*Math.PI,l=Math.PI/2,h=a._class,_=function(e,i){var s=h("easing."+e,function(){},!0),r=s.prototype=new t;return r.constructor=s,r.getRatio=i,s},u=t.register||function(){},f=function(t,e,i,s,r){var n=h("easing."+t,{easeOut:new e,easeIn:new i,easeInOut:new s},!0);return u(n,t),n},c=function(t,e,i){this.t=t,this.v=e,i&&(this.next=i,i.prev=this,this.c=i.v-e,this.gap=i.t-t)},p=function(e,i){var s=h("easing."+e,function(t){this._p1=t||0===t?t:1.70158,this._p2=1.525*this._p1},!0),r=s.prototype=new t;return r.constructor=s,r.getRatio=i,r.config=function(t){return new s(t)},s},d=f("Back",p("BackOut",function(t){return(t-=1)*t*((this._p1+1)*t+this._p1)+1}),p("BackIn",function(t){return t*t*((this._p1+1)*t-this._p1)}),p("BackInOut",function(t){return(t*=2)<1?.5*t*t*((this._p2+1)*t-this._p2):.5*((t-=2)*t*((this._p2+1)*t+this._p2)+2)})),m=h("easing.SlowMo",function(t,e,i){e=e||0===e?e:.7,null==t?t=.7:t>1&&(t=1),this._p=1!==t?e:0,this._p1=(1-t)/2,this._p2=t,this._p3=this._p1+this._p2,this._calcEnd=!0===i},!0),g=m.prototype=new t;return g.constructor=m,g.getRatio=function(t){var e=t+(.5-t)*this._p;return t<this._p1?this._calcEnd?1-(t=1-t/this._p1)*t:e-(t=1-t/this._p1)*t*t*t*e:t>this._p3?this._calcEnd?1===t?0:1-(t=(t-this._p3)/this._p1)*t:e+(t-e)*(t=(t-this._p3)/this._p1)*t*t*t:this._calcEnd?1:e},m.ease=new m(.7,.7),g.config=m.config=function(t,e,i){return new m(t,e,i)},(g=(e=h("easing.SteppedEase",function(t,e){t=t||1,this._p1=1/t,this._p2=t+(e?0:1),this._p3=e?1:0},!0)).prototype=new t).constructor=e,g.getRatio=function(t){return t<0?t=0:t>=1&&(t=.999999999),((this._p2*t|0)+this._p3)*this._p1},g.config=e.config=function(t,i){return new e(t,i)},(g=(i=h("easing.ExpoScaleEase",function(t,e,i){this._p1=Math.log(e/t),this._p2=e-t,this._p3=t,this._ease=i},!0)).prototype=new t).constructor=i,g.getRatio=function(t){return this._ease&&(t=this._ease.getRatio(t)),(this._p3*Math.exp(this._p1*t)-this._p3)/this._p2},g.config=i.config=function(t,e,s){return new i(t,e,s)},(g=(s=h("easing.RoughEase",function(e){for(var i,s,r,n,a,o,l=(e=e||{}).taper||"none",h=[],_=0,u=0|(e.points||20),f=u,p=!1!==e.randomize,d=!0===e.clamp,m=e.template instanceof t?e.template:null,g="number"==typeof e.strength?.4*e.strength:.4;--f>-1;)i=p?Math.random():1/u*f,s=m?m.getRatio(i):i,r="none"===l?g:"out"===l?(n=1-i)*n*g:"in"===l?i*i*g:i<.5?(n=2*i)*n*.5*g:(n=2*(1-i))*n*.5*g,p?s+=Math.random()*r-.5*r:f%2?s+=.5*r:s-=.5*r,d&&(s>1?s=1:s<0&&(s=0)),h[_++]={x:i,y:s};for(h.sort(function(t,e){return t.x-e.x}),o=new c(1,1,null),f=u;--f>-1;)a=h[f],o=new c(a.x,a.y,o);this._prev=new c(0,0,0!==o.t?o:o.next)},!0)).prototype=new t).constructor=s,g.getRatio=function(t){var e=this._prev;if(t>e.t){for(;e.next&&t>=e.t;)e=e.next;e=e.prev}else for(;e.prev&&t<=e.t;)e=e.prev;return this._prev=e,e.v+(t-e.t)/e.gap*e.c},g.config=function(t){return new s(t)},s.ease=new s,f("Bounce",_("BounceOut",function(t){return t<1/2.75?7.5625*t*t:t<2/2.75?7.5625*(t-=1.5/2.75)*t+.75:t<2.5/2.75?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375}),_("BounceIn",function(t){return(t=1-t)<1/2.75?1-7.5625*t*t:t<2/2.75?1-(7.5625*(t-=1.5/2.75)*t+.75):t<2.5/2.75?1-(7.5625*(t-=2.25/2.75)*t+.9375):1-(7.5625*(t-=2.625/2.75)*t+.984375)}),_("BounceInOut",function(t){var e=t<.5;return(t=e?1-2*t:2*t-1)<1/2.75?t*=7.5625*t:t=t<2/2.75?7.5625*(t-=1.5/2.75)*t+.75:t<2.5/2.75?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375,e?.5*(1-t):.5*t+.5})),f("Circ",_("CircOut",function(t){return Math.sqrt(1-(t-=1)*t)}),_("CircIn",function(t){return-(Math.sqrt(1-t*t)-1)}),_("CircInOut",function(t){return(t*=2)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1)})),f("Elastic",(r=function(e,i,s){var r=h("easing."+e,function(t,e){this._p1=t>=1?t:1,this._p2=(e||s)/(t<1?t:1),this._p3=this._p2/o*(Math.asin(1/this._p1)||0),this._p2=o/this._p2},!0),n=r.prototype=new t;return n.constructor=r,n.getRatio=i,n.config=function(t,e){return new r(t,e)},r})("ElasticOut",function(t){return this._p1*Math.pow(2,-10*t)*Math.sin((t-this._p3)*this._p2)+1},.3),r("ElasticIn",function(t){return-this._p1*Math.pow(2,10*(t-=1))*Math.sin((t-this._p3)*this._p2)},.3),r("ElasticInOut",function(t){return(t*=2)<1?this._p1*Math.pow(2,10*(t-=1))*Math.sin((t-this._p3)*this._p2)*-.5:this._p1*Math.pow(2,-10*(t-=1))*Math.sin((t-this._p3)*this._p2)*.5+1},.45)),f("Expo",_("ExpoOut",function(t){return 1-Math.pow(2,-10*t)}),_("ExpoIn",function(t){return Math.pow(2,10*(t-1))-.001}),_("ExpoInOut",function(t){return(t*=2)<1?.5*Math.pow(2,10*(t-1)):.5*(2-Math.pow(2,-10*(t-1)))})),f("Sine",_("SineOut",function(t){return Math.sin(t*l)}),_("SineIn",function(t){return 1-Math.cos(t*l)}),_("SineInOut",function(t){return-.5*(Math.cos(Math.PI*t)-1)})),h("easing.EaseLookup",{find:function(e){return t.map[e]}},!0),u(n.SlowMo,"SlowMo","ease,"),u(s,"RoughEase","ease,"),u(e,"SteppedEase","ease,"),d},!0)}),_gsScope._gsDefine&&_gsScope._gsQueue.pop()(),function(t,e){"use strict";var i={},s=t.document,r=t.GreenSockGlobals=t.GreenSockGlobals||t;if(r.TweenLite)return r.TweenLite;var n,a,o,l,h,_,u,f=function(t){var e,i=t.split("."),s=r;for(e=0;e<i.length;e++)s[i[e]]=s=s[i[e]]||{};return s},c=f("com.greensock"),p=function(t){var e,i=[],s=t.length;for(e=0;e!==s;i.push(t[e++]));return i},d=function(){},m=(_=Object.prototype.toString,u=_.call([]),function(t){return null!=t&&(t instanceof Array||"object"==typeof t&&!!t.push&&_.call(t)===u)}),g={},y=function(e,s,n,a){this.sc=g[e]?g[e].sc:[],g[e]=this,this.gsClass=null,this.func=n;var o=[];this.check=function(l){for(var h,_,u,c,p=s.length,d=p;--p>-1;)(h=g[s[p]]||new y(s[p],[])).gsClass?(o[p]=h.gsClass,d--):l&&h.sc.push(this);if(0===d&&n){if(u=(_=("com.greensock."+e).split(".")).pop(),c=f(_.join("."))[u]=this.gsClass=n.apply(n,o),a)if(r[u]=i[u]=c,"undefined"!=typeof module&&module.exports)if("TweenMax"===e)for(p in module.exports=i.TweenMax=c,i)c[p]=i[p];else i.TweenMax&&(i.TweenMax[u]=c);else"function"==typeof define&&define.amd&&define((t.GreenSockAMDPath?t.GreenSockAMDPath+"/":"")+e.split(".").pop(),[],function(){return c});for(p=0;p<this.sc.length;p++)this.sc[p].check()}},this.check(!0)},v=t._gsDefine=function(t,e,i,s){return new y(t,e,i,s)},T=c._class=function(t,e,i){return e=e||function(){},v(t,[],function(){return e},i),e};v.globals=r;var x=[0,0,1,1],b=T("easing.Ease",function(t,e,i,s){this._func=t,this._type=i||0,this._power=s||0,this._params=e?x.concat(e):x},!0),w=b.map={},P=b.register=function(t,e,i,s){for(var r,n,a,o,l=e.split(","),h=l.length,_=(i||"easeIn,easeOut,easeInOut").split(",");--h>-1;)for(n=l[h],r=s?T("easing."+n,null,!0):c.easing[n]||{},a=_.length;--a>-1;)o=_[a],w[n+"."+o]=w[o+n]=r[o]=t.getRatio?t:t[o]||new t};for((o=b.prototype)._calcEnd=!1,o.getRatio=function(t){if(this._func)return this._params[0]=t,this._func.apply(null,this._params);var e=this._type,i=this._power,s=1===e?1-t:2===e?t:t<.5?2*t:2*(1-t);return 1===i?s*=s:2===i?s*=s*s:3===i?s*=s*s*s:4===i&&(s*=s*s*s*s),1===e?1-s:2===e?s:t<.5?s/2:1-s/2},a=(n=["Linear","Quad","Cubic","Quart","Quint,Strong"]).length;--a>-1;)o=n[a]+",Power"+a,P(new b(null,null,1,a),o,"easeOut",!0),P(new b(null,null,2,a),o,"easeIn"+(0===a?",easeNone":"")),P(new b(null,null,3,a),o,"easeInOut");w.linear=c.easing.Linear.easeIn,w.swing=c.easing.Quad.easeInOut;var O=T("events.EventDispatcher",function(t){this._listeners={},this._eventTarget=t||this});(o=O.prototype).addEventListener=function(t,e,i,s,r){r=r||0;var n,a,o=this._listeners[t],_=0;for(this!==l||h||l.wake(),null==o&&(this._listeners[t]=o=[]),a=o.length;--a>-1;)(n=o[a]).c===e&&n.s===i?o.splice(a,1):0===_&&n.pr<r&&(_=a+1);o.splice(_,0,{c:e,s:i,up:s,pr:r})},o.removeEventListener=function(t,e){var i,s=this._listeners[t];if(s)for(i=s.length;--i>-1;)if(s[i].c===e)return void s.splice(i,1)},o.dispatchEvent=function(t){var e,i,s,r=this._listeners[t];if(r)for((e=r.length)>1&&(r=r.slice(0)),i=this._eventTarget;--e>-1;)(s=r[e])&&(s.up?s.c.call(s.s||i,{type:t,target:i}):s.c.call(s.s||i))};var S=t.requestAnimationFrame,k=t.cancelAnimationFrame,R=Date.now||function(){return(new Date).getTime()},A=R();for(a=(n=["ms","moz","webkit","o"]).length;--a>-1&&!S;)S=t[n[a]+"RequestAnimationFrame"],k=t[n[a]+"CancelAnimationFrame"]||t[n[a]+"CancelRequestAnimationFrame"];T("Ticker",function(t,e){var i,r,n,a,o,_=this,u=R(),f=!(!1===e||!S)&&"auto",c=500,p=33,m=function(t){var e,s,l=R()-A;l>c&&(u+=l-p),A+=l,_.time=(A-u)/1e3,e=_.time-o,(!i||e>0||!0===t)&&(_.frame++,o+=e+(e>=a?.004:a-e),s=!0),!0!==t&&(n=r(m)),s&&_.dispatchEvent("tick")};O.call(_),_.time=_.frame=0,_.tick=function(){m(!0)},_.lagSmoothing=function(t,e){if(!arguments.length)return c<1e10;c=t||1e10,p=Math.min(e,c,0)},_.sleep=function(){null!=n&&(f&&k?k(n):clearTimeout(n),r=d,n=null,_===l&&(h=!1))},_.wake=function(t){null!==n?_.sleep():t?u+=-A+(A=R()):_.frame>10&&(A=R()-c+5),r=0===i?d:f&&S?S:function(t){return setTimeout(t,1e3*(o-_.time)+1|0)},_===l&&(h=!0),m(2)},_.fps=function(t){if(!arguments.length)return i;a=1/((i=t)||60),o=this.time+a,_.wake()},_.useRAF=function(t){if(!arguments.length)return f;_.sleep(),f=t,_.fps(i)},_.fps(t),setTimeout(function(){"auto"===f&&_.frame<5&&"hidden"!==(s||{}).visibilityState&&_.useRAF(!1)},1500)}),(o=c.Ticker.prototype=new c.events.EventDispatcher).constructor=c.Ticker;var C=T("core.Animation",function(t,e){if(this.vars=e=e||{},this._duration=this._totalDuration=t||0,this._delay=Number(e.delay)||0,this._timeScale=1,this._active=!0===e.immediateRender,this.data=e.data,this._reversed=!0===e.reversed,H){h||l.wake();var i=this.vars.useFrames?Z:H;i.add(this,i._time),this.vars.paused&&this.paused(!0)}});l=C.ticker=new c.Ticker,(o=C.prototype)._dirty=o._gc=o._initted=o._paused=!1,o._totalTime=o._time=0,o._rawPrevTime=-1,o._next=o._last=o._onUpdate=o._timeline=o.timeline=null,o._paused=!1;var M=function(){h&&R()-A>2e3&&("hidden"!==(s||{}).visibilityState||!l.lagSmoothing())&&l.wake();var t=setTimeout(M,2e3);t.unref&&t.unref()};M(),o.play=function(t,e){return null!=t&&this.seek(t,e),this.reversed(!1).paused(!1)},o.pause=function(t,e){return null!=t&&this.seek(t,e),this.paused(!0)},o.resume=function(t,e){return null!=t&&this.seek(t,e),this.paused(!1)},o.seek=function(t,e){return this.totalTime(Number(t),!1!==e)},o.restart=function(t,e){return this.reversed(!1).paused(!1).totalTime(t?-this._delay:0,!1!==e,!0)},o.reverse=function(t,e){return null!=t&&this.seek(t||this.totalDuration(),e),this.reversed(!0).paused(!1)},o.render=function(t,e,i){},o.invalidate=function(){return this._time=this._totalTime=0,this._initted=this._gc=!1,this._rawPrevTime=-1,!this._gc&&this.timeline||this._enabled(!0),this},o.isActive=function(){var t,e=this._timeline,i=this._startTime;return!e||!this._gc&&!this._paused&&e.isActive()&&(t=e.rawTime(!0))>=i&&t<i+this.totalDuration()/this._timeScale-1e-7},o._enabled=function(t,e){return h||l.wake(),this._gc=!t,this._active=this.isActive(),!0!==e&&(t&&!this.timeline?this._timeline.add(this,this._startTime-this._delay):!t&&this.timeline&&this._timeline._remove(this,!0)),!1},o._kill=function(t,e){return this._enabled(!1,!1)},o.kill=function(t,e){return this._kill(t,e),this},o._uncache=function(t){for(var e=t?this:this.timeline;e;)e._dirty=!0,e=e.timeline;return this},o._swapSelfInParams=function(t){for(var e=t.length,i=t.concat();--e>-1;)"{self}"===t[e]&&(i[e]=this);return i},o._callback=function(t){var e=this.vars,i=e[t],s=e[t+"Params"],r=e[t+"Scope"]||e.callbackScope||this;switch(s?s.length:0){case 0:i.call(r);break;case 1:i.call(r,s[0]);break;case 2:i.call(r,s[0],s[1]);break;default:i.apply(r,s)}},o.eventCallback=function(t,e,i,s){if("on"===(t||"").substr(0,2)){var r=this.vars;if(1===arguments.length)return r[t];null==e?delete r[t]:(r[t]=e,r[t+"Params"]=m(i)&&-1!==i.join("").indexOf("{self}")?this._swapSelfInParams(i):i,r[t+"Scope"]=s),"onUpdate"===t&&(this._onUpdate=e)}return this},o.delay=function(t){return arguments.length?(this._timeline.smoothChildTiming&&this.startTime(this._startTime+t-this._delay),this._delay=t,this):this._delay},o.duration=function(t){return arguments.length?(this._duration=this._totalDuration=t,this._uncache(!0),this._timeline.smoothChildTiming&&this._time>0&&this._time<this._duration&&0!==t&&this.totalTime(this._totalTime*(t/this._duration),!0),this):(this._dirty=!1,this._duration)},o.totalDuration=function(t){return this._dirty=!1,arguments.length?this.duration(t):this._totalDuration},o.time=function(t,e){return arguments.length?(this._dirty&&this.totalDuration(),this.totalTime(t>this._duration?this._duration:t,e)):this._time},o.totalTime=function(t,e,i){if(h||l.wake(),!arguments.length)return this._totalTime;if(this._timeline){if(t<0&&!i&&(t+=this.totalDuration()),this._timeline.smoothChildTiming){this._dirty&&this.totalDuration();var s=this._totalDuration,r=this._timeline;if(t>s&&!i&&(t=s),this._startTime=(this._paused?this._pauseTime:r._time)-(this._reversed?s-t:t)/this._timeScale,r._dirty||this._uncache(!1),r._timeline)for(;r._timeline;)r._timeline._time!==(r._startTime+r._totalTime)/r._timeScale&&r.totalTime(r._totalTime,!0),r=r._timeline}this._gc&&this._enabled(!0,!1),this._totalTime===t&&0!==this._duration||(E.length&&Q(),this.render(t,e,!1),E.length&&Q())}return this},o.progress=o.totalProgress=function(t,e){var i=this.duration();return arguments.length?this.totalTime(i*t,e):i?this._time/i:this.ratio},o.startTime=function(t){return arguments.length?(t!==this._startTime&&(this._startTime=t,this.timeline&&this.timeline._sortChildren&&this.timeline.add(this,t-this._delay)),this):this._startTime},o.endTime=function(t){return this._startTime+(0!=t?this.totalDuration():this.duration())/this._timeScale},o.timeScale=function(t){if(!arguments.length)return this._timeScale;var e,i;for(t=t||1e-10,this._timeline&&this._timeline.smoothChildTiming&&(i=(e=this._pauseTime)||0===e?e:this._timeline.totalTime(),this._startTime=i-(i-this._startTime)*this._timeScale/t),this._timeScale=t,i=this.timeline;i&&i.timeline;)i._dirty=!0,i.totalDuration(),i=i.timeline;return this},o.reversed=function(t){return arguments.length?(t!=this._reversed&&(this._reversed=t,this.totalTime(this._timeline&&!this._timeline.smoothChildTiming?this.totalDuration()-this._totalTime:this._totalTime,!0)),this):this._reversed},o.paused=function(t){if(!arguments.length)return this._paused;var e,i,s=this._timeline;return t!=this._paused&&s&&(h||t||l.wake(),i=(e=s.rawTime())-this._pauseTime,!t&&s.smoothChildTiming&&(this._startTime+=i,this._uncache(!1)),this._pauseTime=t?e:null,this._paused=t,this._active=this.isActive(),!t&&0!==i&&this._initted&&this.duration()&&(e=s.smoothChildTiming?this._totalTime:(e-this._startTime)/this._timeScale,this.render(e,e===this._totalTime,!0))),this._gc&&!t&&this._enabled(!0,!1),this};var D=T("core.SimpleTimeline",function(t){C.call(this,0,t),this.autoRemoveChildren=this.smoothChildTiming=!0});(o=D.prototype=new C).constructor=D,o.kill()._gc=!1,o._first=o._last=o._recent=null,o._sortChildren=!1,o.add=o.insert=function(t,e,i,s){var r,n;if(t._startTime=Number(e||0)+t._delay,t._paused&&this!==t._timeline&&(t._pauseTime=this.rawTime()-(t._timeline.rawTime()-t._pauseTime)),t.timeline&&t.timeline._remove(t,!0),t.timeline=t._timeline=this,t._gc&&t._enabled(!0,!0),r=this._last,this._sortChildren)for(n=t._startTime;r&&r._startTime>n;)r=r._prev;return r?(t._next=r._next,r._next=t):(t._next=this._first,this._first=t),t._next?t._next._prev=t:this._last=t,t._prev=r,this._recent=t,this._timeline&&this._uncache(!0),this},o._remove=function(t,e){return t.timeline===this&&(e||t._enabled(!1,!0),t._prev?t._prev._next=t._next:this._first===t&&(this._first=t._next),t._next?t._next._prev=t._prev:this._last===t&&(this._last=t._prev),t._next=t._prev=t.timeline=null,t===this._recent&&(this._recent=this._last),this._timeline&&this._uncache(!0)),this},o.render=function(t,e,i){var s,r=this._first;for(this._totalTime=this._time=this._rawPrevTime=t;r;)s=r._next,(r._active||t>=r._startTime&&!r._paused&&!r._gc)&&(r._reversed?r.render((r._dirty?r.totalDuration():r._totalDuration)-(t-r._startTime)*r._timeScale,e,i):r.render((t-r._startTime)*r._timeScale,e,i)),r=s},o.rawTime=function(){return h||l.wake(),this._totalTime};var F=T("TweenLite",function(e,i,s){if(C.call(this,i,s),this.render=F.prototype.render,null==e)throw"Cannot tween a null target.";this.target=e="string"!=typeof e?e:F.selector(e)||e;var r,n,a,o=e.jquery||e.length&&e!==t&&e[0]&&(e[0]===t||e[0].nodeType&&e[0].style&&!e.nodeType),l=this.vars.overwrite;if(this._overwrite=l=null==l?G[F.defaultOverwrite]:"number"==typeof l?l>>0:G[l],(o||e instanceof Array||e.push&&m(e))&&"number"!=typeof e[0])for(this._targets=a=p(e),this._propLookup=[],this._siblings=[],r=0;r<a.length;r++)(n=a[r])?"string"!=typeof n?n.length&&n!==t&&n[0]&&(n[0]===t||n[0].nodeType&&n[0].style&&!n.nodeType)?(a.splice(r--,1),this._targets=a=a.concat(p(n))):(this._siblings[r]=K(n,this,!1),1===l&&this._siblings[r].length>1&&tt(n,this,null,1,this._siblings[r])):"string"==typeof(n=a[r--]=F.selector(n))&&a.splice(r+1,1):a.splice(r--,1);else this._propLookup={},this._siblings=K(e,this,!1),1===l&&this._siblings.length>1&&tt(e,this,null,1,this._siblings);(this.vars.immediateRender||0===i&&0===this._delay&&!1!==this.vars.immediateRender)&&(this._time=-1e-10,this.render(Math.min(0,-this._delay)))},!0),z=function(e){return e&&e.length&&e!==t&&e[0]&&(e[0]===t||e[0].nodeType&&e[0].style&&!e.nodeType)};(o=F.prototype=new C).constructor=F,o.kill()._gc=!1,o.ratio=0,o._firstPT=o._targets=o._overwrittenProps=o._startAt=null,o._notifyPluginsOfEnabled=o._lazy=!1,F.version="1.20.5",F.defaultEase=o._ease=new b(null,null,1,1),F.defaultOverwrite="auto",F.ticker=l,F.autoSleep=120,F.lagSmoothing=function(t,e){l.lagSmoothing(t,e)},F.selector=t.$||t.jQuery||function(e){var i=t.$||t.jQuery;return i?(F.selector=i,i(e)):(s||(s=t.document),s?s.querySelectorAll?s.querySelectorAll(e):s.getElementById("#"===e.charAt(0)?e.substr(1):e):e)};var E=[],I={},X=/(?:(-|-=|\+=)?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/gi,L=/[\+-]=-?[\.\d]/,N=function(t){for(var e,i=this._firstPT;i;)e=i.blob?1===t&&null!=this.end?this.end:t?this.join(""):this.start:i.c*t+i.s,i.m?e=i.m.call(this._tween,e,this._target||i.t,this._tween):e<1e-6&&e>-1e-6&&!i.blob&&(e=0),i.f?i.fp?i.t[i.p](i.fp,e):i.t[i.p](e):i.t[i.p]=e,i=i._next},B=function(t,e,i,s){var r,n,a,o,l,h,_,u=[],f=0,c="",p=0;for(u.start=t,u.end=e,t=u[0]=t+"",e=u[1]=e+"",i&&(i(u),t=u[0],e=u[1]),u.length=0,r=t.match(X)||[],n=e.match(X)||[],s&&(s._next=null,s.blob=1,u._firstPT=u._applyPT=s),l=n.length,o=0;o<l;o++)_=n[o],c+=(h=e.substr(f,e.indexOf(_,f)-f))||!o?h:",",f+=h.length,p?p=(p+1)%5:"rgba("===h.substr(-5)&&(p=1),_===r[o]||r.length<=o?c+=_:(c&&(u.push(c),c=""),a=parseFloat(r[o]),u.push(a),u._firstPT={_next:u._firstPT,t:u,p:u.length-1,s:a,c:("="===_.charAt(1)?parseInt(_.charAt(0)+"1",10)*parseFloat(_.substr(2)):parseFloat(_)-a)||0,f:0,m:p&&p<4?Math.round:0}),f+=_.length;return(c+=e.substr(f))&&u.push(c),u.setRatio=N,L.test(e)&&(u.end=null),u},Y=function(t,e,i,s,r,n,a,o,l){"function"==typeof s&&(s=s(l||0,t));var h=typeof t[e],_="function"!==h?"":e.indexOf("set")||"function"!=typeof t["get"+e.substr(3)]?e:"get"+e.substr(3),u="get"!==i?i:_?a?t[_](a):t[_]():t[e],f="string"==typeof s&&"="===s.charAt(1),c={t:t,p:e,s:u,f:"function"===h,pg:0,n:r||e,m:n?"function"==typeof n?n:Math.round:0,pr:0,c:f?parseInt(s.charAt(0)+"1",10)*parseFloat(s.substr(2)):parseFloat(s)-u||0};if(("number"!=typeof u||"number"!=typeof s&&!f)&&(a||isNaN(u)||!f&&isNaN(s)||"boolean"==typeof u||"boolean"==typeof s?(c.fp=a,c={t:B(u,f?parseFloat(c.s)+c.c+(c.s+"").replace(/[0-9\-\.]/g,""):s,o||F.defaultStringFilter,c),p:"setRatio",s:0,c:1,f:2,pg:0,n:r||e,pr:0,m:0}):(c.s=parseFloat(u),f||(c.c=parseFloat(s)-c.s||0))),c.c)return(c._next=this._firstPT)&&(c._next._prev=c),this._firstPT=c,c},j=F._internals={isArray:m,isSelector:z,lazyTweens:E,blobDif:B},U=F._plugins={},V=j.tweenLookup={},q=0,W=j.reservedProps={ease:1,delay:1,overwrite:1,onComplete:1,onCompleteParams:1,onCompleteScope:1,useFrames:1,runBackwards:1,startAt:1,onUpdate:1,onUpdateParams:1,onUpdateScope:1,onStart:1,onStartParams:1,onStartScope:1,onReverseComplete:1,onReverseCompleteParams:1,onReverseCompleteScope:1,onRepeat:1,onRepeatParams:1,onRepeatScope:1,easeParams:1,yoyo:1,immediateRender:1,repeat:1,repeatDelay:1,data:1,paused:1,reversed:1,autoCSS:1,lazy:1,onOverwrite:1,callbackScope:1,stringFilter:1,id:1,yoyoEase:1},G={none:0,all:1,auto:2,concurrent:3,allOnStart:4,preexisting:5,true:1,false:0},Z=C._rootFramesTimeline=new D,H=C._rootTimeline=new D,$=30,Q=j.lazyRender=function(){var t,e=E.length;for(I={};--e>-1;)(t=E[e])&&!1!==t._lazy&&(t.render(t._lazy[0],t._lazy[1],!0),t._lazy=!1);E.length=0};H._startTime=l.time,Z._startTime=l.frame,H._active=Z._active=!0,setTimeout(Q,1),C._updateRoot=F.render=function(){var t,e,i;if(E.length&&Q(),H.render((l.time-H._startTime)*H._timeScale,!1,!1),Z.render((l.frame-Z._startTime)*Z._timeScale,!1,!1),E.length&&Q(),l.frame>=$){for(i in $=l.frame+(parseInt(F.autoSleep,10)||120),V){for(t=(e=V[i].tweens).length;--t>-1;)e[t]._gc&&e.splice(t,1);0===e.length&&delete V[i]}if((!(i=H._first)||i._paused)&&F.autoSleep&&!Z._first&&1===l._listeners.tick.length){for(;i&&i._paused;)i=i._next;i||l.sleep()}}},l.addEventListener("tick",C._updateRoot);var K=function(t,e,i){var s,r,n=t._gsTweenID;if(V[n||(t._gsTweenID=n="t"+q++)]||(V[n]={target:t,tweens:[]}),e&&((s=V[n].tweens)[r=s.length]=e,i))for(;--r>-1;)s[r]===e&&s.splice(r,1);return V[n].tweens},J=function(t,e,i,s){var r,n,a=t.vars.onOverwrite;return a&&(r=a(t,e,i,s)),(a=F.onOverwrite)&&(n=a(t,e,i,s)),!1!==r&&!1!==n},tt=function(t,e,i,s,r){var n,a,o,l;if(1===s||s>=4){for(l=r.length,n=0;n<l;n++)if((o=r[n])!==e)o._gc||o._kill(null,t,e)&&(a=!0);else if(5===s)break;return a}var h,_=e._startTime+1e-10,u=[],f=0,c=0===e._duration;for(n=r.length;--n>-1;)(o=r[n])===e||o._gc||o._paused||(o._timeline!==e._timeline?(h=h||et(e,0,c),0===et(o,h,c)&&(u[f++]=o)):o._startTime<=_&&o._startTime+o.totalDuration()/o._timeScale>_&&((c||!o._initted)&&_-o._startTime<=2e-10||(u[f++]=o)));for(n=f;--n>-1;)if(o=u[n],2===s&&o._kill(i,t,e)&&(a=!0),2!==s||!o._firstPT&&o._initted){if(2!==s&&!J(o,e))continue;o._enabled(!1,!1)&&(a=!0)}return a},et=function(t,e,i){for(var s=t._timeline,r=s._timeScale,n=t._startTime;s._timeline;){if(n+=s._startTime,r*=s._timeScale,s._paused)return-100;s=s._timeline}return(n/=r)>e?n-e:i&&n===e||!t._initted&&n-e<2e-10?1e-10:(n+=t.totalDuration()/t._timeScale/r)>e+1e-10?0:n-e-1e-10};o._init=function(){var t,e,i,s,r,n,a=this.vars,o=this._overwrittenProps,l=this._duration,h=!!a.immediateRender,_=a.ease;if(a.startAt){for(s in this._startAt&&(this._startAt.render(-1,!0),this._startAt.kill()),r={},a.startAt)r[s]=a.startAt[s];if(r.data="isStart",r.overwrite=!1,r.immediateRender=!0,r.lazy=h&&!1!==a.lazy,r.startAt=r.delay=null,r.onUpdate=a.onUpdate,r.onUpdateParams=a.onUpdateParams,r.onUpdateScope=a.onUpdateScope||a.callbackScope||this,this._startAt=F.to(this.target||{},0,r),h)if(this._time>0)this._startAt=null;else if(0!==l)return}else if(a.runBackwards&&0!==l)if(this._startAt)this._startAt.render(-1,!0),this._startAt.kill(),this._startAt=null;else{for(s in 0!==this._time&&(h=!1),i={},a)W[s]&&"autoCSS"!==s||(i[s]=a[s]);if(i.overwrite=0,i.data="isFromStart",i.lazy=h&&!1!==a.lazy,i.immediateRender=h,this._startAt=F.to(this.target,0,i),h){if(0===this._time)return}else this._startAt._init(),this._startAt._enabled(!1),this.vars.immediateRender&&(this._startAt=null)}if(this._ease=_=_?_ instanceof b?_:"function"==typeof _?new b(_,a.easeParams):w[_]||F.defaultEase:F.defaultEase,a.easeParams instanceof Array&&_.config&&(this._ease=_.config.apply(_,a.easeParams)),this._easeType=this._ease._type,this._easePower=this._ease._power,this._firstPT=null,this._targets)for(n=this._targets.length,t=0;t<n;t++)this._initProps(this._targets[t],this._propLookup[t]={},this._siblings[t],o?o[t]:null,t)&&(e=!0);else e=this._initProps(this.target,this._propLookup,this._siblings,o,0);if(e&&F._onPluginEvent("_onInitAllProps",this),o&&(this._firstPT||"function"!=typeof this.target&&this._enabled(!1,!1)),a.runBackwards)for(i=this._firstPT;i;)i.s+=i.c,i.c=-i.c,i=i._next;this._onUpdate=a.onUpdate,this._initted=!0},o._initProps=function(e,i,s,r,n){var a,o,l,h,_,u;if(null==e)return!1;for(a in I[e._gsTweenID]&&Q(),this.vars.css||e.style&&e!==t&&e.nodeType&&U.css&&!1!==this.vars.autoCSS&&function(t,e){var i,s={};for(i in t)W[i]||i in e&&"transform"!==i&&"x"!==i&&"y"!==i&&"width"!==i&&"height"!==i&&"className"!==i&&"border"!==i||!(!U[i]||U[i]&&U[i]._autoCSS)||(s[i]=t[i],delete t[i]);t.css=s}(this.vars,e),this.vars)if(u=this.vars[a],W[a])u&&(u instanceof Array||u.push&&m(u))&&-1!==u.join("").indexOf("{self}")&&(this.vars[a]=u=this._swapSelfInParams(u,this));else if(U[a]&&(h=new U[a])._onInitTween(e,this.vars[a],this,n)){for(this._firstPT=_={_next:this._firstPT,t:h,p:"setRatio",s:0,c:1,f:1,n:a,pg:1,pr:h._priority,m:0},o=h._overwriteProps.length;--o>-1;)i[h._overwriteProps[o]]=this._firstPT;(h._priority||h._onInitAllProps)&&(l=!0),(h._onDisable||h._onEnable)&&(this._notifyPluginsOfEnabled=!0),_._next&&(_._next._prev=_)}else i[a]=Y.call(this,e,a,"get",u,a,0,null,this.vars.stringFilter,n);return r&&this._kill(r,e)?this._initProps(e,i,s,r,n):this._overwrite>1&&this._firstPT&&s.length>1&&tt(e,this,i,this._overwrite,s)?(this._kill(i,e),this._initProps(e,i,s,r,n)):(this._firstPT&&(!1!==this.vars.lazy&&this._duration||this.vars.lazy&&!this._duration)&&(I[e._gsTweenID]=!0),l)},o.render=function(t,e,i){var s,r,n,a,o=this._time,l=this._duration,h=this._rawPrevTime;if(t>=l-1e-7&&t>=0)this._totalTime=this._time=l,this.ratio=this._ease._calcEnd?this._ease.getRatio(1):1,this._reversed||(s=!0,r="onComplete",i=i||this._timeline.autoRemoveChildren),0===l&&(this._initted||!this.vars.lazy||i)&&(this._startTime===this._timeline._duration&&(t=0),(h<0||t<=0&&t>=-1e-7||1e-10===h&&"isPause"!==this.data)&&h!==t&&(i=!0,h>1e-10&&(r="onReverseComplete")),this._rawPrevTime=a=!e||t||h===t?t:1e-10);else if(t<1e-7)this._totalTime=this._time=0,this.ratio=this._ease._calcEnd?this._ease.getRatio(0):0,(0!==o||0===l&&h>0)&&(r="onReverseComplete",s=this._reversed),t<0&&(this._active=!1,0===l&&(this._initted||!this.vars.lazy||i)&&(h>=0&&(1e-10!==h||"isPause"!==this.data)&&(i=!0),this._rawPrevTime=a=!e||t||h===t?t:1e-10)),(!this._initted||this._startAt&&this._startAt.progress())&&(i=!0);else if(this._totalTime=this._time=t,this._easeType){var _=t/l,u=this._easeType,f=this._easePower;(1===u||3===u&&_>=.5)&&(_=1-_),3===u&&(_*=2),1===f?_*=_:2===f?_*=_*_:3===f?_*=_*_*_:4===f&&(_*=_*_*_*_),this.ratio=1===u?1-_:2===u?_:t/l<.5?_/2:1-_/2}else this.ratio=this._ease.getRatio(t/l);if(this._time!==o||i){if(!this._initted){if(this._init(),!this._initted||this._gc)return;if(!i&&this._firstPT&&(!1!==this.vars.lazy&&this._duration||this.vars.lazy&&!this._duration))return this._time=this._totalTime=o,this._rawPrevTime=h,E.push(this),void(this._lazy=[t,e]);this._time&&!s?this.ratio=this._ease.getRatio(this._time/l):s&&this._ease._calcEnd&&(this.ratio=this._ease.getRatio(0===this._time?0:1))}for(!1!==this._lazy&&(this._lazy=!1),this._active||!this._paused&&this._time!==o&&t>=0&&(this._active=!0),0===o&&(this._startAt&&(t>=0?this._startAt.render(t,!0,i):r||(r="_dummyGS")),this.vars.onStart&&(0===this._time&&0!==l||e||this._callback("onStart"))),n=this._firstPT;n;)n.f?n.t[n.p](n.c*this.ratio+n.s):n.t[n.p]=n.c*this.ratio+n.s,n=n._next;this._onUpdate&&(t<0&&this._startAt&&-1e-4!==t&&this._startAt.render(t,!0,i),e||(this._time!==o||s||i)&&this._callback("onUpdate")),r&&(this._gc&&!i||(t<0&&this._startAt&&!this._onUpdate&&-1e-4!==t&&this._startAt.render(t,!0,i),s&&(this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!e&&this.vars[r]&&this._callback(r),0===l&&1e-10===this._rawPrevTime&&1e-10!==a&&(this._rawPrevTime=0)))}},o._kill=function(t,e,i){if("all"===t&&(t=null),null==t&&(null==e||e===this.target))return this._lazy=!1,this._enabled(!1,!1);e="string"!=typeof e?e||this._targets||this.target:F.selector(e)||e;var s,r,n,a,o,l,h,_,u,f=i&&this._time&&i._startTime===this._startTime&&this._timeline===i._timeline;if((m(e)||z(e))&&"number"!=typeof e[0])for(s=e.length;--s>-1;)this._kill(t,e[s],i)&&(l=!0);else{if(this._targets){for(s=this._targets.length;--s>-1;)if(e===this._targets[s]){o=this._propLookup[s]||{},this._overwrittenProps=this._overwrittenProps||[],r=this._overwrittenProps[s]=t?this._overwrittenProps[s]||{}:"all";break}}else{if(e!==this.target)return!1;o=this._propLookup,r=this._overwrittenProps=t?this._overwrittenProps||{}:"all"}if(o){if(h=t||o,_=t!==r&&"all"!==r&&t!==o&&("object"!=typeof t||!t._tempKill),i&&(F.onOverwrite||this.vars.onOverwrite)){for(n in h)o[n]&&(u||(u=[]),u.push(n));if((u||!t)&&!J(this,i,e,u))return!1}for(n in h)(a=o[n])&&(f&&(a.f?a.t[a.p](a.s):a.t[a.p]=a.s,l=!0),a.pg&&a.t._kill(h)&&(l=!0),a.pg&&0!==a.t._overwriteProps.length||(a._prev?a._prev._next=a._next:a===this._firstPT&&(this._firstPT=a._next),a._next&&(a._next._prev=a._prev),a._next=a._prev=null),delete o[n]),_&&(r[n]=1);!this._firstPT&&this._initted&&this._enabled(!1,!1)}}return l},o.invalidate=function(){return this._notifyPluginsOfEnabled&&F._onPluginEvent("_onDisable",this),this._firstPT=this._overwrittenProps=this._startAt=this._onUpdate=null,this._notifyPluginsOfEnabled=this._active=this._lazy=!1,this._propLookup=this._targets?{}:[],C.prototype.invalidate.call(this),this.vars.immediateRender&&(this._time=-1e-10,this.render(Math.min(0,-this._delay))),this},o._enabled=function(t,e){if(h||l.wake(),t&&this._gc){var i,s=this._targets;if(s)for(i=s.length;--i>-1;)this._siblings[i]=K(s[i],this,!0);else this._siblings=K(this.target,this,!0)}return C.prototype._enabled.call(this,t,e),!(!this._notifyPluginsOfEnabled||!this._firstPT)&&F._onPluginEvent(t?"_onEnable":"_onDisable",this)},F.to=function(t,e,i){return new F(t,e,i)},F.from=function(t,e,i){return i.runBackwards=!0,i.immediateRender=0!=i.immediateRender,new F(t,e,i)},F.fromTo=function(t,e,i,s){return s.startAt=i,s.immediateRender=0!=s.immediateRender&&0!=i.immediateRender,new F(t,e,s)},F.delayedCall=function(t,e,i,s,r){return new F(e,0,{delay:t,onComplete:e,onCompleteParams:i,callbackScope:s,onReverseComplete:e,onReverseCompleteParams:i,immediateRender:!1,lazy:!1,useFrames:r,overwrite:0})},F.set=function(t,e){return new F(t,0,e)},F.getTweensOf=function(t,e){if(null==t)return[];var i,s,r,n;if(t="string"!=typeof t?t:F.selector(t)||t,(m(t)||z(t))&&"number"!=typeof t[0]){for(i=t.length,s=[];--i>-1;)s=s.concat(F.getTweensOf(t[i],e));for(i=s.length;--i>-1;)for(n=s[i],r=i;--r>-1;)n===s[r]&&s.splice(i,1)}else if(t._gsTweenID)for(i=(s=K(t).concat()).length;--i>-1;)(s[i]._gc||e&&!s[i].isActive())&&s.splice(i,1);return s||[]},F.killTweensOf=F.killDelayedCallsTo=function(t,e,i){"object"==typeof e&&(i=e,e=!1);for(var s=F.getTweensOf(t,e),r=s.length;--r>-1;)s[r]._kill(i,t)};var it=T("plugins.TweenPlugin",function(t,e){this._overwriteProps=(t||"").split(","),this._propName=this._overwriteProps[0],this._priority=e||0,this._super=it.prototype},!0);if(o=it.prototype,it.version="1.19.0",it.API=2,o._firstPT=null,o._addTween=Y,o.setRatio=N,o._kill=function(t){var e,i=this._overwriteProps,s=this._firstPT;if(null!=t[this._propName])this._overwriteProps=[];else for(e=i.length;--e>-1;)null!=t[i[e]]&&i.splice(e,1);for(;s;)null!=t[s.n]&&(s._next&&(s._next._prev=s._prev),s._prev?(s._prev._next=s._next,s._prev=null):this._firstPT===s&&(this._firstPT=s._next)),s=s._next;return!1},o._mod=o._roundProps=function(t){for(var e,i=this._firstPT;i;)(e=t[this._propName]||null!=i.n&&t[i.n.split(this._propName+"_").join("")])&&"function"==typeof e&&(2===i.f?i.t._applyPT.m=e:i.m=e),i=i._next},F._onPluginEvent=function(t,e){var i,s,r,n,a,o=e._firstPT;if("_onInitAllProps"===t){for(;o;){for(a=o._next,s=r;s&&s.pr>o.pr;)s=s._next;(o._prev=s?s._prev:n)?o._prev._next=o:r=o,(o._next=s)?s._prev=o:n=o,o=a}o=e._firstPT=r}for(;o;)o.pg&&"function"==typeof o.t[t]&&o.t[t]()&&(i=!0),o=o._next;return i},it.activate=function(t){for(var e=t.length;--e>-1;)t[e].API===it.API&&(U[(new t[e])._propName]=t[e]);return!0},v.plugin=function(t){if(!(t&&t.propName&&t.init&&t.API))throw"illegal plugin definition.";var e,i=t.propName,s=t.priority||0,r=t.overwriteProps,n={init:"_onInitTween",set:"setRatio",kill:"_kill",round:"_mod",mod:"_mod",initAll:"_onInitAllProps"},a=T("plugins."+i.charAt(0).toUpperCase()+i.substr(1)+"Plugin",function(){it.call(this,i,s),this._overwriteProps=r||[]},!0===t.global),o=a.prototype=new it(i);for(e in o.constructor=a,a.API=t.API,n)"function"==typeof t[e]&&(o[n[e]]=t[e]);return a.version=t.version,it.activate([a]),a},n=t._gsQueue){for(a=0;a<n.length;a++)n[a]();for(o in g)g[o].func||t.console.log("GSAP encountered missing dependency: "+o)}h=!1}("undefined"!=typeof module&&module.exports&&"undefined"!=typeof global?global:this||window);

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react-dom/index.js":[function(require,module,exports){
"use strict";module.exports=require("react/lib/ReactDOM");

},{"react/lib/ReactDOM":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactDOM.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/AutoFocusUtils.js":[function(require,module,exports){
"use strict";var ReactMount=require("./ReactMount"),findDOMNode=require("./findDOMNode"),focusNode=require("fbjs/lib/focusNode"),Mixin={componentDidMount:function(){this.props.autoFocus&&focusNode(findDOMNode(this))}},AutoFocusUtils={Mixin:Mixin,focusDOMComponent:function(){focusNode(ReactMount.getNode(this._rootNodeID))}};module.exports=AutoFocusUtils;

},{"./ReactMount":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactMount.js","./findDOMNode":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/findDOMNode.js","fbjs/lib/focusNode":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/focusNode.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/BeforeInputEventPlugin.js":[function(require,module,exports){
"use strict";var EventConstants=require("./EventConstants"),EventPropagators=require("./EventPropagators"),ExecutionEnvironment=require("fbjs/lib/ExecutionEnvironment"),FallbackCompositionState=require("./FallbackCompositionState"),SyntheticCompositionEvent=require("./SyntheticCompositionEvent"),SyntheticInputEvent=require("./SyntheticInputEvent"),keyOf=require("fbjs/lib/keyOf"),END_KEYCODES=[9,13,27,32],START_KEYCODE=229,canUseCompositionEvent=ExecutionEnvironment.canUseDOM&&"CompositionEvent"in window,documentMode=null;ExecutionEnvironment.canUseDOM&&"documentMode"in document&&(documentMode=document.documentMode);var canUseTextInputEvent=ExecutionEnvironment.canUseDOM&&"TextEvent"in window&&!documentMode&&!isPresto(),useFallbackCompositionData=ExecutionEnvironment.canUseDOM&&(!canUseCompositionEvent||documentMode&&documentMode>8&&documentMode<=11);function isPresto(){var e=window.opera;return"object"==typeof e&&"function"==typeof e.version&&parseInt(e.version(),10)<=12}var SPACEBAR_CODE=32,SPACEBAR_CHAR=String.fromCharCode(SPACEBAR_CODE),topLevelTypes=EventConstants.topLevelTypes,eventTypes={beforeInput:{phasedRegistrationNames:{bubbled:keyOf({onBeforeInput:null}),captured:keyOf({onBeforeInputCapture:null})},dependencies:[topLevelTypes.topCompositionEnd,topLevelTypes.topKeyPress,topLevelTypes.topTextInput,topLevelTypes.topPaste]},compositionEnd:{phasedRegistrationNames:{bubbled:keyOf({onCompositionEnd:null}),captured:keyOf({onCompositionEndCapture:null})},dependencies:[topLevelTypes.topBlur,topLevelTypes.topCompositionEnd,topLevelTypes.topKeyDown,topLevelTypes.topKeyPress,topLevelTypes.topKeyUp,topLevelTypes.topMouseDown]},compositionStart:{phasedRegistrationNames:{bubbled:keyOf({onCompositionStart:null}),captured:keyOf({onCompositionStartCapture:null})},dependencies:[topLevelTypes.topBlur,topLevelTypes.topCompositionStart,topLevelTypes.topKeyDown,topLevelTypes.topKeyPress,topLevelTypes.topKeyUp,topLevelTypes.topMouseDown]},compositionUpdate:{phasedRegistrationNames:{bubbled:keyOf({onCompositionUpdate:null}),captured:keyOf({onCompositionUpdateCapture:null})},dependencies:[topLevelTypes.topBlur,topLevelTypes.topCompositionUpdate,topLevelTypes.topKeyDown,topLevelTypes.topKeyPress,topLevelTypes.topKeyUp,topLevelTypes.topMouseDown]}},hasSpaceKeypress=!1;function isKeypressCommand(e){return(e.ctrlKey||e.altKey||e.metaKey)&&!(e.ctrlKey&&e.altKey)}function getCompositionEventType(e){switch(e){case topLevelTypes.topCompositionStart:return eventTypes.compositionStart;case topLevelTypes.topCompositionEnd:return eventTypes.compositionEnd;case topLevelTypes.topCompositionUpdate:return eventTypes.compositionUpdate}}function isFallbackCompositionStart(e,t){return e===topLevelTypes.topKeyDown&&t.keyCode===START_KEYCODE}function isFallbackCompositionEnd(e,t){switch(e){case topLevelTypes.topKeyUp:return-1!==END_KEYCODES.indexOf(t.keyCode);case topLevelTypes.topKeyDown:return t.keyCode!==START_KEYCODE;case topLevelTypes.topKeyPress:case topLevelTypes.topMouseDown:case topLevelTypes.topBlur:return!0;default:return!1}}function getDataFromCustomEvent(e){var t=e.detail;return"object"==typeof t&&"data"in t?t.data:null}var currentComposition=null;function extractCompositionEvent(e,t,o,n,p){var s,i;if(canUseCompositionEvent?s=getCompositionEventType(e):currentComposition?isFallbackCompositionEnd(e,n)&&(s=eventTypes.compositionEnd):isFallbackCompositionStart(e,n)&&(s=eventTypes.compositionStart),!s)return null;useFallbackCompositionData&&(currentComposition||s!==eventTypes.compositionStart?s===eventTypes.compositionEnd&&currentComposition&&(i=currentComposition.getData()):currentComposition=FallbackCompositionState.getPooled(t));var r=SyntheticCompositionEvent.getPooled(s,o,n,p);if(i)r.data=i;else{var a=getDataFromCustomEvent(n);null!==a&&(r.data=a)}return EventPropagators.accumulateTwoPhaseDispatches(r),r}function getNativeBeforeInputChars(e,t){switch(e){case topLevelTypes.topCompositionEnd:return getDataFromCustomEvent(t);case topLevelTypes.topKeyPress:return t.which!==SPACEBAR_CODE?null:(hasSpaceKeypress=!0,SPACEBAR_CHAR);case topLevelTypes.topTextInput:var o=t.data;return o===SPACEBAR_CHAR&&hasSpaceKeypress?null:o;default:return null}}function getFallbackBeforeInputChars(e,t){if(currentComposition){if(e===topLevelTypes.topCompositionEnd||isFallbackCompositionEnd(e,t)){var o=currentComposition.getData();return FallbackCompositionState.release(currentComposition),currentComposition=null,o}return null}switch(e){case topLevelTypes.topPaste:return null;case topLevelTypes.topKeyPress:return t.which&&!isKeypressCommand(t)?String.fromCharCode(t.which):null;case topLevelTypes.topCompositionEnd:return useFallbackCompositionData?null:t.data;default:return null}}function extractBeforeInputEvent(e,t,o,n,p){var s;if(!(s=canUseTextInputEvent?getNativeBeforeInputChars(e,n):getFallbackBeforeInputChars(e,n)))return null;var i=SyntheticInputEvent.getPooled(eventTypes.beforeInput,o,n,p);return i.data=s,EventPropagators.accumulateTwoPhaseDispatches(i),i}var BeforeInputEventPlugin={eventTypes:eventTypes,extractEvents:function(e,t,o,n,p){return[extractCompositionEvent(e,t,o,n,p),extractBeforeInputEvent(e,t,o,n,p)]}};module.exports=BeforeInputEventPlugin;

},{"./EventConstants":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/EventConstants.js","./EventPropagators":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/EventPropagators.js","./FallbackCompositionState":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/FallbackCompositionState.js","./SyntheticCompositionEvent":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/SyntheticCompositionEvent.js","./SyntheticInputEvent":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/SyntheticInputEvent.js","fbjs/lib/ExecutionEnvironment":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/ExecutionEnvironment.js","fbjs/lib/keyOf":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/keyOf.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/CSSProperty.js":[function(require,module,exports){
"use strict";var isUnitlessNumber={animationIterationCount:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,stopOpacity:!0,strokeDashoffset:!0,strokeOpacity:!0,strokeWidth:!0};function prefixKey(o,r){return o+r.charAt(0).toUpperCase()+r.substring(1)}var prefixes=["Webkit","ms","Moz","O"];Object.keys(isUnitlessNumber).forEach(function(o){prefixes.forEach(function(r){isUnitlessNumber[prefixKey(r,o)]=isUnitlessNumber[o]})});var shorthandPropertyExpansions={background:{backgroundAttachment:!0,backgroundColor:!0,backgroundImage:!0,backgroundPositionX:!0,backgroundPositionY:!0,backgroundRepeat:!0},backgroundPosition:{backgroundPositionX:!0,backgroundPositionY:!0},border:{borderWidth:!0,borderStyle:!0,borderColor:!0},borderBottom:{borderBottomWidth:!0,borderBottomStyle:!0,borderBottomColor:!0},borderLeft:{borderLeftWidth:!0,borderLeftStyle:!0,borderLeftColor:!0},borderRight:{borderRightWidth:!0,borderRightStyle:!0,borderRightColor:!0},borderTop:{borderTopWidth:!0,borderTopStyle:!0,borderTopColor:!0},font:{fontStyle:!0,fontVariant:!0,fontWeight:!0,fontSize:!0,lineHeight:!0,fontFamily:!0},outline:{outlineWidth:!0,outlineStyle:!0,outlineColor:!0}},CSSProperty={isUnitlessNumber:isUnitlessNumber,shorthandPropertyExpansions:shorthandPropertyExpansions};module.exports=CSSProperty;

},{}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/CSSPropertyOperations.js":[function(require,module,exports){
"use strict";var badVendoredStyleNamePattern,badStyleValueWithSemicolonPattern,warnedStyleNames,warnedStyleValues,warnHyphenatedStyleName,warnBadVendoredStyleName,warnStyleValueWithSemicolon,warnValidStyle,CSSProperty=require("./CSSProperty"),ExecutionEnvironment=require("fbjs/lib/ExecutionEnvironment"),ReactPerf=require("./ReactPerf"),camelizeStyleName=require("fbjs/lib/camelizeStyleName"),dangerousStyleValue=require("./dangerousStyleValue"),hyphenateStyleName=require("fbjs/lib/hyphenateStyleName"),memoizeStringOnly=require("fbjs/lib/memoizeStringOnly"),warning=require("fbjs/lib/warning"),processStyleName=memoizeStringOnly(function(e){return hyphenateStyleName(e)}),hasShorthandPropertyBug=!1,styleFloatAccessor="cssFloat";if(ExecutionEnvironment.canUseDOM){var tempStyle=document.createElement("div").style;try{tempStyle.font=""}catch(e){hasShorthandPropertyBug=!0}void 0===document.documentElement.style.cssFloat&&(styleFloatAccessor="styleFloat")}var CSSPropertyOperations={createMarkupForStyles:function(e){var r="";for(var t in e)if(e.hasOwnProperty(t)){var a=e[t];0,null!=a&&(r+=processStyleName(t)+":",r+=dangerousStyleValue(t,a)+";")}return r||null},setValueForStyles:function(e,r){var t=e.style;for(var a in r)if(r.hasOwnProperty(a)){0;var n=dangerousStyleValue(a,r[a]);if("float"===a&&(a=styleFloatAccessor),n)t[a]=n;else{var l=hasShorthandPropertyBug&&CSSProperty.shorthandPropertyExpansions[a];if(l)for(var o in l)t[o]="";else t[a]=""}}}};ReactPerf.measureMethods(CSSPropertyOperations,"CSSPropertyOperations",{setValueForStyles:"setValueForStyles"}),module.exports=CSSPropertyOperations;

},{"./CSSProperty":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/CSSProperty.js","./ReactPerf":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactPerf.js","./dangerousStyleValue":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/dangerousStyleValue.js","fbjs/lib/ExecutionEnvironment":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/ExecutionEnvironment.js","fbjs/lib/camelizeStyleName":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/camelizeStyleName.js","fbjs/lib/hyphenateStyleName":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/hyphenateStyleName.js","fbjs/lib/memoizeStringOnly":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/memoizeStringOnly.js","fbjs/lib/warning":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/warning.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/CallbackQueue.js":[function(require,module,exports){
"use strict";var PooledClass=require("./PooledClass"),assign=require("./Object.assign"),invariant=require("fbjs/lib/invariant");function CallbackQueue(){this._callbacks=null,this._contexts=null}assign(CallbackQueue.prototype,{enqueue:function(t,l){this._callbacks=this._callbacks||[],this._contexts=this._contexts||[],this._callbacks.push(t),this._contexts.push(l)},notifyAll:function(){var t=this._callbacks,l=this._contexts;if(t){t.length!==l.length&&invariant(!1),this._callbacks=null,this._contexts=null;for(var s=0;s<t.length;s++)t[s].call(l[s]);t.length=0,l.length=0}},reset:function(){this._callbacks=null,this._contexts=null},destructor:function(){this.reset()}}),PooledClass.addPoolingTo(CallbackQueue),module.exports=CallbackQueue;

},{"./Object.assign":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/Object.assign.js","./PooledClass":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/PooledClass.js","fbjs/lib/invariant":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/invariant.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ChangeEventPlugin.js":[function(require,module,exports){
"use strict";var EventConstants=require("./EventConstants"),EventPluginHub=require("./EventPluginHub"),EventPropagators=require("./EventPropagators"),ExecutionEnvironment=require("fbjs/lib/ExecutionEnvironment"),ReactUpdates=require("./ReactUpdates"),SyntheticEvent=require("./SyntheticEvent"),getEventTarget=require("./getEventTarget"),isEventSupported=require("./isEventSupported"),isTextInputElement=require("./isTextInputElement"),keyOf=require("fbjs/lib/keyOf"),topLevelTypes=EventConstants.topLevelTypes,eventTypes={change:{phasedRegistrationNames:{bubbled:keyOf({onChange:null}),captured:keyOf({onChangeCapture:null})},dependencies:[topLevelTypes.topBlur,topLevelTypes.topChange,topLevelTypes.topClick,topLevelTypes.topFocus,topLevelTypes.topInput,topLevelTypes.topKeyDown,topLevelTypes.topKeyUp,topLevelTypes.topSelectionChange]}},activeElement=null,activeElementID=null,activeElementValue=null,activeElementValueProp=null;function shouldUseChangeEvent(e){var t=e.nodeName&&e.nodeName.toLowerCase();return"select"===t||"input"===t&&"file"===e.type}var doesChangeEventBubble=!1;function manualDispatchChangeEvent(e){var t=SyntheticEvent.getPooled(eventTypes.change,activeElementID,e,getEventTarget(e));EventPropagators.accumulateTwoPhaseDispatches(t),ReactUpdates.batchedUpdates(runEventInBatch,t)}function runEventInBatch(e){EventPluginHub.enqueueEvents(e),EventPluginHub.processEventQueue(!1)}function startWatchingForChangeEventIE8(e,t){activeElementID=t,(activeElement=e).attachEvent("onchange",manualDispatchChangeEvent)}function stopWatchingForChangeEventIE8(){activeElement&&(activeElement.detachEvent("onchange",manualDispatchChangeEvent),activeElement=null,activeElementID=null)}function getTargetIDForChangeEvent(e,t,n){if(e===topLevelTypes.topChange)return n}function handleEventsForChangeEventIE8(e,t,n){e===topLevelTypes.topFocus?(stopWatchingForChangeEventIE8(),startWatchingForChangeEventIE8(t,n)):e===topLevelTypes.topBlur&&stopWatchingForChangeEventIE8()}ExecutionEnvironment.canUseDOM&&(doesChangeEventBubble=isEventSupported("change")&&(!("documentMode"in document)||document.documentMode>8));var isInputEventSupported=!1;ExecutionEnvironment.canUseDOM&&(isInputEventSupported=isEventSupported("input")&&(!("documentMode"in document)||document.documentMode>9));var newValueProp={get:function(){return activeElementValueProp.get.call(this)},set:function(e){activeElementValue=""+e,activeElementValueProp.set.call(this,e)}};function startWatchingForValueChange(e,t){activeElement=e,activeElementID=t,activeElementValue=e.value,activeElementValueProp=Object.getOwnPropertyDescriptor(e.constructor.prototype,"value"),Object.defineProperty(activeElement,"value",newValueProp),activeElement.attachEvent("onpropertychange",handlePropertyChange)}function stopWatchingForValueChange(){activeElement&&(delete activeElement.value,activeElement.detachEvent("onpropertychange",handlePropertyChange),activeElement=null,activeElementID=null,activeElementValue=null,activeElementValueProp=null)}function handlePropertyChange(e){if("value"===e.propertyName){var t=e.srcElement.value;t!==activeElementValue&&(activeElementValue=t,manualDispatchChangeEvent(e))}}function getTargetIDForInputEvent(e,t,n){if(e===topLevelTypes.topInput)return n}function handleEventsForInputEventIE(e,t,n){e===topLevelTypes.topFocus?(stopWatchingForValueChange(),startWatchingForValueChange(t,n)):e===topLevelTypes.topBlur&&stopWatchingForValueChange()}function getTargetIDForInputEventIE(e,t,n){if((e===topLevelTypes.topSelectionChange||e===topLevelTypes.topKeyUp||e===topLevelTypes.topKeyDown)&&activeElement&&activeElement.value!==activeElementValue)return activeElementValue=activeElement.value,activeElementID}function shouldUseClickEvent(e){return e.nodeName&&"input"===e.nodeName.toLowerCase()&&("checkbox"===e.type||"radio"===e.type)}function getTargetIDForClickEvent(e,t,n){if(e===topLevelTypes.topClick)return n}var ChangeEventPlugin={eventTypes:eventTypes,extractEvents:function(e,t,n,a,o){var l,u;if(shouldUseChangeEvent(t)?doesChangeEventBubble?l=getTargetIDForChangeEvent:u=handleEventsForChangeEventIE8:isTextInputElement(t)?isInputEventSupported?l=getTargetIDForInputEvent:(l=getTargetIDForInputEventIE,u=handleEventsForInputEventIE):shouldUseClickEvent(t)&&(l=getTargetIDForClickEvent),l){var v=l(e,t,n);if(v){var p=SyntheticEvent.getPooled(eventTypes.change,v,a,o);return p.type="change",EventPropagators.accumulateTwoPhaseDispatches(p),p}}u&&u(e,t,n)}};module.exports=ChangeEventPlugin;

},{"./EventConstants":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/EventConstants.js","./EventPluginHub":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/EventPluginHub.js","./EventPropagators":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/EventPropagators.js","./ReactUpdates":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactUpdates.js","./SyntheticEvent":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/SyntheticEvent.js","./getEventTarget":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/getEventTarget.js","./isEventSupported":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/isEventSupported.js","./isTextInputElement":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/isTextInputElement.js","fbjs/lib/ExecutionEnvironment":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/ExecutionEnvironment.js","fbjs/lib/keyOf":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/keyOf.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ClientReactRootIndex.js":[function(require,module,exports){
"use strict";var nextReactRootIndex=0,ClientReactRootIndex={createReactRootIndex:function(){return nextReactRootIndex++}};module.exports=ClientReactRootIndex;

},{}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/DOMChildrenOperations.js":[function(require,module,exports){
"use strict";var Danger=require("./Danger"),ReactMultiChildUpdateTypes=require("./ReactMultiChildUpdateTypes"),ReactPerf=require("./ReactPerf"),setInnerHTML=require("./setInnerHTML"),setTextContent=require("./setTextContent"),invariant=require("fbjs/lib/invariant");function insertChildAt(e,t,n){var r=n>=e.childNodes.length?null:e.childNodes.item(n);e.insertBefore(t,r)}var DOMChildrenOperations={dangerouslyReplaceNodeWithMarkup:Danger.dangerouslyReplaceNodeWithMarkup,updateTextContent:setTextContent,processUpdates:function(e,t){for(var n,r,a=null,i=null,d=0;d<e.length;d++)if((n=e[d]).type===ReactMultiChildUpdateTypes.MOVE_EXISTING||n.type===ReactMultiChildUpdateTypes.REMOVE_NODE){var l=n.fromIndex,p=n.parentNode.childNodes[l],s=n.parentID;p||invariant(!1),(a=a||{})[s]=a[s]||[],a[s][l]=p,(i=i||[]).push(p)}if(r=t.length&&"string"==typeof t[0]?Danger.dangerouslyRenderMarkup(t):t,i)for(var o=0;o<i.length;o++)i[o].parentNode.removeChild(i[o]);for(var u=0;u<e.length;u++)switch((n=e[u]).type){case ReactMultiChildUpdateTypes.INSERT_MARKUP:insertChildAt(n.parentNode,r[n.markupIndex],n.toIndex);break;case ReactMultiChildUpdateTypes.MOVE_EXISTING:insertChildAt(n.parentNode,a[n.parentID][n.fromIndex],n.toIndex);break;case ReactMultiChildUpdateTypes.SET_MARKUP:setInnerHTML(n.parentNode,n.content);break;case ReactMultiChildUpdateTypes.TEXT_CONTENT:setTextContent(n.parentNode,n.content);break;case ReactMultiChildUpdateTypes.REMOVE_NODE:}}};ReactPerf.measureMethods(DOMChildrenOperations,"DOMChildrenOperations",{updateTextContent:"updateTextContent"}),module.exports=DOMChildrenOperations;

},{"./Danger":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/Danger.js","./ReactMultiChildUpdateTypes":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactMultiChildUpdateTypes.js","./ReactPerf":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactPerf.js","./setInnerHTML":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/setInnerHTML.js","./setTextContent":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/setTextContent.js","fbjs/lib/invariant":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/invariant.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/DOMProperty.js":[function(require,module,exports){
"use strict";var invariant=require("fbjs/lib/invariant");function checkMask(t,e){return(t&e)===e}var DOMPropertyInjection={MUST_USE_ATTRIBUTE:1,MUST_USE_PROPERTY:2,HAS_SIDE_EFFECTS:4,HAS_BOOLEAN_VALUE:8,HAS_NUMERIC_VALUE:16,HAS_POSITIVE_NUMERIC_VALUE:48,HAS_OVERLOADED_BOOLEAN_VALUE:64,injectDOMPropertyConfig:function(t){var e=DOMPropertyInjection,r=t.Properties||{},a=t.DOMAttributeNamespaces||{},o=t.DOMAttributeNames||{},i=t.DOMPropertyNames||{},s=t.DOMMutationMethods||{};for(var u in t.isCustomAttribute&&DOMProperty._isCustomAttributeFunctions.push(t.isCustomAttribute),r){DOMProperty.properties.hasOwnProperty(u)&&invariant(!1);var n=u.toLowerCase(),c=r[u],E={attributeName:n,attributeNamespace:null,propertyName:u,mutationMethod:null,mustUseAttribute:checkMask(c,e.MUST_USE_ATTRIBUTE),mustUseProperty:checkMask(c,e.MUST_USE_PROPERTY),hasSideEffects:checkMask(c,e.HAS_SIDE_EFFECTS),hasBooleanValue:checkMask(c,e.HAS_BOOLEAN_VALUE),hasNumericValue:checkMask(c,e.HAS_NUMERIC_VALUE),hasPositiveNumericValue:checkMask(c,e.HAS_POSITIVE_NUMERIC_VALUE),hasOverloadedBooleanValue:checkMask(c,e.HAS_OVERLOADED_BOOLEAN_VALUE)};if(E.mustUseAttribute&&E.mustUseProperty&&invariant(!1),!E.mustUseProperty&&E.hasSideEffects&&invariant(!1),E.hasBooleanValue+E.hasNumericValue+E.hasOverloadedBooleanValue<=1||invariant(!1),o.hasOwnProperty(u)){var A=o[u];E.attributeName=A}a.hasOwnProperty(u)&&(E.attributeNamespace=a[u]),i.hasOwnProperty(u)&&(E.propertyName=i[u]),s.hasOwnProperty(u)&&(E.mutationMethod=s[u]),DOMProperty.properties[u]=E}}},defaultValueCache={},DOMProperty={ID_ATTRIBUTE_NAME:"data-reactid",properties:{},getPossibleStandardName:null,_isCustomAttributeFunctions:[],isCustomAttribute:function(t){for(var e=0;e<DOMProperty._isCustomAttributeFunctions.length;e++){if((0,DOMProperty._isCustomAttributeFunctions[e])(t))return!0}return!1},getDefaultValueForProperty:function(t,e){var r,a=defaultValueCache[t];return a||(defaultValueCache[t]=a={}),e in a||(r=document.createElement(t),a[e]=r[e]),a[e]},injection:DOMPropertyInjection};module.exports=DOMProperty;

},{"fbjs/lib/invariant":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/invariant.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/DOMPropertyOperations.js":[function(require,module,exports){
"use strict";var reactProps,warnedProperties,warnUnknownProperty,DOMProperty=require("./DOMProperty"),ReactPerf=require("./ReactPerf"),quoteAttributeValueForBrowser=require("./quoteAttributeValueForBrowser"),warning=require("fbjs/lib/warning"),VALID_ATTRIBUTE_NAME_REGEX=/^[a-zA-Z_][\w\.\-]*$/,illegalAttributeNameCache={},validatedAttributeNameCache={};function isAttributeNameSafe(e){return!!validatedAttributeNameCache.hasOwnProperty(e)||!illegalAttributeNameCache.hasOwnProperty(e)&&(VALID_ATTRIBUTE_NAME_REGEX.test(e)?(validatedAttributeNameCache[e]=!0,!0):(illegalAttributeNameCache[e]=!0,!1))}function shouldIgnoreValue(e,t){return null==t||e.hasBooleanValue&&!t||e.hasNumericValue&&isNaN(t)||e.hasPositiveNumericValue&&t<1||e.hasOverloadedBooleanValue&&!1===t}var DOMPropertyOperations={createMarkupForID:function(e){return DOMProperty.ID_ATTRIBUTE_NAME+"="+quoteAttributeValueForBrowser(e)},setAttributeForID:function(e,t){e.setAttribute(DOMProperty.ID_ATTRIBUTE_NAME,t)},createMarkupForProperty:function(e,t){var r=DOMProperty.properties.hasOwnProperty(e)?DOMProperty.properties[e]:null;if(r){if(shouldIgnoreValue(r,t))return"";var o=r.attributeName;return r.hasBooleanValue||r.hasOverloadedBooleanValue&&!0===t?o+'=""':o+"="+quoteAttributeValueForBrowser(t)}return DOMProperty.isCustomAttribute(e)?null==t?"":e+"="+quoteAttributeValueForBrowser(t):null},createMarkupForCustomAttribute:function(e,t){return isAttributeNameSafe(e)&&null!=t?e+"="+quoteAttributeValueForBrowser(t):""},setValueForProperty:function(e,t,r){var o=DOMProperty.properties.hasOwnProperty(t)?DOMProperty.properties[t]:null;if(o){var a=o.mutationMethod;if(a)a(e,r);else if(shouldIgnoreValue(o,r))this.deleteValueForProperty(e,t);else if(o.mustUseAttribute){var u=o.attributeName,i=o.attributeNamespace;i?e.setAttributeNS(i,u,""+r):o.hasBooleanValue||o.hasOverloadedBooleanValue&&!0===r?e.setAttribute(u,""):e.setAttribute(u,""+r)}else{var s=o.propertyName;o.hasSideEffects&&""+e[s]==""+r||(e[s]=r)}}else DOMProperty.isCustomAttribute(t)&&DOMPropertyOperations.setValueForAttribute(e,t,r)},setValueForAttribute:function(e,t,r){isAttributeNameSafe(t)&&(null==r?e.removeAttribute(t):e.setAttribute(t,""+r))},deleteValueForProperty:function(e,t){var r=DOMProperty.properties.hasOwnProperty(t)?DOMProperty.properties[t]:null;if(r){var o=r.mutationMethod;if(o)o(e,void 0);else if(r.mustUseAttribute)e.removeAttribute(r.attributeName);else{var a=r.propertyName,u=DOMProperty.getDefaultValueForProperty(e.nodeName,a);r.hasSideEffects&&""+e[a]===u||(e[a]=u)}}else DOMProperty.isCustomAttribute(t)&&e.removeAttribute(t)}};ReactPerf.measureMethods(DOMPropertyOperations,"DOMPropertyOperations",{setValueForProperty:"setValueForProperty",setValueForAttribute:"setValueForAttribute",deleteValueForProperty:"deleteValueForProperty"}),module.exports=DOMPropertyOperations;

},{"./DOMProperty":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/DOMProperty.js","./ReactPerf":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactPerf.js","./quoteAttributeValueForBrowser":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/quoteAttributeValueForBrowser.js","fbjs/lib/warning":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/warning.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/Danger.js":[function(require,module,exports){
"use strict";var ExecutionEnvironment=require("fbjs/lib/ExecutionEnvironment"),createNodesFromMarkup=require("fbjs/lib/createNodesFromMarkup"),emptyFunction=require("fbjs/lib/emptyFunction"),getMarkupWrap=require("fbjs/lib/getMarkupWrap"),invariant=require("fbjs/lib/invariant"),OPEN_TAG_NAME_EXP=/^(<[^ \/>]+)/,RESULT_INDEX_ATTR="data-danger-index";function getNodeName(e){return e.substring(1,e.indexOf(" "))}var Danger={dangerouslyRenderMarkup:function(e){var r;ExecutionEnvironment.canUseDOM||invariant(!1);for(var n={},t=0;t<e.length;t++)e[t]||invariant(!1),r=getNodeName(e[t]),n[r=getMarkupWrap(r)?r:"*"]=n[r]||[],n[r][t]=e[t];var a=[],i=0;for(r in n)if(n.hasOwnProperty(r)){var o,u=n[r];for(o in u)if(u.hasOwnProperty(o)){var p=u[o];u[o]=p.replace(OPEN_TAG_NAME_EXP,"$1 "+RESULT_INDEX_ATTR+'="'+o+'" ')}for(var s=createNodesFromMarkup(u.join(""),emptyFunction),v=0;v<s.length;++v){var E=s[v];E.hasAttribute&&E.hasAttribute(RESULT_INDEX_ATTR)&&(o=+E.getAttribute(RESULT_INDEX_ATTR),E.removeAttribute(RESULT_INDEX_ATTR),a.hasOwnProperty(o)&&invariant(!1),a[o]=E,i+=1)}}return i!==a.length&&invariant(!1),a.length!==e.length&&invariant(!1),a},dangerouslyReplaceNodeWithMarkup:function(e,r){var n;ExecutionEnvironment.canUseDOM||invariant(!1),r||invariant(!1),"html"===e.tagName.toLowerCase()&&invariant(!1),n="string"==typeof r?createNodesFromMarkup(r,emptyFunction)[0]:r,e.parentNode.replaceChild(n,e)}};module.exports=Danger;

},{"fbjs/lib/ExecutionEnvironment":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/ExecutionEnvironment.js","fbjs/lib/createNodesFromMarkup":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/createNodesFromMarkup.js","fbjs/lib/emptyFunction":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/emptyFunction.js","fbjs/lib/getMarkupWrap":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/getMarkupWrap.js","fbjs/lib/invariant":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/invariant.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/DefaultEventPluginOrder.js":[function(require,module,exports){
"use strict";var keyOf=require("fbjs/lib/keyOf"),DefaultEventPluginOrder=[keyOf({ResponderEventPlugin:null}),keyOf({SimpleEventPlugin:null}),keyOf({TapEventPlugin:null}),keyOf({EnterLeaveEventPlugin:null}),keyOf({ChangeEventPlugin:null}),keyOf({SelectEventPlugin:null}),keyOf({BeforeInputEventPlugin:null})];module.exports=DefaultEventPluginOrder;

},{"fbjs/lib/keyOf":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/keyOf.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/EnterLeaveEventPlugin.js":[function(require,module,exports){
"use strict";var EventConstants=require("./EventConstants"),EventPropagators=require("./EventPropagators"),SyntheticMouseEvent=require("./SyntheticMouseEvent"),ReactMount=require("./ReactMount"),keyOf=require("fbjs/lib/keyOf"),topLevelTypes=EventConstants.topLevelTypes,getFirstReactDOM=ReactMount.getFirstReactDOM,eventTypes={mouseEnter:{registrationName:keyOf({onMouseEnter:null}),dependencies:[topLevelTypes.topMouseOut,topLevelTypes.topMouseOver]},mouseLeave:{registrationName:keyOf({onMouseLeave:null}),dependencies:[topLevelTypes.topMouseOut,topLevelTypes.topMouseOver]}},extractedEvents=[null,null],EnterLeaveEventPlugin={eventTypes:eventTypes,extractEvents:function(e,t,n,o,r){if(e===topLevelTypes.topMouseOver&&(o.relatedTarget||o.fromElement))return null;if(e!==topLevelTypes.topMouseOut&&e!==topLevelTypes.topMouseOver)return null;var s,a,u;if(t.window===t)s=t;else{var v=t.ownerDocument;s=v?v.defaultView||v.parentWindow:window}var p="",l="";if(e===topLevelTypes.topMouseOut?(a=t,p=n,(u=getFirstReactDOM(o.relatedTarget||o.toElement))?l=ReactMount.getID(u):u=s,u=u||s):(a=s,u=t,l=n),a===u)return null;var i=SyntheticMouseEvent.getPooled(eventTypes.mouseLeave,p,o,r);i.type="mouseleave",i.target=a,i.relatedTarget=u;var y=SyntheticMouseEvent.getPooled(eventTypes.mouseEnter,l,o,r);return y.type="mouseenter",y.target=u,y.relatedTarget=a,EventPropagators.accumulateEnterLeaveDispatches(i,y,p,l),extractedEvents[0]=i,extractedEvents[1]=y,extractedEvents}};module.exports=EnterLeaveEventPlugin;

},{"./EventConstants":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/EventConstants.js","./EventPropagators":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/EventPropagators.js","./ReactMount":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactMount.js","./SyntheticMouseEvent":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/SyntheticMouseEvent.js","fbjs/lib/keyOf":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/keyOf.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/EventConstants.js":[function(require,module,exports){
"use strict";var keyMirror=require("fbjs/lib/keyMirror"),PropagationPhases=keyMirror({bubbled:null,captured:null}),topLevelTypes=keyMirror({topAbort:null,topBlur:null,topCanPlay:null,topCanPlayThrough:null,topChange:null,topClick:null,topCompositionEnd:null,topCompositionStart:null,topCompositionUpdate:null,topContextMenu:null,topCopy:null,topCut:null,topDoubleClick:null,topDrag:null,topDragEnd:null,topDragEnter:null,topDragExit:null,topDragLeave:null,topDragOver:null,topDragStart:null,topDrop:null,topDurationChange:null,topEmptied:null,topEncrypted:null,topEnded:null,topError:null,topFocus:null,topInput:null,topKeyDown:null,topKeyPress:null,topKeyUp:null,topLoad:null,topLoadedData:null,topLoadedMetadata:null,topLoadStart:null,topMouseDown:null,topMouseMove:null,topMouseOut:null,topMouseOver:null,topMouseUp:null,topPaste:null,topPause:null,topPlay:null,topPlaying:null,topProgress:null,topRateChange:null,topReset:null,topScroll:null,topSeeked:null,topSeeking:null,topSelectionChange:null,topStalled:null,topSubmit:null,topSuspend:null,topTextInput:null,topTimeUpdate:null,topTouchCancel:null,topTouchEnd:null,topTouchMove:null,topTouchStart:null,topVolumeChange:null,topWaiting:null,topWheel:null}),EventConstants={topLevelTypes:topLevelTypes,PropagationPhases:PropagationPhases};module.exports=EventConstants;

},{"fbjs/lib/keyMirror":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/keyMirror.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/EventPluginHub.js":[function(require,module,exports){
"use strict";var EventPluginRegistry=require("./EventPluginRegistry"),EventPluginUtils=require("./EventPluginUtils"),ReactErrorUtils=require("./ReactErrorUtils"),accumulateInto=require("./accumulateInto"),forEachAccumulated=require("./forEachAccumulated"),invariant=require("fbjs/lib/invariant"),warning=require("fbjs/lib/warning"),listenerBank={},eventQueue=null,executeDispatchesAndRelease=function(e,n){e&&(EventPluginUtils.executeDispatchesInOrder(e,n),e.isPersistent()||e.constructor.release(e))},executeDispatchesAndReleaseSimulated=function(e){return executeDispatchesAndRelease(e,!0)},executeDispatchesAndReleaseTopLevel=function(e){return executeDispatchesAndRelease(e,!1)},InstanceHandle=null;function validateInstanceHandle(){InstanceHandle&&InstanceHandle.traverseTwoPhase&&InstanceHandle.traverseEnterLeave}var EventPluginHub={injection:{injectMount:EventPluginUtils.injection.injectMount,injectInstanceHandle:function(e){InstanceHandle=e},getInstanceHandle:function(){return InstanceHandle},injectEventPluginOrder:EventPluginRegistry.injectEventPluginOrder,injectEventPluginsByName:EventPluginRegistry.injectEventPluginsByName},eventNameDispatchConfigs:EventPluginRegistry.eventNameDispatchConfigs,registrationNameModules:EventPluginRegistry.registrationNameModules,putListener:function(e,n,t){"function"!=typeof t&&invariant(!1),(listenerBank[n]||(listenerBank[n]={}))[e]=t;var i=EventPluginRegistry.registrationNameModules[n];i&&i.didPutListener&&i.didPutListener(e,n,t)},getListener:function(e,n){var t=listenerBank[n];return t&&t[e]},deleteListener:function(e,n){var t=EventPluginRegistry.registrationNameModules[n];t&&t.willDeleteListener&&t.willDeleteListener(e,n);var i=listenerBank[n];i&&delete i[e]},deleteAllListeners:function(e){for(var n in listenerBank)if(listenerBank[n][e]){var t=EventPluginRegistry.registrationNameModules[n];t&&t.willDeleteListener&&t.willDeleteListener(e,n),delete listenerBank[n][e]}},extractEvents:function(e,n,t,i,r){for(var a,u=EventPluginRegistry.plugins,s=0;s<u.length;s++){var l=u[s];if(l){var c=l.extractEvents(e,n,t,i,r);c&&(a=accumulateInto(a,c))}}return a},enqueueEvents:function(e){e&&(eventQueue=accumulateInto(eventQueue,e))},processEventQueue:function(e){var n=eventQueue;eventQueue=null,forEachAccumulated(n,e?executeDispatchesAndReleaseSimulated:executeDispatchesAndReleaseTopLevel),eventQueue&&invariant(!1),ReactErrorUtils.rethrowCaughtError()},__purge:function(){listenerBank={}},__getListenerBank:function(){return listenerBank}};module.exports=EventPluginHub;

},{"./EventPluginRegistry":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/EventPluginRegistry.js","./EventPluginUtils":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/EventPluginUtils.js","./ReactErrorUtils":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactErrorUtils.js","./accumulateInto":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/accumulateInto.js","./forEachAccumulated":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/forEachAccumulated.js","fbjs/lib/invariant":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/invariant.js","fbjs/lib/warning":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/warning.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/EventPluginRegistry.js":[function(require,module,exports){
"use strict";var invariant=require("fbjs/lib/invariant"),EventPluginOrder=null,namesToPlugins={};function recomputePluginOrdering(){if(EventPluginOrder)for(var e in namesToPlugins){var n=namesToPlugins[e],i=EventPluginOrder.indexOf(e);if(i>-1||invariant(!1),!EventPluginRegistry.plugins[i]){n.extractEvents||invariant(!1),EventPluginRegistry.plugins[i]=n;var r=n.eventTypes;for(var t in r)publishEventForPlugin(r[t],n,t)||invariant(!1)}}}function publishEventForPlugin(e,n,i){EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(i)&&invariant(!1),EventPluginRegistry.eventNameDispatchConfigs[i]=e;var r=e.phasedRegistrationNames;if(r){for(var t in r){if(r.hasOwnProperty(t))publishRegistrationName(r[t],n,i)}return!0}return!!e.registrationName&&(publishRegistrationName(e.registrationName,n,i),!0)}function publishRegistrationName(e,n,i){EventPluginRegistry.registrationNameModules[e]&&invariant(!1),EventPluginRegistry.registrationNameModules[e]=n,EventPluginRegistry.registrationNameDependencies[e]=n.eventTypes[i].dependencies}var EventPluginRegistry={plugins:[],eventNameDispatchConfigs:{},registrationNameModules:{},registrationNameDependencies:{},injectEventPluginOrder:function(e){EventPluginOrder&&invariant(!1),EventPluginOrder=Array.prototype.slice.call(e),recomputePluginOrdering()},injectEventPluginsByName:function(e){var n=!1;for(var i in e)if(e.hasOwnProperty(i)){var r=e[i];namesToPlugins.hasOwnProperty(i)&&namesToPlugins[i]===r||(namesToPlugins[i]&&invariant(!1),namesToPlugins[i]=r,n=!0)}n&&recomputePluginOrdering()},getPluginModuleForEvent:function(e){var n=e.dispatchConfig;if(n.registrationName)return EventPluginRegistry.registrationNameModules[n.registrationName]||null;for(var i in n.phasedRegistrationNames)if(n.phasedRegistrationNames.hasOwnProperty(i)){var r=EventPluginRegistry.registrationNameModules[n.phasedRegistrationNames[i]];if(r)return r}return null},_resetEventPlugins:function(){for(var e in EventPluginOrder=null,namesToPlugins)namesToPlugins.hasOwnProperty(e)&&delete namesToPlugins[e];EventPluginRegistry.plugins.length=0;var n=EventPluginRegistry.eventNameDispatchConfigs;for(var i in n)n.hasOwnProperty(i)&&delete n[i];var r=EventPluginRegistry.registrationNameModules;for(var t in r)r.hasOwnProperty(t)&&delete r[t]}};module.exports=EventPluginRegistry;

},{"fbjs/lib/invariant":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/invariant.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/EventPluginUtils.js":[function(require,module,exports){
"use strict";var validateEventDispatches,EventConstants=require("./EventConstants"),ReactErrorUtils=require("./ReactErrorUtils"),invariant=require("fbjs/lib/invariant"),warning=require("fbjs/lib/warning"),injection={Mount:null,injectMount:function(e){injection.Mount=e}},topLevelTypes=EventConstants.topLevelTypes;function isEndish(e){return e===topLevelTypes.topMouseUp||e===topLevelTypes.topTouchEnd||e===topLevelTypes.topTouchCancel}function isMoveish(e){return e===topLevelTypes.topMouseMove||e===topLevelTypes.topTouchMove}function isStartish(e){return e===topLevelTypes.topMouseDown||e===topLevelTypes.topTouchStart}function executeDispatch(e,t,i,n){var s=e.type||"unknown-event";e.currentTarget=injection.Mount.getNode(n),t?ReactErrorUtils.invokeGuardedCallbackWithCatch(s,i,e,n):ReactErrorUtils.invokeGuardedCallback(s,i,e,n),e.currentTarget=null}function executeDispatchesInOrder(e,t){var i=e._dispatchListeners,n=e._dispatchIDs;if(Array.isArray(i))for(var s=0;s<i.length&&!e.isPropagationStopped();s++)executeDispatch(e,t,i[s],n[s]);else i&&executeDispatch(e,t,i,n);e._dispatchListeners=null,e._dispatchIDs=null}function executeDispatchesInOrderStopAtTrueImpl(e){var t=e._dispatchListeners,i=e._dispatchIDs;if(Array.isArray(t)){for(var n=0;n<t.length&&!e.isPropagationStopped();n++)if(t[n](e,i[n]))return i[n]}else if(t&&t(e,i))return i;return null}function executeDispatchesInOrderStopAtTrue(e){var t=executeDispatchesInOrderStopAtTrueImpl(e);return e._dispatchIDs=null,e._dispatchListeners=null,t}function executeDirectDispatch(e){var t=e._dispatchListeners,i=e._dispatchIDs;Array.isArray(t)&&invariant(!1);var n=t?t(e,i):null;return e._dispatchListeners=null,e._dispatchIDs=null,n}function hasDispatches(e){return!!e._dispatchListeners}var EventPluginUtils={isEndish:isEndish,isMoveish:isMoveish,isStartish:isStartish,executeDirectDispatch:executeDirectDispatch,executeDispatchesInOrder:executeDispatchesInOrder,executeDispatchesInOrderStopAtTrue:executeDispatchesInOrderStopAtTrue,hasDispatches:hasDispatches,getNode:function(e){return injection.Mount.getNode(e)},getID:function(e){return injection.Mount.getID(e)},injection:injection};module.exports=EventPluginUtils;

},{"./EventConstants":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/EventConstants.js","./ReactErrorUtils":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactErrorUtils.js","fbjs/lib/invariant":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/invariant.js","fbjs/lib/warning":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/warning.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/EventPropagators.js":[function(require,module,exports){
"use strict";var EventConstants=require("./EventConstants"),EventPluginHub=require("./EventPluginHub"),warning=require("fbjs/lib/warning"),accumulateInto=require("./accumulateInto"),forEachAccumulated=require("./forEachAccumulated"),PropagationPhases=EventConstants.PropagationPhases,getListener=EventPluginHub.getListener;function listenerAtPhase(e,a,t){var c=a.dispatchConfig.phasedRegistrationNames[t];return getListener(e,c)}function accumulateDirectionalDispatches(e,a,t){var c=listenerAtPhase(e,t,a?PropagationPhases.bubbled:PropagationPhases.captured);c&&(t._dispatchListeners=accumulateInto(t._dispatchListeners,c),t._dispatchIDs=accumulateInto(t._dispatchIDs,e))}function accumulateTwoPhaseDispatchesSingle(e){e&&e.dispatchConfig.phasedRegistrationNames&&EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(e.dispatchMarker,accumulateDirectionalDispatches,e)}function accumulateTwoPhaseDispatchesSingleSkipTarget(e){e&&e.dispatchConfig.phasedRegistrationNames&&EventPluginHub.injection.getInstanceHandle().traverseTwoPhaseSkipTarget(e.dispatchMarker,accumulateDirectionalDispatches,e)}function accumulateDispatches(e,a,t){if(t&&t.dispatchConfig.registrationName){var c=t.dispatchConfig.registrationName,s=getListener(e,c);s&&(t._dispatchListeners=accumulateInto(t._dispatchListeners,s),t._dispatchIDs=accumulateInto(t._dispatchIDs,e))}}function accumulateDirectDispatchesSingle(e){e&&e.dispatchConfig.registrationName&&accumulateDispatches(e.dispatchMarker,null,e)}function accumulateTwoPhaseDispatches(e){forEachAccumulated(e,accumulateTwoPhaseDispatchesSingle)}function accumulateTwoPhaseDispatchesSkipTarget(e){forEachAccumulated(e,accumulateTwoPhaseDispatchesSingleSkipTarget)}function accumulateEnterLeaveDispatches(e,a,t,c){EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(t,c,accumulateDispatches,e,a)}function accumulateDirectDispatches(e){forEachAccumulated(e,accumulateDirectDispatchesSingle)}var EventPropagators={accumulateTwoPhaseDispatches:accumulateTwoPhaseDispatches,accumulateTwoPhaseDispatchesSkipTarget:accumulateTwoPhaseDispatchesSkipTarget,accumulateDirectDispatches:accumulateDirectDispatches,accumulateEnterLeaveDispatches:accumulateEnterLeaveDispatches};module.exports=EventPropagators;

},{"./EventConstants":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/EventConstants.js","./EventPluginHub":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/EventPluginHub.js","./accumulateInto":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/accumulateInto.js","./forEachAccumulated":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/forEachAccumulated.js","fbjs/lib/warning":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/warning.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/FallbackCompositionState.js":[function(require,module,exports){
"use strict";var PooledClass=require("./PooledClass"),assign=require("./Object.assign"),getTextContentAccessor=require("./getTextContentAccessor");function FallbackCompositionState(t){this._root=t,this._startText=this.getText(),this._fallbackText=null}assign(FallbackCompositionState.prototype,{destructor:function(){this._root=null,this._startText=null,this._fallbackText=null},getText:function(){return"value"in this._root?this._root.value:this._root[getTextContentAccessor()]},getData:function(){if(this._fallbackText)return this._fallbackText;var t,e,o=this._startText,s=o.length,a=this.getText(),l=a.length;for(t=0;t<s&&o[t]===a[t];t++);var i=s-t;for(e=1;e<=i&&o[s-e]===a[l-e];e++);var r=e>1?1-e:void 0;return this._fallbackText=a.slice(t,r),this._fallbackText}}),PooledClass.addPoolingTo(FallbackCompositionState),module.exports=FallbackCompositionState;

},{"./Object.assign":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/Object.assign.js","./PooledClass":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/PooledClass.js","./getTextContentAccessor":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/getTextContentAccessor.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/HTMLDOMPropertyConfig.js":[function(require,module,exports){
"use strict";var hasSVG,DOMProperty=require("./DOMProperty"),ExecutionEnvironment=require("fbjs/lib/ExecutionEnvironment"),MUST_USE_ATTRIBUTE=DOMProperty.injection.MUST_USE_ATTRIBUTE,MUST_USE_PROPERTY=DOMProperty.injection.MUST_USE_PROPERTY,HAS_BOOLEAN_VALUE=DOMProperty.injection.HAS_BOOLEAN_VALUE,HAS_SIDE_EFFECTS=DOMProperty.injection.HAS_SIDE_EFFECTS,HAS_NUMERIC_VALUE=DOMProperty.injection.HAS_NUMERIC_VALUE,HAS_POSITIVE_NUMERIC_VALUE=DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE,HAS_OVERLOADED_BOOLEAN_VALUE=DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;if(ExecutionEnvironment.canUseDOM){var implementation=document.implementation;hasSVG=implementation&&implementation.hasFeature&&implementation.hasFeature("http://www.w3.org/TR/SVG11/feature#BasicStructure","1.1")}var HTMLDOMPropertyConfig={isCustomAttribute:RegExp.prototype.test.bind(/^(data|aria)-[a-z_][a-z\d_.\-]*$/),Properties:{accept:null,acceptCharset:null,accessKey:null,action:null,allowFullScreen:MUST_USE_ATTRIBUTE|HAS_BOOLEAN_VALUE,allowTransparency:MUST_USE_ATTRIBUTE,alt:null,async:HAS_BOOLEAN_VALUE,autoComplete:null,autoPlay:HAS_BOOLEAN_VALUE,capture:MUST_USE_ATTRIBUTE|HAS_BOOLEAN_VALUE,cellPadding:null,cellSpacing:null,charSet:MUST_USE_ATTRIBUTE,challenge:MUST_USE_ATTRIBUTE,checked:MUST_USE_PROPERTY|HAS_BOOLEAN_VALUE,classID:MUST_USE_ATTRIBUTE,className:hasSVG?MUST_USE_ATTRIBUTE:MUST_USE_PROPERTY,cols:MUST_USE_ATTRIBUTE|HAS_POSITIVE_NUMERIC_VALUE,colSpan:null,content:null,contentEditable:null,contextMenu:MUST_USE_ATTRIBUTE,controls:MUST_USE_PROPERTY|HAS_BOOLEAN_VALUE,coords:null,crossOrigin:null,data:null,dateTime:MUST_USE_ATTRIBUTE,default:HAS_BOOLEAN_VALUE,defer:HAS_BOOLEAN_VALUE,dir:null,disabled:MUST_USE_ATTRIBUTE|HAS_BOOLEAN_VALUE,download:HAS_OVERLOADED_BOOLEAN_VALUE,draggable:null,encType:null,form:MUST_USE_ATTRIBUTE,formAction:MUST_USE_ATTRIBUTE,formEncType:MUST_USE_ATTRIBUTE,formMethod:MUST_USE_ATTRIBUTE,formNoValidate:HAS_BOOLEAN_VALUE,formTarget:MUST_USE_ATTRIBUTE,frameBorder:MUST_USE_ATTRIBUTE,headers:null,height:MUST_USE_ATTRIBUTE,hidden:MUST_USE_ATTRIBUTE|HAS_BOOLEAN_VALUE,high:null,href:null,hrefLang:null,htmlFor:null,httpEquiv:null,icon:null,id:MUST_USE_PROPERTY,inputMode:MUST_USE_ATTRIBUTE,integrity:null,is:MUST_USE_ATTRIBUTE,keyParams:MUST_USE_ATTRIBUTE,keyType:MUST_USE_ATTRIBUTE,kind:null,label:null,lang:null,list:MUST_USE_ATTRIBUTE,loop:MUST_USE_PROPERTY|HAS_BOOLEAN_VALUE,low:null,manifest:MUST_USE_ATTRIBUTE,marginHeight:null,marginWidth:null,max:null,maxLength:MUST_USE_ATTRIBUTE,media:MUST_USE_ATTRIBUTE,mediaGroup:null,method:null,min:null,minLength:MUST_USE_ATTRIBUTE,multiple:MUST_USE_PROPERTY|HAS_BOOLEAN_VALUE,muted:MUST_USE_PROPERTY|HAS_BOOLEAN_VALUE,name:null,nonce:MUST_USE_ATTRIBUTE,noValidate:HAS_BOOLEAN_VALUE,open:HAS_BOOLEAN_VALUE,optimum:null,pattern:null,placeholder:null,poster:null,preload:null,radioGroup:null,readOnly:MUST_USE_PROPERTY|HAS_BOOLEAN_VALUE,rel:null,required:HAS_BOOLEAN_VALUE,reversed:HAS_BOOLEAN_VALUE,role:MUST_USE_ATTRIBUTE,rows:MUST_USE_ATTRIBUTE|HAS_POSITIVE_NUMERIC_VALUE,rowSpan:null,sandbox:null,scope:null,scoped:HAS_BOOLEAN_VALUE,scrolling:null,seamless:MUST_USE_ATTRIBUTE|HAS_BOOLEAN_VALUE,selected:MUST_USE_PROPERTY|HAS_BOOLEAN_VALUE,shape:null,size:MUST_USE_ATTRIBUTE|HAS_POSITIVE_NUMERIC_VALUE,sizes:MUST_USE_ATTRIBUTE,span:HAS_POSITIVE_NUMERIC_VALUE,spellCheck:null,src:null,srcDoc:MUST_USE_PROPERTY,srcLang:null,srcSet:MUST_USE_ATTRIBUTE,start:HAS_NUMERIC_VALUE,step:null,style:null,summary:null,tabIndex:null,target:null,title:null,type:null,useMap:null,value:MUST_USE_PROPERTY|HAS_SIDE_EFFECTS,width:MUST_USE_ATTRIBUTE,wmode:MUST_USE_ATTRIBUTE,wrap:null,about:MUST_USE_ATTRIBUTE,datatype:MUST_USE_ATTRIBUTE,inlist:MUST_USE_ATTRIBUTE,prefix:MUST_USE_ATTRIBUTE,property:MUST_USE_ATTRIBUTE,resource:MUST_USE_ATTRIBUTE,typeof:MUST_USE_ATTRIBUTE,vocab:MUST_USE_ATTRIBUTE,autoCapitalize:MUST_USE_ATTRIBUTE,autoCorrect:MUST_USE_ATTRIBUTE,autoSave:null,color:null,itemProp:MUST_USE_ATTRIBUTE,itemScope:MUST_USE_ATTRIBUTE|HAS_BOOLEAN_VALUE,itemType:MUST_USE_ATTRIBUTE,itemID:MUST_USE_ATTRIBUTE,itemRef:MUST_USE_ATTRIBUTE,results:null,security:MUST_USE_ATTRIBUTE,unselectable:MUST_USE_ATTRIBUTE},DOMAttributeNames:{acceptCharset:"accept-charset",className:"class",htmlFor:"for",httpEquiv:"http-equiv"},DOMPropertyNames:{autoComplete:"autocomplete",autoFocus:"autofocus",autoPlay:"autoplay",autoSave:"autosave",encType:"encoding",hrefLang:"hreflang",radioGroup:"radiogroup",spellCheck:"spellcheck",srcDoc:"srcdoc",srcSet:"srcset"}};module.exports=HTMLDOMPropertyConfig;

},{"./DOMProperty":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/DOMProperty.js","fbjs/lib/ExecutionEnvironment":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/ExecutionEnvironment.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/LinkedValueUtils.js":[function(require,module,exports){
"use strict";var ReactPropTypes=require("./ReactPropTypes"),ReactPropTypeLocations=require("./ReactPropTypeLocations"),invariant=require("fbjs/lib/invariant"),warning=require("fbjs/lib/warning"),hasReadOnlyValue={button:!0,checkbox:!0,image:!0,hidden:!0,radio:!0,reset:!0,submit:!0};function _assertSingleLink(e){null!=e.checkedLink&&null!=e.valueLink&&invariant(!1)}function _assertValueLink(e){_assertSingleLink(e),(null!=e.value||null!=e.onChange)&&invariant(!1)}function _assertCheckedLink(e){_assertSingleLink(e),(null!=e.checked||null!=e.onChange)&&invariant(!1)}var propTypes={value:function(e,n,a){return!e[n]||hasReadOnlyValue[e.type]||e.onChange||e.readOnly||e.disabled?null:new Error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.")},checked:function(e,n,a){return!e[n]||e.onChange||e.readOnly||e.disabled?null:new Error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.")},onChange:ReactPropTypes.func},loggedTypeFailures={};function getDeclarationErrorAddendum(e){if(e){var n=e.getName();if(n)return" Check the render method of `"+n+"`."}return""}var LinkedValueUtils={checkPropTypes:function(e,n,a){for(var r in propTypes){if(propTypes.hasOwnProperty(r))var i=propTypes[r](n,r,e,ReactPropTypeLocations.prop,null,"SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");if(i instanceof Error&&!(i.message in loggedTypeFailures)){loggedTypeFailures[i.message]=!0;getDeclarationErrorAddendum(a)}}},getValue:function(e){return e.valueLink?(_assertValueLink(e),e.valueLink.value):e.value},getChecked:function(e){return e.checkedLink?(_assertCheckedLink(e),e.checkedLink.value):e.checked},executeOnChange:function(e,n){return e.valueLink?(_assertValueLink(e),e.valueLink.requestChange(n.target.value)):e.checkedLink?(_assertCheckedLink(e),e.checkedLink.requestChange(n.target.checked)):e.onChange?e.onChange.call(void 0,n):void 0}};module.exports=LinkedValueUtils;

},{"./ReactPropTypeLocations":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactPropTypeLocations.js","./ReactPropTypes":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactPropTypes.js","fbjs/lib/invariant":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/invariant.js","fbjs/lib/warning":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/warning.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/Object.assign.js":[function(require,module,exports){
"use strict";function assign(r,e){if(null==r)throw new TypeError("Object.assign target cannot be null or undefined");for(var n=Object(r),t=Object.prototype.hasOwnProperty,o=1;o<arguments.length;o++){var a=arguments[o];if(null!=a){var l=Object(a);for(var s in l)t.call(l,s)&&(n[s]=l[s])}}return n}module.exports=assign;

},{}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/PooledClass.js":[function(require,module,exports){
"use strict";var invariant=require("fbjs/lib/invariant"),oneArgumentPooler=function(o){if(this.instancePool.length){var e=this.instancePool.pop();return this.call(e,o),e}return new this(o)},twoArgumentPooler=function(o,e){if(this.instancePool.length){var n=this.instancePool.pop();return this.call(n,o,e),n}return new this(o,e)},threeArgumentPooler=function(o,e,n){if(this.instancePool.length){var t=this.instancePool.pop();return this.call(t,o,e,n),t}return new this(o,e,n)},fourArgumentPooler=function(o,e,n,t){if(this.instancePool.length){var r=this.instancePool.pop();return this.call(r,o,e,n,t),r}return new this(o,e,n,t)},fiveArgumentPooler=function(o,e,n,t,r){if(this.instancePool.length){var i=this.instancePool.pop();return this.call(i,o,e,n,t,r),i}return new this(o,e,n,t,r)},standardReleaser=function(o){o instanceof this||invariant(!1),o.destructor(),this.instancePool.length<this.poolSize&&this.instancePool.push(o)},DEFAULT_POOL_SIZE=10,DEFAULT_POOLER=oneArgumentPooler,addPoolingTo=function(o,e){var n=o;return n.instancePool=[],n.getPooled=e||DEFAULT_POOLER,n.poolSize||(n.poolSize=DEFAULT_POOL_SIZE),n.release=standardReleaser,n},PooledClass={addPoolingTo:addPoolingTo,oneArgumentPooler:oneArgumentPooler,twoArgumentPooler:twoArgumentPooler,threeArgumentPooler:threeArgumentPooler,fourArgumentPooler:fourArgumentPooler,fiveArgumentPooler:fiveArgumentPooler};module.exports=PooledClass;

},{"fbjs/lib/invariant":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/invariant.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/React.js":[function(require,module,exports){
"use strict";var ReactDOM=require("./ReactDOM"),ReactDOMServer=require("./ReactDOMServer"),ReactIsomorphic=require("./ReactIsomorphic"),assign=require("./Object.assign"),deprecated=require("./deprecated"),React={};assign(React,ReactIsomorphic),assign(React,{findDOMNode:deprecated("findDOMNode","ReactDOM","react-dom",ReactDOM,ReactDOM.findDOMNode),render:deprecated("render","ReactDOM","react-dom",ReactDOM,ReactDOM.render),unmountComponentAtNode:deprecated("unmountComponentAtNode","ReactDOM","react-dom",ReactDOM,ReactDOM.unmountComponentAtNode),renderToString:deprecated("renderToString","ReactDOMServer","react-dom/server",ReactDOMServer,ReactDOMServer.renderToString),renderToStaticMarkup:deprecated("renderToStaticMarkup","ReactDOMServer","react-dom/server",ReactDOMServer,ReactDOMServer.renderToStaticMarkup)}),React.__SECRET_DOM_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=ReactDOM,React.__SECRET_DOM_SERVER_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=ReactDOMServer,module.exports=React;

},{"./Object.assign":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/Object.assign.js","./ReactDOM":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactDOM.js","./ReactDOMServer":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactDOMServer.js","./ReactIsomorphic":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactIsomorphic.js","./deprecated":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/deprecated.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactBrowserComponentMixin.js":[function(require,module,exports){
"use strict";var ReactInstanceMap=require("./ReactInstanceMap"),findDOMNode=require("./findDOMNode"),warning=require("fbjs/lib/warning"),didWarnKey="_getDOMNodeDidWarn",ReactBrowserComponentMixin={getDOMNode:function(){return this.constructor[didWarnKey]=!0,findDOMNode(this)}};module.exports=ReactBrowserComponentMixin;

},{"./ReactInstanceMap":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactInstanceMap.js","./findDOMNode":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/findDOMNode.js","fbjs/lib/warning":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/warning.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactBrowserEventEmitter.js":[function(require,module,exports){
"use strict";var EventConstants=require("./EventConstants"),EventPluginHub=require("./EventPluginHub"),EventPluginRegistry=require("./EventPluginRegistry"),ReactEventEmitterMixin=require("./ReactEventEmitterMixin"),ReactPerf=require("./ReactPerf"),ViewportMetrics=require("./ViewportMetrics"),assign=require("./Object.assign"),isEventSupported=require("./isEventSupported"),alreadyListeningTo={},isMonitoringScrollValue=!1,reactTopListenersCounter=0,topEventMapping={topAbort:"abort",topBlur:"blur",topCanPlay:"canplay",topCanPlayThrough:"canplaythrough",topChange:"change",topClick:"click",topCompositionEnd:"compositionend",topCompositionStart:"compositionstart",topCompositionUpdate:"compositionupdate",topContextMenu:"contextmenu",topCopy:"copy",topCut:"cut",topDoubleClick:"dblclick",topDrag:"drag",topDragEnd:"dragend",topDragEnter:"dragenter",topDragExit:"dragexit",topDragLeave:"dragleave",topDragOver:"dragover",topDragStart:"dragstart",topDrop:"drop",topDurationChange:"durationchange",topEmptied:"emptied",topEncrypted:"encrypted",topEnded:"ended",topError:"error",topFocus:"focus",topInput:"input",topKeyDown:"keydown",topKeyPress:"keypress",topKeyUp:"keyup",topLoadedData:"loadeddata",topLoadedMetadata:"loadedmetadata",topLoadStart:"loadstart",topMouseDown:"mousedown",topMouseMove:"mousemove",topMouseOut:"mouseout",topMouseOver:"mouseover",topMouseUp:"mouseup",topPaste:"paste",topPause:"pause",topPlay:"play",topPlaying:"playing",topProgress:"progress",topRateChange:"ratechange",topScroll:"scroll",topSeeked:"seeked",topSeeking:"seeking",topSelectionChange:"selectionchange",topStalled:"stalled",topSuspend:"suspend",topTextInput:"textInput",topTimeUpdate:"timeupdate",topTouchCancel:"touchcancel",topTouchEnd:"touchend",topTouchMove:"touchmove",topTouchStart:"touchstart",topVolumeChange:"volumechange",topWaiting:"waiting",topWheel:"wheel"},topListenersIDKey="_reactListenersID"+String(Math.random()).slice(2);function getListeningForDocument(e){return Object.prototype.hasOwnProperty.call(e,topListenersIDKey)||(e[topListenersIDKey]=reactTopListenersCounter++,alreadyListeningTo[e[topListenersIDKey]]={}),alreadyListeningTo[e[topListenersIDKey]]}var ReactBrowserEventEmitter=assign({},ReactEventEmitterMixin,{ReactEventListener:null,injection:{injectReactEventListener:function(e){e.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel),ReactBrowserEventEmitter.ReactEventListener=e}},setEnabled:function(e){ReactBrowserEventEmitter.ReactEventListener&&ReactBrowserEventEmitter.ReactEventListener.setEnabled(e)},isEnabled:function(){return!(!ReactBrowserEventEmitter.ReactEventListener||!ReactBrowserEventEmitter.ReactEventListener.isEnabled())},listenTo:function(e,t){for(var r=t,n=getListeningForDocument(r),o=EventPluginRegistry.registrationNameDependencies[e],a=EventConstants.topLevelTypes,i=0;i<o.length;i++){var s=o[i];n.hasOwnProperty(s)&&n[s]||(s===a.topWheel?isEventSupported("wheel")?ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(a.topWheel,"wheel",r):isEventSupported("mousewheel")?ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(a.topWheel,"mousewheel",r):ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(a.topWheel,"DOMMouseScroll",r):s===a.topScroll?isEventSupported("scroll",!0)?ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(a.topScroll,"scroll",r):ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(a.topScroll,"scroll",ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE):s===a.topFocus||s===a.topBlur?(isEventSupported("focus",!0)?(ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(a.topFocus,"focus",r),ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(a.topBlur,"blur",r)):isEventSupported("focusin")&&(ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(a.topFocus,"focusin",r),ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(a.topBlur,"focusout",r)),n[a.topBlur]=!0,n[a.topFocus]=!0):topEventMapping.hasOwnProperty(s)&&ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(s,topEventMapping[s],r),n[s]=!0)}},trapBubbledEvent:function(e,t,r){return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(e,t,r)},trapCapturedEvent:function(e,t,r){return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(e,t,r)},ensureScrollValueMonitoring:function(){if(!isMonitoringScrollValue){var e=ViewportMetrics.refreshScrollValues;ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(e),isMonitoringScrollValue=!0}},eventNameDispatchConfigs:EventPluginHub.eventNameDispatchConfigs,registrationNameModules:EventPluginHub.registrationNameModules,putListener:EventPluginHub.putListener,getListener:EventPluginHub.getListener,deleteListener:EventPluginHub.deleteListener,deleteAllListeners:EventPluginHub.deleteAllListeners});ReactPerf.measureMethods(ReactBrowserEventEmitter,"ReactBrowserEventEmitter",{putListener:"putListener",deleteListener:"deleteListener"}),module.exports=ReactBrowserEventEmitter;

},{"./EventConstants":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/EventConstants.js","./EventPluginHub":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/EventPluginHub.js","./EventPluginRegistry":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/EventPluginRegistry.js","./Object.assign":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/Object.assign.js","./ReactEventEmitterMixin":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactEventEmitterMixin.js","./ReactPerf":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactPerf.js","./ViewportMetrics":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ViewportMetrics.js","./isEventSupported":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/isEventSupported.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactChildReconciler.js":[function(require,module,exports){
"use strict";var ReactReconciler=require("./ReactReconciler"),instantiateReactComponent=require("./instantiateReactComponent"),shouldUpdateReactComponent=require("./shouldUpdateReactComponent"),traverseAllChildren=require("./traverseAllChildren"),warning=require("fbjs/lib/warning");function instantiateChild(e,n,t){var r=void 0===e[t];null!=n&&r&&(e[t]=instantiateReactComponent(n,null))}var ReactChildReconciler={instantiateChildren:function(e,n,t){if(null==e)return null;var r={};return traverseAllChildren(e,instantiateChild,r),r},updateChildren:function(e,n,t,r){if(!n&&!e)return null;var i;for(i in n)if(n.hasOwnProperty(i)){var a=e&&e[i],o=a&&a._currentElement,l=n[i];if(null!=a&&shouldUpdateReactComponent(o,l))ReactReconciler.receiveComponent(a,l,t,r),n[i]=a;else{a&&ReactReconciler.unmountComponent(a,i);var c=instantiateReactComponent(l,null);n[i]=c}}for(i in e)!e.hasOwnProperty(i)||n&&n.hasOwnProperty(i)||ReactReconciler.unmountComponent(e[i]);return n},unmountChildren:function(e){for(var n in e)if(e.hasOwnProperty(n)){var t=e[n];ReactReconciler.unmountComponent(t)}}};module.exports=ReactChildReconciler;

},{"./ReactReconciler":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactReconciler.js","./instantiateReactComponent":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/instantiateReactComponent.js","./shouldUpdateReactComponent":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/shouldUpdateReactComponent.js","./traverseAllChildren":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/traverseAllChildren.js","fbjs/lib/warning":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/warning.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactChildren.js":[function(require,module,exports){
"use strict";var PooledClass=require("./PooledClass"),ReactElement=require("./ReactElement"),emptyFunction=require("fbjs/lib/emptyFunction"),traverseAllChildren=require("./traverseAllChildren"),twoArgumentPooler=PooledClass.twoArgumentPooler,fourArgumentPooler=PooledClass.fourArgumentPooler,userProvidedKeyEscapeRegex=/\/(?!\/)/g;function escapeUserProvidedKey(e){return(""+e).replace(userProvidedKeyEscapeRegex,"//")}function ForEachBookKeeping(e,n){this.func=e,this.context=n,this.count=0}function forEachSingleChild(e,n,t){var r=e.func,o=e.context;r.call(o,n,e.count++)}function forEachChildren(e,n,t){if(null==e)return e;var r=ForEachBookKeeping.getPooled(n,t);traverseAllChildren(e,forEachSingleChild,r),ForEachBookKeeping.release(r)}function MapBookKeeping(e,n,t,r){this.result=e,this.keyPrefix=n,this.func=t,this.context=r,this.count=0}function mapSingleChildIntoContext(e,n,t){var r=e.result,o=e.keyPrefix,l=e.func,i=e.context,u=l.call(i,n,e.count++);Array.isArray(u)?mapIntoWithKeyPrefixInternal(u,r,t,emptyFunction.thatReturnsArgument):null!=u&&(ReactElement.isValidElement(u)&&(u=ReactElement.cloneAndReplaceKey(u,o+(u!==n?escapeUserProvidedKey(u.key||"")+"/":"")+t)),r.push(u))}function mapIntoWithKeyPrefixInternal(e,n,t,r,o){var l="";null!=t&&(l=escapeUserProvidedKey(t)+"/");var i=MapBookKeeping.getPooled(n,l,r,o);traverseAllChildren(e,mapSingleChildIntoContext,i),MapBookKeeping.release(i)}function mapChildren(e,n,t){if(null==e)return e;var r=[];return mapIntoWithKeyPrefixInternal(e,r,null,n,t),r}function forEachSingleChildDummy(e,n,t){return null}function countChildren(e,n){return traverseAllChildren(e,forEachSingleChildDummy,null)}function toArray(e){var n=[];return mapIntoWithKeyPrefixInternal(e,n,null,emptyFunction.thatReturnsArgument),n}ForEachBookKeeping.prototype.destructor=function(){this.func=null,this.context=null,this.count=0},PooledClass.addPoolingTo(ForEachBookKeeping,twoArgumentPooler),MapBookKeeping.prototype.destructor=function(){this.result=null,this.keyPrefix=null,this.func=null,this.context=null,this.count=0},PooledClass.addPoolingTo(MapBookKeeping,fourArgumentPooler);var ReactChildren={forEach:forEachChildren,map:mapChildren,mapIntoWithKeyPrefixInternal:mapIntoWithKeyPrefixInternal,count:countChildren,toArray:toArray};module.exports=ReactChildren;

},{"./PooledClass":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/PooledClass.js","./ReactElement":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactElement.js","./traverseAllChildren":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/traverseAllChildren.js","fbjs/lib/emptyFunction":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/emptyFunction.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactClass.js":[function(require,module,exports){
"use strict";var ReactComponent=require("./ReactComponent"),ReactElement=require("./ReactElement"),ReactPropTypeLocations=require("./ReactPropTypeLocations"),ReactPropTypeLocationNames=require("./ReactPropTypeLocationNames"),ReactNoopUpdateQueue=require("./ReactNoopUpdateQueue"),assign=require("./Object.assign"),emptyObject=require("fbjs/lib/emptyObject"),invariant=require("fbjs/lib/invariant"),keyMirror=require("fbjs/lib/keyMirror"),keyOf=require("fbjs/lib/keyOf"),warning=require("fbjs/lib/warning"),MIXINS_KEY=keyOf({mixins:null}),SpecPolicy=keyMirror({DEFINE_ONCE:null,DEFINE_MANY:null,OVERRIDE_BASE:null,DEFINE_MANY_MERGED:null}),injectedMixins=[],warnedSetProps=!1;function warnSetProps(){warnedSetProps||(warnedSetProps=!0)}var ReactClassInterface={mixins:SpecPolicy.DEFINE_MANY,statics:SpecPolicy.DEFINE_MANY,propTypes:SpecPolicy.DEFINE_MANY,contextTypes:SpecPolicy.DEFINE_MANY,childContextTypes:SpecPolicy.DEFINE_MANY,getDefaultProps:SpecPolicy.DEFINE_MANY_MERGED,getInitialState:SpecPolicy.DEFINE_MANY_MERGED,getChildContext:SpecPolicy.DEFINE_MANY_MERGED,render:SpecPolicy.DEFINE_ONCE,componentWillMount:SpecPolicy.DEFINE_MANY,componentDidMount:SpecPolicy.DEFINE_MANY,componentWillReceiveProps:SpecPolicy.DEFINE_MANY,shouldComponentUpdate:SpecPolicy.DEFINE_ONCE,componentWillUpdate:SpecPolicy.DEFINE_MANY,componentDidUpdate:SpecPolicy.DEFINE_MANY,componentWillUnmount:SpecPolicy.DEFINE_MANY,updateComponent:SpecPolicy.OVERRIDE_BASE},RESERVED_SPEC_KEYS={displayName:function(e,t){e.displayName=t},mixins:function(e,t){if(t)for(var n=0;n<t.length;n++)mixSpecIntoComponent(e,t[n])},childContextTypes:function(e,t){e.childContextTypes=assign({},e.childContextTypes,t)},contextTypes:function(e,t){e.contextTypes=assign({},e.contextTypes,t)},getDefaultProps:function(e,t){e.getDefaultProps?e.getDefaultProps=createMergedResultFunction(e.getDefaultProps,t):e.getDefaultProps=t},propTypes:function(e,t){e.propTypes=assign({},e.propTypes,t)},statics:function(e,t){mixStaticSpecIntoComponent(e,t)},autobind:function(){}};function validateTypeDef(e,t,n){for(var i in t)t.hasOwnProperty(i)}function validateMethodOverride(e,t){var n=ReactClassInterface.hasOwnProperty(t)?ReactClassInterface[t]:null;ReactClassMixin.hasOwnProperty(t)&&n!==SpecPolicy.OVERRIDE_BASE&&invariant(!1),e.hasOwnProperty(t)&&n!==SpecPolicy.DEFINE_MANY&&n!==SpecPolicy.DEFINE_MANY_MERGED&&invariant(!1)}function mixSpecIntoComponent(e,t){if(t){"function"==typeof t&&invariant(!1),ReactElement.isValidElement(t)&&invariant(!1);var n=e.prototype;for(var i in t.hasOwnProperty(MIXINS_KEY)&&RESERVED_SPEC_KEYS.mixins(e,t.mixins),t)if(t.hasOwnProperty(i)&&i!==MIXINS_KEY){var o=t[i];if(validateMethodOverride(n,i),RESERVED_SPEC_KEYS.hasOwnProperty(i))RESERVED_SPEC_KEYS[i](e,o);else{var a=ReactClassInterface.hasOwnProperty(i),r=n.hasOwnProperty(i);if("function"==typeof o&&!a&&!r&&!1!==t.autobind)n.__reactAutoBindMap||(n.__reactAutoBindMap={}),n.__reactAutoBindMap[i]=o,n[i]=o;else if(r){var c=ReactClassInterface[i];(!a||c!==SpecPolicy.DEFINE_MANY_MERGED&&c!==SpecPolicy.DEFINE_MANY)&&invariant(!1),c===SpecPolicy.DEFINE_MANY_MERGED?n[i]=createMergedResultFunction(n[i],o):c===SpecPolicy.DEFINE_MANY&&(n[i]=createChainedFunction(n[i],o))}else n[i]=o}}}}function mixStaticSpecIntoComponent(e,t){if(t)for(var n in t){var i=t[n];if(t.hasOwnProperty(n))n in RESERVED_SPEC_KEYS&&invariant(!1),n in e&&invariant(!1),e[n]=i}}function mergeIntoWithNoDuplicateKeys(e,t){for(var n in e&&t&&"object"==typeof e&&"object"==typeof t||invariant(!1),t)t.hasOwnProperty(n)&&(void 0!==e[n]&&invariant(!1),e[n]=t[n]);return e}function createMergedResultFunction(e,t){return function(){var n=e.apply(this,arguments),i=t.apply(this,arguments);if(null==n)return i;if(null==i)return n;var o={};return mergeIntoWithNoDuplicateKeys(o,n),mergeIntoWithNoDuplicateKeys(o,i),o}}function createChainedFunction(e,t){return function(){e.apply(this,arguments),t.apply(this,arguments)}}function bindAutoBindMethod(e,t){var n=t.bind(e);return n}function bindAutoBindMethods(e){for(var t in e.__reactAutoBindMap)if(e.__reactAutoBindMap.hasOwnProperty(t)){var n=e.__reactAutoBindMap[t];e[t]=bindAutoBindMethod(e,n)}}var ReactClassMixin={replaceState:function(e,t){this.updater.enqueueReplaceState(this,e),t&&this.updater.enqueueCallback(this,t)},isMounted:function(){return this.updater.isMounted(this)},setProps:function(e,t){this.updater.enqueueSetProps(this,e),t&&this.updater.enqueueCallback(this,t)},replaceProps:function(e,t){this.updater.enqueueReplaceProps(this,e),t&&this.updater.enqueueCallback(this,t)}},ReactClassComponent=function(){};assign(ReactClassComponent.prototype,ReactComponent.prototype,ReactClassMixin);var ReactClass={createClass:function(e){var t=function(e,t,n){this.__reactAutoBindMap&&bindAutoBindMethods(this),this.props=e,this.context=t,this.refs=emptyObject,this.updater=n||ReactNoopUpdateQueue,this.state=null;var i=this.getInitialState?this.getInitialState():null;("object"!=typeof i||Array.isArray(i))&&invariant(!1),this.state=i};for(var n in t.prototype=new ReactClassComponent,t.prototype.constructor=t,injectedMixins.forEach(mixSpecIntoComponent.bind(null,t)),mixSpecIntoComponent(t,e),t.getDefaultProps&&(t.defaultProps=t.getDefaultProps()),t.prototype.render||invariant(!1),ReactClassInterface)t.prototype[n]||(t.prototype[n]=null);return t},injection:{injectMixin:function(e){injectedMixins.push(e)}}};module.exports=ReactClass;

},{"./Object.assign":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/Object.assign.js","./ReactComponent":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactComponent.js","./ReactElement":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactElement.js","./ReactNoopUpdateQueue":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactNoopUpdateQueue.js","./ReactPropTypeLocationNames":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactPropTypeLocationNames.js","./ReactPropTypeLocations":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactPropTypeLocations.js","fbjs/lib/emptyObject":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/emptyObject.js","fbjs/lib/invariant":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/invariant.js","fbjs/lib/keyMirror":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/keyMirror.js","fbjs/lib/keyOf":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/keyOf.js","fbjs/lib/warning":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/warning.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactComponent.js":[function(require,module,exports){
"use strict";var deprecatedAPIs,defineDeprecationWarning,fnName,ReactNoopUpdateQueue=require("./ReactNoopUpdateQueue"),canDefineProperty=require("./canDefineProperty"),emptyObject=require("fbjs/lib/emptyObject"),invariant=require("fbjs/lib/invariant"),warning=require("fbjs/lib/warning");function ReactComponent(e,t,n){this.props=e,this.context=t,this.refs=emptyObject,this.updater=n||ReactNoopUpdateQueue}ReactComponent.prototype.isReactComponent={},ReactComponent.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e&&invariant(!1),this.updater.enqueueSetState(this,e),t&&this.updater.enqueueCallback(this,t)},ReactComponent.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this),e&&this.updater.enqueueCallback(this,e)},module.exports=ReactComponent;

},{"./ReactNoopUpdateQueue":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactNoopUpdateQueue.js","./canDefineProperty":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/canDefineProperty.js","fbjs/lib/emptyObject":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/emptyObject.js","fbjs/lib/invariant":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/invariant.js","fbjs/lib/warning":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/warning.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactComponentBrowserEnvironment.js":[function(require,module,exports){
"use strict";var ReactDOMIDOperations=require("./ReactDOMIDOperations"),ReactMount=require("./ReactMount"),ReactComponentBrowserEnvironment={processChildrenUpdates:ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,replaceNodeWithMarkupByID:ReactDOMIDOperations.dangerouslyReplaceNodeWithMarkupByID,unmountIDFromEnvironment:function(e){ReactMount.purgeID(e)}};module.exports=ReactComponentBrowserEnvironment;

},{"./ReactDOMIDOperations":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactDOMIDOperations.js","./ReactMount":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactMount.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactComponentEnvironment.js":[function(require,module,exports){
"use strict";var invariant=require("fbjs/lib/invariant"),injected=!1,ReactComponentEnvironment={unmountIDFromEnvironment:null,replaceNodeWithMarkupByID:null,processChildrenUpdates:null,injection:{injectEnvironment:function(n){injected&&invariant(!1),ReactComponentEnvironment.unmountIDFromEnvironment=n.unmountIDFromEnvironment,ReactComponentEnvironment.replaceNodeWithMarkupByID=n.replaceNodeWithMarkupByID,ReactComponentEnvironment.processChildrenUpdates=n.processChildrenUpdates,injected=!0}}};module.exports=ReactComponentEnvironment;

},{"fbjs/lib/invariant":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/invariant.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactCompositeComponent.js":[function(require,module,exports){
"use strict";var ReactComponentEnvironment=require("./ReactComponentEnvironment"),ReactCurrentOwner=require("./ReactCurrentOwner"),ReactElement=require("./ReactElement"),ReactInstanceMap=require("./ReactInstanceMap"),ReactPerf=require("./ReactPerf"),ReactPropTypeLocations=require("./ReactPropTypeLocations"),ReactPropTypeLocationNames=require("./ReactPropTypeLocationNames"),ReactReconciler=require("./ReactReconciler"),ReactUpdateQueue=require("./ReactUpdateQueue"),assign=require("./Object.assign"),emptyObject=require("fbjs/lib/emptyObject"),invariant=require("fbjs/lib/invariant"),shouldUpdateReactComponent=require("./shouldUpdateReactComponent"),warning=require("fbjs/lib/warning");function getDeclarationErrorAddendum(e){var t=e._currentElement._owner||null;if(t){var n=t.getName();if(n)return" Check the render method of `"+n+"`."}return""}function StatelessComponent(e){}StatelessComponent.prototype.render=function(){return(0,ReactInstanceMap.get(this)._currentElement.type)(this.props,this.context,this.updater)};var nextMountID=1,ReactCompositeComponentMixin={construct:function(e){this._currentElement=e,this._rootNodeID=null,this._instance=null,this._pendingElement=null,this._pendingStateQueue=null,this._pendingReplaceState=!1,this._pendingForceUpdate=!1,this._renderedComponent=null,this._context=null,this._mountOrder=0,this._topLevelWrapper=null,this._pendingCallbacks=null},mountComponent:function(e,t,n){this._context=n,this._mountOrder=nextMountID++,this._rootNodeID=e;var o,i,r=this._processProps(this._currentElement.props),a=this._processContext(n),s=this._currentElement.type,c="prototype"in s;c&&(o=new s(r,a,ReactUpdateQueue)),c&&null!==o&&!1!==o&&!ReactElement.isValidElement(o)||(i=o,o=new StatelessComponent(s)),o.props=r,o.context=a,o.refs=emptyObject,o.updater=ReactUpdateQueue,this._instance=o,ReactInstanceMap.set(o,this);var p=o.state;void 0===p&&(o.state=p=null),("object"!=typeof p||Array.isArray(p))&&invariant(!1),this._pendingStateQueue=null,this._pendingReplaceState=!1,this._pendingForceUpdate=!1,o.componentWillMount&&(o.componentWillMount(),this._pendingStateQueue&&(o.state=this._processPendingState(o.props,o.context))),void 0===i&&(i=this._renderValidatedComponent()),this._renderedComponent=this._instantiateReactComponent(i);var u=ReactReconciler.mountComponent(this._renderedComponent,e,t,this._processChildContext(n));return o.componentDidMount&&t.getReactMountReady().enqueue(o.componentDidMount,o),u},unmountComponent:function(){var e=this._instance;e.componentWillUnmount&&e.componentWillUnmount(),ReactReconciler.unmountComponent(this._renderedComponent),this._renderedComponent=null,this._instance=null,this._pendingStateQueue=null,this._pendingReplaceState=!1,this._pendingForceUpdate=!1,this._pendingCallbacks=null,this._pendingElement=null,this._context=null,this._rootNodeID=null,this._topLevelWrapper=null,ReactInstanceMap.remove(e)},_maskContext:function(e){var t=null,n=this._currentElement.type.contextTypes;if(!n)return emptyObject;for(var o in t={},n)t[o]=e[o];return t},_processContext:function(e){var t=this._maskContext(e);return t},_processChildContext:function(e){var t=this._currentElement.type,n=this._instance,o=n.getChildContext&&n.getChildContext();if(o){for(var i in"object"!=typeof t.childContextTypes&&invariant(!1),o)i in t.childContextTypes||invariant(!1);return assign({},e,o)}return e},_processProps:function(e){return e},_checkPropTypes:function(e,t,n){var o=this.getName();for(var i in e)if(e.hasOwnProperty(i)){var r;try{"function"!=typeof e[i]&&invariant(!1),r=e[i](t,i,o,n,null,"SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED")}catch(e){r=e}if(r instanceof Error){getDeclarationErrorAddendum(this);ReactPropTypeLocations.prop}}},receiveComponent:function(e,t,n){var o=this._currentElement,i=this._context;this._pendingElement=null,this.updateComponent(t,o,e,i,n)},performUpdateIfNecessary:function(e){null!=this._pendingElement&&ReactReconciler.receiveComponent(this,this._pendingElement||this._currentElement,e,this._context),(null!==this._pendingStateQueue||this._pendingForceUpdate)&&this.updateComponent(e,this._currentElement,this._currentElement,this._context,this._context)},updateComponent:function(e,t,n,o,i){var r,a=this._instance,s=this._context===i?a.context:this._processContext(i);t===n?r=n.props:(r=this._processProps(n.props),a.componentWillReceiveProps&&a.componentWillReceiveProps(r,s));var c=this._processPendingState(r,s),p=this._pendingForceUpdate||!a.shouldComponentUpdate||a.shouldComponentUpdate(r,c,s);p?(this._pendingForceUpdate=!1,this._performComponentUpdate(n,r,c,s,e,i)):(this._currentElement=n,this._context=i,a.props=r,a.state=c,a.context=s)},_processPendingState:function(e,t){var n=this._instance,o=this._pendingStateQueue,i=this._pendingReplaceState;if(this._pendingReplaceState=!1,this._pendingStateQueue=null,!o)return n.state;if(i&&1===o.length)return o[0];for(var r=assign({},i?o[0]:n.state),a=i?1:0;a<o.length;a++){var s=o[a];assign(r,"function"==typeof s?s.call(n,r,e,t):s)}return r},_performComponentUpdate:function(e,t,n,o,i,r){var a,s,c,p=this._instance,u=Boolean(p.componentDidUpdate);u&&(a=p.props,s=p.state,c=p.context),p.componentWillUpdate&&p.componentWillUpdate(t,n,o),this._currentElement=e,this._context=r,p.props=t,p.state=n,p.context=o,this._updateRenderedComponent(i,r),u&&i.getReactMountReady().enqueue(p.componentDidUpdate.bind(p,a,s,c),p)},_updateRenderedComponent:function(e,t){var n=this._renderedComponent,o=n._currentElement,i=this._renderValidatedComponent();if(shouldUpdateReactComponent(o,i))ReactReconciler.receiveComponent(n,i,e,this._processChildContext(t));else{var r=this._rootNodeID,a=n._rootNodeID;ReactReconciler.unmountComponent(n),this._renderedComponent=this._instantiateReactComponent(i);var s=ReactReconciler.mountComponent(this._renderedComponent,r,e,this._processChildContext(t));this._replaceNodeWithMarkupByID(a,s)}},_replaceNodeWithMarkupByID:function(e,t){ReactComponentEnvironment.replaceNodeWithMarkupByID(e,t)},_renderValidatedComponentWithoutOwnerOrContext:function(){var e=this._instance,t=e.render();return t},_renderValidatedComponent:function(){var e;ReactCurrentOwner.current=this;try{e=this._renderValidatedComponentWithoutOwnerOrContext()}finally{ReactCurrentOwner.current=null}return null===e||!1===e||ReactElement.isValidElement(e)||invariant(!1),e},attachRef:function(e,t){var n=this.getPublicInstance();null==n&&invariant(!1);var o=t.getPublicInstance();(n.refs===emptyObject?n.refs={}:n.refs)[e]=o},detachRef:function(e){delete this.getPublicInstance().refs[e]},getName:function(){var e=this._currentElement.type,t=this._instance&&this._instance.constructor;return e.displayName||t&&t.displayName||e.name||t&&t.name||null},getPublicInstance:function(){var e=this._instance;return e instanceof StatelessComponent?null:e},_instantiateReactComponent:null};ReactPerf.measureMethods(ReactCompositeComponentMixin,"ReactCompositeComponent",{mountComponent:"mountComponent",updateComponent:"updateComponent",_renderValidatedComponent:"_renderValidatedComponent"});var ReactCompositeComponent={Mixin:ReactCompositeComponentMixin};module.exports=ReactCompositeComponent;

},{"./Object.assign":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/Object.assign.js","./ReactComponentEnvironment":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactComponentEnvironment.js","./ReactCurrentOwner":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactCurrentOwner.js","./ReactElement":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactElement.js","./ReactInstanceMap":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactInstanceMap.js","./ReactPerf":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactPerf.js","./ReactPropTypeLocationNames":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactPropTypeLocationNames.js","./ReactPropTypeLocations":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactPropTypeLocations.js","./ReactReconciler":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactReconciler.js","./ReactUpdateQueue":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactUpdateQueue.js","./shouldUpdateReactComponent":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/shouldUpdateReactComponent.js","fbjs/lib/emptyObject":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/emptyObject.js","fbjs/lib/invariant":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/invariant.js","fbjs/lib/warning":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/warning.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactCurrentOwner.js":[function(require,module,exports){
"use strict";var ReactCurrentOwner={current:null};module.exports=ReactCurrentOwner;

},{}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactDOM.js":[function(require,module,exports){
"use strict";var ReactCurrentOwner=require("./ReactCurrentOwner"),ReactDOMTextComponent=require("./ReactDOMTextComponent"),ReactDefaultInjection=require("./ReactDefaultInjection"),ReactInstanceHandles=require("./ReactInstanceHandles"),ReactMount=require("./ReactMount"),ReactPerf=require("./ReactPerf"),ReactReconciler=require("./ReactReconciler"),ReactUpdates=require("./ReactUpdates"),ReactVersion=require("./ReactVersion"),findDOMNode=require("./findDOMNode"),renderSubtreeIntoContainer=require("./renderSubtreeIntoContainer"),warning=require("fbjs/lib/warning");ReactDefaultInjection.inject();var ExecutionEnvironment,ieCompatibilityMode,expectedFeatures,i,render=ReactPerf.measure("React","render",ReactMount.render),React={findDOMNode:findDOMNode,render:render,unmountComponentAtNode:ReactMount.unmountComponentAtNode,version:ReactVersion,unstable_batchedUpdates:ReactUpdates.batchedUpdates,unstable_renderSubtreeIntoContainer:renderSubtreeIntoContainer};"undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject&&__REACT_DEVTOOLS_GLOBAL_HOOK__.inject({CurrentOwner:ReactCurrentOwner,InstanceHandles:ReactInstanceHandles,Mount:ReactMount,Reconciler:ReactReconciler,TextComponent:ReactDOMTextComponent}),module.exports=React;

},{"./ReactCurrentOwner":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactCurrentOwner.js","./ReactDOMTextComponent":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactDOMTextComponent.js","./ReactDefaultInjection":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactDefaultInjection.js","./ReactInstanceHandles":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactInstanceHandles.js","./ReactMount":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactMount.js","./ReactPerf":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactPerf.js","./ReactReconciler":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactReconciler.js","./ReactUpdates":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactUpdates.js","./ReactVersion":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactVersion.js","./findDOMNode":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/findDOMNode.js","./renderSubtreeIntoContainer":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/renderSubtreeIntoContainer.js","fbjs/lib/warning":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/warning.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactDOMButton.js":[function(require,module,exports){
"use strict";var mouseListenerNames={onClick:!0,onDoubleClick:!0,onMouseDown:!0,onMouseMove:!0,onMouseUp:!0,onClickCapture:!0,onDoubleClickCapture:!0,onMouseDownCapture:!0,onMouseMoveCapture:!0,onMouseUpCapture:!0},ReactDOMButton={getNativeProps:function(e,o,n){if(!o.disabled)return o;var t={};for(var u in o)o.hasOwnProperty(u)&&!mouseListenerNames[u]&&(t[u]=o[u]);return t}};module.exports=ReactDOMButton;

},{}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactDOMComponent.js":[function(require,module,exports){
"use strict";var legacyPropsDescriptor,AutoFocusUtils=require("./AutoFocusUtils"),CSSPropertyOperations=require("./CSSPropertyOperations"),DOMProperty=require("./DOMProperty"),DOMPropertyOperations=require("./DOMPropertyOperations"),EventConstants=require("./EventConstants"),ReactBrowserEventEmitter=require("./ReactBrowserEventEmitter"),ReactComponentBrowserEnvironment=require("./ReactComponentBrowserEnvironment"),ReactDOMButton=require("./ReactDOMButton"),ReactDOMInput=require("./ReactDOMInput"),ReactDOMOption=require("./ReactDOMOption"),ReactDOMSelect=require("./ReactDOMSelect"),ReactDOMTextarea=require("./ReactDOMTextarea"),ReactMount=require("./ReactMount"),ReactMultiChild=require("./ReactMultiChild"),ReactPerf=require("./ReactPerf"),ReactUpdateQueue=require("./ReactUpdateQueue"),assign=require("./Object.assign"),canDefineProperty=require("./canDefineProperty"),escapeTextContentForBrowser=require("./escapeTextContentForBrowser"),invariant=require("fbjs/lib/invariant"),isEventSupported=require("./isEventSupported"),keyOf=require("fbjs/lib/keyOf"),setInnerHTML=require("./setInnerHTML"),setTextContent=require("./setTextContent"),shallowEqual=require("fbjs/lib/shallowEqual"),validateDOMNesting=require("./validateDOMNesting"),warning=require("fbjs/lib/warning"),deleteListener=ReactBrowserEventEmitter.deleteListener,listenTo=ReactBrowserEventEmitter.listenTo,registrationNameModules=ReactBrowserEventEmitter.registrationNameModules,CONTENT_TYPES={string:!0,number:!0},CHILDREN=keyOf({children:null}),STYLE=keyOf({style:null}),HTML=keyOf({__html:null}),ELEMENT_NODE_TYPE=1;function getDeclarationErrorAddendum(e){if(e){var t=e._currentElement._owner||null;if(t){var r=t.getName();if(r)return" This DOM node was rendered by `"+r+"`."}}return""}function legacyGetDOMNode(){return this}function legacyIsMounted(){var e=this._reactInternalComponent;return!!e}function legacySetStateEtc(){}function legacySetProps(e,t){var r=this._reactInternalComponent;r&&(ReactUpdateQueue.enqueueSetPropsInternal(r,e),t&&ReactUpdateQueue.enqueueCallbackInternal(r,t))}function legacyReplaceProps(e,t){var r=this._reactInternalComponent;r&&(ReactUpdateQueue.enqueueReplacePropsInternal(r,e),t&&ReactUpdateQueue.enqueueCallbackInternal(r,t))}function friendlyStringify(e){if("object"==typeof e){if(Array.isArray(e))return"["+e.map(friendlyStringify).join(", ")+"]";var t=[];for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var n=/^[a-z$_][\w$_]*$/i.test(r)?r:JSON.stringify(r);t.push(n+": "+friendlyStringify(e[r]))}return"{"+t.join(", ")+"}"}return"string"==typeof e?JSON.stringify(e):"function"==typeof e?"[function object]":String(e)}var styleMutationWarning={};function checkAndWarnForMutatedStyle(e,t,r){if(null!=e&&null!=t&&!shallowEqual(e,t)){var n,a=r._tag,o=r._currentElement._owner;o&&(n=o.getName());var i=n+"|"+a;styleMutationWarning.hasOwnProperty(i)||(styleMutationWarning[i]=!0)}}function assertValidProps(e,t){t&&(null!=t.dangerouslySetInnerHTML&&(null!=t.children&&invariant(!1),"object"==typeof t.dangerouslySetInnerHTML&&HTML in t.dangerouslySetInnerHTML||invariant(!1)),null!=t.style&&"object"!=typeof t.style&&invariant(!1))}function enqueuePutListener(e,t,r,n){var a=ReactMount.findReactContainerForID(e);if(a){var o=a.nodeType===ELEMENT_NODE_TYPE?a.ownerDocument:a;listenTo(t,o)}n.getReactMountReady().enqueue(putListener,{id:e,registrationName:t,listener:r})}function putListener(){ReactBrowserEventEmitter.putListener(this.id,this.registrationName,this.listener)}var mediaEvents={topAbort:"abort",topCanPlay:"canplay",topCanPlayThrough:"canplaythrough",topDurationChange:"durationchange",topEmptied:"emptied",topEncrypted:"encrypted",topEnded:"ended",topError:"error",topLoadedData:"loadeddata",topLoadedMetadata:"loadedmetadata",topLoadStart:"loadstart",topPause:"pause",topPlay:"play",topPlaying:"playing",topProgress:"progress",topRateChange:"ratechange",topSeeked:"seeked",topSeeking:"seeking",topStalled:"stalled",topSuspend:"suspend",topTimeUpdate:"timeupdate",topVolumeChange:"volumechange",topWaiting:"waiting"};function trapBubbledEventsLocal(){this._rootNodeID||invariant(!1);var e=ReactMount.getNode(this._rootNodeID);switch(e||invariant(!1),this._tag){case"iframe":this._wrapperState.listeners=[ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad,"load",e)];break;case"video":case"audio":for(var t in this._wrapperState.listeners=[],mediaEvents)mediaEvents.hasOwnProperty(t)&&this._wrapperState.listeners.push(ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes[t],mediaEvents[t],e));break;case"img":this._wrapperState.listeners=[ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topError,"error",e),ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad,"load",e)];break;case"form":this._wrapperState.listeners=[ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topReset,"reset",e),ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit,"submit",e)]}}function mountReadyInputWrapper(){ReactDOMInput.mountReadyWrapper(this)}function postUpdateSelectWrapper(){ReactDOMSelect.postUpdateWrapper(this)}var omittedCloseTags={area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0},newlineEatingTags={listing:!0,pre:!0,textarea:!0},voidElementTags=assign({menuitem:!0},omittedCloseTags),VALID_TAG_REGEX=/^[a-zA-Z][a-zA-Z:_\.\-\d]*$/,validatedTagCache={},hasOwnProperty={}.hasOwnProperty;function validateDangerousTag(e){hasOwnProperty.call(validatedTagCache,e)||(VALID_TAG_REGEX.test(e)||invariant(!1),validatedTagCache[e]=!0)}function processChildContextDev(e,t){var r=(e=assign({},e))[validateDOMNesting.ancestorInfoContextKey];return e[validateDOMNesting.ancestorInfoContextKey]=validateDOMNesting.updatedAncestorInfo(r,t._tag,t),e}function isCustomComponent(e,t){return e.indexOf("-")>=0||null!=t.is}function ReactDOMComponent(e){validateDangerousTag(e),this._tag=e.toLowerCase(),this._renderedChildren=null,this._previousStyle=null,this._previousStyleCopy=null,this._rootNodeID=null,this._wrapperState=null,this._topLevelWrapper=null,this._nodeWithLegacyProperties=null}ReactDOMComponent.displayName="ReactDOMComponent",ReactDOMComponent.Mixin={construct:function(e){this._currentElement=e},mountComponent:function(e,t,r){this._rootNodeID=e;var n,a=this._currentElement.props;switch(this._tag){case"iframe":case"img":case"form":case"video":case"audio":this._wrapperState={listeners:null},t.getReactMountReady().enqueue(trapBubbledEventsLocal,this);break;case"button":a=ReactDOMButton.getNativeProps(this,a,r);break;case"input":ReactDOMInput.mountWrapper(this,a,r),a=ReactDOMInput.getNativeProps(this,a,r);break;case"option":ReactDOMOption.mountWrapper(this,a,r),a=ReactDOMOption.getNativeProps(this,a,r);break;case"select":ReactDOMSelect.mountWrapper(this,a,r),a=ReactDOMSelect.getNativeProps(this,a,r),r=ReactDOMSelect.processChildContext(this,a,r);break;case"textarea":ReactDOMTextarea.mountWrapper(this,a,r),a=ReactDOMTextarea.getNativeProps(this,a,r)}if(assertValidProps(this,a),t.useCreateElement){var o=r[ReactMount.ownerDocumentContextKey].createElement(this._currentElement.type);DOMPropertyOperations.setAttributeForID(o,this._rootNodeID),ReactMount.getID(o),this._updateDOMProperties({},a,t,o),this._createInitialChildren(t,a,r,o),n=o}else{var i=this._createOpenTagMarkupAndPutListeners(t,a),s=this._createContentMarkup(t,a,r);n=!s&&omittedCloseTags[this._tag]?i+"/>":i+">"+s+"</"+this._currentElement.type+">"}switch(this._tag){case"input":t.getReactMountReady().enqueue(mountReadyInputWrapper,this);case"button":case"select":case"textarea":a.autoFocus&&t.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent,this)}return n},_createOpenTagMarkupAndPutListeners:function(e,t){var r="<"+this._currentElement.type;for(var n in t)if(t.hasOwnProperty(n)){var a=t[n];if(null!=a)if(registrationNameModules.hasOwnProperty(n))a&&enqueuePutListener(this._rootNodeID,n,a,e);else{n===STYLE&&(a&&(a=this._previousStyleCopy=assign({},t.style)),a=CSSPropertyOperations.createMarkupForStyles(a));var o=null;null!=this._tag&&isCustomComponent(this._tag,t)?n!==CHILDREN&&(o=DOMPropertyOperations.createMarkupForCustomAttribute(n,a)):o=DOMPropertyOperations.createMarkupForProperty(n,a),o&&(r+=" "+o)}}return e.renderToStaticMarkup?r:r+" "+DOMPropertyOperations.createMarkupForID(this._rootNodeID)},_createContentMarkup:function(e,t,r){var n="",a=t.dangerouslySetInnerHTML;if(null!=a)null!=a.__html&&(n=a.__html);else{var o=CONTENT_TYPES[typeof t.children]?t.children:null,i=null!=o?null:t.children;if(null!=o)n=escapeTextContentForBrowser(o);else if(null!=i){n=this.mountChildren(i,e,r).join("")}}return newlineEatingTags[this._tag]&&"\n"===n.charAt(0)?"\n"+n:n},_createInitialChildren:function(e,t,r,n){var a=t.dangerouslySetInnerHTML;if(null!=a)null!=a.__html&&setInnerHTML(n,a.__html);else{var o=CONTENT_TYPES[typeof t.children]?t.children:null,i=null!=o?null:t.children;if(null!=o)setTextContent(n,o);else if(null!=i)for(var s=this.mountChildren(i,e,r),p=0;p<s.length;p++)n.appendChild(s[p])}},receiveComponent:function(e,t,r){var n=this._currentElement;this._currentElement=e,this.updateComponent(t,n,e,r)},updateComponent:function(e,t,r,n){var a=t.props,o=this._currentElement.props;switch(this._tag){case"button":a=ReactDOMButton.getNativeProps(this,a),o=ReactDOMButton.getNativeProps(this,o);break;case"input":ReactDOMInput.updateWrapper(this),a=ReactDOMInput.getNativeProps(this,a),o=ReactDOMInput.getNativeProps(this,o);break;case"option":a=ReactDOMOption.getNativeProps(this,a),o=ReactDOMOption.getNativeProps(this,o);break;case"select":a=ReactDOMSelect.getNativeProps(this,a),o=ReactDOMSelect.getNativeProps(this,o);break;case"textarea":ReactDOMTextarea.updateWrapper(this),a=ReactDOMTextarea.getNativeProps(this,a),o=ReactDOMTextarea.getNativeProps(this,o)}assertValidProps(this,o),this._updateDOMProperties(a,o,e,null),this._updateDOMChildren(a,o,e,n),!canDefineProperty&&this._nodeWithLegacyProperties&&(this._nodeWithLegacyProperties.props=o),"select"===this._tag&&e.getReactMountReady().enqueue(postUpdateSelectWrapper,this)},_updateDOMProperties:function(e,t,r,n){var a,o,i;for(a in e)if(!t.hasOwnProperty(a)&&e.hasOwnProperty(a))if(a===STYLE){var s=this._previousStyleCopy;for(o in s)s.hasOwnProperty(o)&&((i=i||{})[o]="");this._previousStyleCopy=null}else registrationNameModules.hasOwnProperty(a)?e[a]&&deleteListener(this._rootNodeID,a):(DOMProperty.properties[a]||DOMProperty.isCustomAttribute(a))&&(n||(n=ReactMount.getNode(this._rootNodeID)),DOMPropertyOperations.deleteValueForProperty(n,a));for(a in t){var p=t[a],l=a===STYLE?this._previousStyleCopy:e[a];if(t.hasOwnProperty(a)&&p!==l)if(a===STYLE)if(p?p=this._previousStyleCopy=assign({},p):this._previousStyleCopy=null,l){for(o in l)!l.hasOwnProperty(o)||p&&p.hasOwnProperty(o)||((i=i||{})[o]="");for(o in p)p.hasOwnProperty(o)&&l[o]!==p[o]&&((i=i||{})[o]=p[o])}else i=p;else registrationNameModules.hasOwnProperty(a)?p?enqueuePutListener(this._rootNodeID,a,p,r):l&&deleteListener(this._rootNodeID,a):isCustomComponent(this._tag,t)?(n||(n=ReactMount.getNode(this._rootNodeID)),a===CHILDREN&&(p=null),DOMPropertyOperations.setValueForAttribute(n,a,p)):(DOMProperty.properties[a]||DOMProperty.isCustomAttribute(a))&&(n||(n=ReactMount.getNode(this._rootNodeID)),null!=p?DOMPropertyOperations.setValueForProperty(n,a,p):DOMPropertyOperations.deleteValueForProperty(n,a))}i&&(n||(n=ReactMount.getNode(this._rootNodeID)),CSSPropertyOperations.setValueForStyles(n,i))},_updateDOMChildren:function(e,t,r,n){var a=CONTENT_TYPES[typeof e.children]?e.children:null,o=CONTENT_TYPES[typeof t.children]?t.children:null,i=e.dangerouslySetInnerHTML&&e.dangerouslySetInnerHTML.__html,s=t.dangerouslySetInnerHTML&&t.dangerouslySetInnerHTML.__html,p=null!=a?null:e.children,l=null!=o?null:t.children,u=null!=a||null!=i,c=null!=o||null!=s;null!=p&&null==l?this.updateChildren(null,r,n):u&&!c&&this.updateTextContent(""),null!=o?a!==o&&this.updateTextContent(""+o):null!=s?i!==s&&this.updateMarkup(""+s):null!=l&&this.updateChildren(l,r,n)},unmountComponent:function(){switch(this._tag){case"iframe":case"img":case"form":case"video":case"audio":var e=this._wrapperState.listeners;if(e)for(var t=0;t<e.length;t++)e[t].remove();break;case"input":ReactDOMInput.unmountWrapper(this);break;case"html":case"head":case"body":invariant(!1)}(this.unmountChildren(),ReactBrowserEventEmitter.deleteAllListeners(this._rootNodeID),ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID),this._rootNodeID=null,this._wrapperState=null,this._nodeWithLegacyProperties)&&(this._nodeWithLegacyProperties._reactInternalComponent=null,this._nodeWithLegacyProperties=null)},getPublicInstance:function(){if(!this._nodeWithLegacyProperties){var e=ReactMount.getNode(this._rootNodeID);e._reactInternalComponent=this,e.getDOMNode=legacyGetDOMNode,e.isMounted=legacyIsMounted,e.setState=legacySetStateEtc,e.replaceState=legacySetStateEtc,e.forceUpdate=legacySetStateEtc,e.setProps=legacySetProps,e.replaceProps=legacyReplaceProps,e.props=this._currentElement.props,this._nodeWithLegacyProperties=e}return this._nodeWithLegacyProperties}},ReactPerf.measureMethods(ReactDOMComponent,"ReactDOMComponent",{mountComponent:"mountComponent",updateComponent:"updateComponent"}),assign(ReactDOMComponent.prototype,ReactDOMComponent.Mixin,ReactMultiChild.Mixin),module.exports=ReactDOMComponent;

},{"./AutoFocusUtils":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/AutoFocusUtils.js","./CSSPropertyOperations":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/CSSPropertyOperations.js","./DOMProperty":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/DOMProperty.js","./DOMPropertyOperations":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/DOMPropertyOperations.js","./EventConstants":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/EventConstants.js","./Object.assign":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/Object.assign.js","./ReactBrowserEventEmitter":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactBrowserEventEmitter.js","./ReactComponentBrowserEnvironment":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactComponentBrowserEnvironment.js","./ReactDOMButton":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactDOMButton.js","./ReactDOMInput":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactDOMInput.js","./ReactDOMOption":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactDOMOption.js","./ReactDOMSelect":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactDOMSelect.js","./ReactDOMTextarea":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactDOMTextarea.js","./ReactMount":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactMount.js","./ReactMultiChild":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactMultiChild.js","./ReactPerf":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactPerf.js","./ReactUpdateQueue":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactUpdateQueue.js","./canDefineProperty":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/canDefineProperty.js","./escapeTextContentForBrowser":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/escapeTextContentForBrowser.js","./isEventSupported":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/isEventSupported.js","./setInnerHTML":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/setInnerHTML.js","./setTextContent":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/setTextContent.js","./validateDOMNesting":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/validateDOMNesting.js","fbjs/lib/invariant":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/invariant.js","fbjs/lib/keyOf":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/keyOf.js","fbjs/lib/shallowEqual":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/shallowEqual.js","fbjs/lib/warning":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/warning.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactDOMFactories.js":[function(require,module,exports){
"use strict";var ReactElement=require("./ReactElement"),ReactElementValidator=require("./ReactElementValidator"),mapObject=require("fbjs/lib/mapObject");function createDOMFactory(e){return ReactElement.createFactory(e)}var ReactDOMFactories=mapObject({a:"a",abbr:"abbr",address:"address",area:"area",article:"article",aside:"aside",audio:"audio",b:"b",base:"base",bdi:"bdi",bdo:"bdo",big:"big",blockquote:"blockquote",body:"body",br:"br",button:"button",canvas:"canvas",caption:"caption",cite:"cite",code:"code",col:"col",colgroup:"colgroup",data:"data",datalist:"datalist",dd:"dd",del:"del",details:"details",dfn:"dfn",dialog:"dialog",div:"div",dl:"dl",dt:"dt",em:"em",embed:"embed",fieldset:"fieldset",figcaption:"figcaption",figure:"figure",footer:"footer",form:"form",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",h6:"h6",head:"head",header:"header",hgroup:"hgroup",hr:"hr",html:"html",i:"i",iframe:"iframe",img:"img",input:"input",ins:"ins",kbd:"kbd",keygen:"keygen",label:"label",legend:"legend",li:"li",link:"link",main:"main",map:"map",mark:"mark",menu:"menu",menuitem:"menuitem",meta:"meta",meter:"meter",nav:"nav",noscript:"noscript",object:"object",ol:"ol",optgroup:"optgroup",option:"option",output:"output",p:"p",param:"param",picture:"picture",pre:"pre",progress:"progress",q:"q",rp:"rp",rt:"rt",ruby:"ruby",s:"s",samp:"samp",script:"script",section:"section",select:"select",small:"small",source:"source",span:"span",strong:"strong",style:"style",sub:"sub",summary:"summary",sup:"sup",table:"table",tbody:"tbody",td:"td",textarea:"textarea",tfoot:"tfoot",th:"th",thead:"thead",time:"time",title:"title",tr:"tr",track:"track",u:"u",ul:"ul",var:"var",video:"video",wbr:"wbr",circle:"circle",clipPath:"clipPath",defs:"defs",ellipse:"ellipse",g:"g",image:"image",line:"line",linearGradient:"linearGradient",mask:"mask",path:"path",pattern:"pattern",polygon:"polygon",polyline:"polyline",radialGradient:"radialGradient",rect:"rect",stop:"stop",svg:"svg",text:"text",tspan:"tspan"},createDOMFactory);module.exports=ReactDOMFactories;

},{"./ReactElement":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactElement.js","./ReactElementValidator":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactElementValidator.js","fbjs/lib/mapObject":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/mapObject.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactDOMFeatureFlags.js":[function(require,module,exports){
"use strict";var ReactDOMFeatureFlags={useCreateElement:!1};module.exports=ReactDOMFeatureFlags;

},{}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactDOMIDOperations.js":[function(require,module,exports){
"use strict";var DOMChildrenOperations=require("./DOMChildrenOperations"),DOMPropertyOperations=require("./DOMPropertyOperations"),ReactMount=require("./ReactMount"),ReactPerf=require("./ReactPerf"),invariant=require("fbjs/lib/invariant"),INVALID_PROPERTY_ERRORS={dangerouslySetInnerHTML:"`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.",style:"`style` must be set using `updateStylesByID()`."},ReactDOMIDOperations={updatePropertyByID:function(e,r,t){var a=ReactMount.getNode(e);INVALID_PROPERTY_ERRORS.hasOwnProperty(r)&&invariant(!1),null!=t?DOMPropertyOperations.setValueForProperty(a,r,t):DOMPropertyOperations.deleteValueForProperty(a,r)},dangerouslyReplaceNodeWithMarkupByID:function(e,r){var t=ReactMount.getNode(e);DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(t,r)},dangerouslyProcessChildrenUpdates:function(e,r){for(var t=0;t<e.length;t++)e[t].parentNode=ReactMount.getNode(e[t].parentID);DOMChildrenOperations.processUpdates(e,r)}};ReactPerf.measureMethods(ReactDOMIDOperations,"ReactDOMIDOperations",{dangerouslyReplaceNodeWithMarkupByID:"dangerouslyReplaceNodeWithMarkupByID",dangerouslyProcessChildrenUpdates:"dangerouslyProcessChildrenUpdates"}),module.exports=ReactDOMIDOperations;

},{"./DOMChildrenOperations":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/DOMChildrenOperations.js","./DOMPropertyOperations":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/DOMPropertyOperations.js","./ReactMount":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactMount.js","./ReactPerf":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactPerf.js","fbjs/lib/invariant":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/invariant.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactDOMInput.js":[function(require,module,exports){
"use strict";var ReactDOMIDOperations=require("./ReactDOMIDOperations"),LinkedValueUtils=require("./LinkedValueUtils"),ReactMount=require("./ReactMount"),ReactUpdates=require("./ReactUpdates"),assign=require("./Object.assign"),invariant=require("fbjs/lib/invariant"),instancesByReactID={};function forceUpdateIfMounted(){this._rootNodeID&&ReactDOMInput.updateWrapper(this)}var ReactDOMInput={getNativeProps:function(e,t,a){var n=LinkedValueUtils.getValue(t),r=LinkedValueUtils.getChecked(t);return assign({},t,{defaultChecked:void 0,defaultValue:void 0,value:null!=n?n:e._wrapperState.initialValue,checked:null!=r?r:e._wrapperState.initialChecked,onChange:e._wrapperState.onChange})},mountWrapper:function(e,t){var a=t.defaultValue;e._wrapperState={initialChecked:t.defaultChecked||!1,initialValue:null!=a?a:null,onChange:_handleChange.bind(e)}},mountReadyWrapper:function(e){instancesByReactID[e._rootNodeID]=e},unmountWrapper:function(e){delete instancesByReactID[e._rootNodeID]},updateWrapper:function(e){var t=e._currentElement.props,a=t.checked;null!=a&&ReactDOMIDOperations.updatePropertyByID(e._rootNodeID,"checked",a||!1);var n=LinkedValueUtils.getValue(t);null!=n&&ReactDOMIDOperations.updatePropertyByID(e._rootNodeID,"value",""+n)}};function _handleChange(e){var t=this._currentElement.props,a=LinkedValueUtils.executeOnChange(t,e);ReactUpdates.asap(forceUpdateIfMounted,this);var n=t.name;if("radio"===t.type&&null!=n){for(var r=ReactMount.getNode(this._rootNodeID),i=r;i.parentNode;)i=i.parentNode;for(var u=i.querySelectorAll("input[name="+JSON.stringify(""+n)+'][type="radio"]'),o=0;o<u.length;o++){var l=u[o];if(l!==r&&l.form===r.form){var d=ReactMount.getID(l);d||invariant(!1);var p=instancesByReactID[d];p||invariant(!1),ReactUpdates.asap(forceUpdateIfMounted,p)}}}return a}module.exports=ReactDOMInput;

},{"./LinkedValueUtils":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/LinkedValueUtils.js","./Object.assign":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/Object.assign.js","./ReactDOMIDOperations":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactDOMIDOperations.js","./ReactMount":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactMount.js","./ReactUpdates":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactUpdates.js","fbjs/lib/invariant":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/invariant.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactDOMOption.js":[function(require,module,exports){
"use strict";var ReactChildren=require("./ReactChildren"),ReactDOMSelect=require("./ReactDOMSelect"),assign=require("./Object.assign"),warning=require("fbjs/lib/warning"),valueContextKey=ReactDOMSelect.valueContextKey,ReactDOMOption={mountWrapper:function(e,t,r){var a=r[valueContextKey],n=null;if(null!=a)if(n=!1,Array.isArray(a)){for(var l=0;l<a.length;l++)if(""+a[l]==""+t.value){n=!0;break}}else n=""+a==""+t.value;e._wrapperState={selected:n}},getNativeProps:function(e,t,r){var a=assign({selected:void 0,children:void 0},t);null!=e._wrapperState.selected&&(a.selected=e._wrapperState.selected);var n="";return ReactChildren.forEach(t.children,function(e){null!=e&&("string"!=typeof e&&"number"!=typeof e||(n+=e))}),n&&(a.children=n),a}};module.exports=ReactDOMOption;

},{"./Object.assign":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/Object.assign.js","./ReactChildren":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactChildren.js","./ReactDOMSelect":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactDOMSelect.js","fbjs/lib/warning":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/warning.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactDOMSelect.js":[function(require,module,exports){
"use strict";var LinkedValueUtils=require("./LinkedValueUtils"),ReactMount=require("./ReactMount"),ReactUpdates=require("./ReactUpdates"),assign=require("./Object.assign"),warning=require("fbjs/lib/warning"),valueContextKey="__ReactDOMSelect_value$"+Math.random().toString(36).slice(2);function updateOptionsIfPendingUpdateAndMounted(){if(this._rootNodeID&&this._wrapperState.pendingUpdate){this._wrapperState.pendingUpdate=!1;var e=this._currentElement.props,t=LinkedValueUtils.getValue(e);null!=t&&updateOptions(this,Boolean(e.multiple),t)}}function getDeclarationErrorAddendum(e){if(e){var t=e.getName();if(t)return" Check the render method of `"+t+"`."}return""}var valuePropNames=["value","defaultValue"];function checkSelectPropTypes(e,t){var a=e._currentElement._owner;LinkedValueUtils.checkPropTypes("select",t,a);for(var n=0;n<valuePropNames.length;n++){var l=valuePropNames[n];null!=t[l]&&t.multiple}}function updateOptions(e,t,a){var n,l,r=ReactMount.getNode(e._rootNodeID).options;if(t){for(n={},l=0;l<a.length;l++)n[""+a[l]]=!0;for(l=0;l<r.length;l++){var i=n.hasOwnProperty(r[l].value);r[l].selected!==i&&(r[l].selected=i)}}else{for(n=""+a,l=0;l<r.length;l++)if(r[l].value===n)return void(r[l].selected=!0);r.length&&(r[0].selected=!0)}}var ReactDOMSelect={valueContextKey:valueContextKey,getNativeProps:function(e,t,a){return assign({},t,{onChange:e._wrapperState.onChange,value:void 0})},mountWrapper:function(e,t){var a=LinkedValueUtils.getValue(t);e._wrapperState={pendingUpdate:!1,initialValue:null!=a?a:t.defaultValue,onChange:_handleChange.bind(e),wasMultiple:Boolean(t.multiple)}},processChildContext:function(e,t,a){var n=assign({},a);return n[valueContextKey]=e._wrapperState.initialValue,n},postUpdateWrapper:function(e){var t=e._currentElement.props;e._wrapperState.initialValue=void 0;var a=e._wrapperState.wasMultiple;e._wrapperState.wasMultiple=Boolean(t.multiple);var n=LinkedValueUtils.getValue(t);null!=n?(e._wrapperState.pendingUpdate=!1,updateOptions(e,Boolean(t.multiple),n)):a!==Boolean(t.multiple)&&(null!=t.defaultValue?updateOptions(e,Boolean(t.multiple),t.defaultValue):updateOptions(e,Boolean(t.multiple),t.multiple?[]:""))}};function _handleChange(e){var t=this._currentElement.props,a=LinkedValueUtils.executeOnChange(t,e);return this._wrapperState.pendingUpdate=!0,ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted,this),a}module.exports=ReactDOMSelect;

},{"./LinkedValueUtils":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/LinkedValueUtils.js","./Object.assign":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/Object.assign.js","./ReactMount":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactMount.js","./ReactUpdates":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactUpdates.js","fbjs/lib/warning":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/warning.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactDOMSelection.js":[function(require,module,exports){
"use strict";var ExecutionEnvironment=require("fbjs/lib/ExecutionEnvironment"),getNodeForCharacterOffset=require("./getNodeForCharacterOffset"),getTextContentAccessor=require("./getTextContentAccessor");function isCollapsed(e,t,n,o){return e===n&&t===o}function getIEOffsets(e){var t=document.selection.createRange(),n=t.text.length,o=t.duplicate();o.moveToElementText(e),o.setEndPoint("EndToStart",t);var s=o.text.length;return{start:s,end:s+n}}function getModernOffsets(e){var t=window.getSelection&&window.getSelection();if(!t||0===t.rangeCount)return null;var n=t.anchorNode,o=t.anchorOffset,s=t.focusNode,r=t.focusOffset,a=t.getRangeAt(0);try{a.startContainer.nodeType,a.endContainer.nodeType}catch(e){return null}var f=isCollapsed(t.anchorNode,t.anchorOffset,t.focusNode,t.focusOffset)?0:a.toString().length,d=a.cloneRange();d.selectNodeContents(e),d.setEnd(a.startContainer,a.startOffset);var c=isCollapsed(d.startContainer,d.startOffset,d.endContainer,d.endOffset)?0:d.toString().length,i=c+f,l=document.createRange();l.setStart(n,o),l.setEnd(s,r);var g=l.collapsed;return{start:g?i:c,end:g?c:i}}function setIEOffsets(e,t){var n,o,s=document.selection.createRange().duplicate();void 0===t.end?o=n=t.start:t.start>t.end?(n=t.end,o=t.start):(n=t.start,o=t.end),s.moveToElementText(e),s.moveStart("character",n),s.setEndPoint("EndToStart",s),s.moveEnd("character",o-n),s.select()}function setModernOffsets(e,t){if(window.getSelection){var n=window.getSelection(),o=e[getTextContentAccessor()].length,s=Math.min(t.start,o),r=void 0===t.end?s:Math.min(t.end,o);if(!n.extend&&s>r){var a=r;r=s,s=a}var f=getNodeForCharacterOffset(e,s),d=getNodeForCharacterOffset(e,r);if(f&&d){var c=document.createRange();c.setStart(f.node,f.offset),n.removeAllRanges(),s>r?(n.addRange(c),n.extend(d.node,d.offset)):(c.setEnd(d.node,d.offset),n.addRange(c))}}}var useIEOffsets=ExecutionEnvironment.canUseDOM&&"selection"in document&&!("getSelection"in window),ReactDOMSelection={getOffsets:useIEOffsets?getIEOffsets:getModernOffsets,setOffsets:useIEOffsets?setIEOffsets:setModernOffsets};module.exports=ReactDOMSelection;

},{"./getNodeForCharacterOffset":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/getNodeForCharacterOffset.js","./getTextContentAccessor":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/getTextContentAccessor.js","fbjs/lib/ExecutionEnvironment":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/ExecutionEnvironment.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactDOMServer.js":[function(require,module,exports){
"use strict";var ReactDefaultInjection=require("./ReactDefaultInjection"),ReactServerRendering=require("./ReactServerRendering"),ReactVersion=require("./ReactVersion");ReactDefaultInjection.inject();var ReactDOMServer={renderToString:ReactServerRendering.renderToString,renderToStaticMarkup:ReactServerRendering.renderToStaticMarkup,version:ReactVersion};module.exports=ReactDOMServer;

},{"./ReactDefaultInjection":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactDefaultInjection.js","./ReactServerRendering":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactServerRendering.js","./ReactVersion":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactVersion.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactDOMTextComponent.js":[function(require,module,exports){
"use strict";var DOMChildrenOperations=require("./DOMChildrenOperations"),DOMPropertyOperations=require("./DOMPropertyOperations"),ReactComponentBrowserEnvironment=require("./ReactComponentBrowserEnvironment"),ReactMount=require("./ReactMount"),assign=require("./Object.assign"),escapeTextContentForBrowser=require("./escapeTextContentForBrowser"),setTextContent=require("./setTextContent"),validateDOMNesting=require("./validateDOMNesting"),ReactDOMTextComponent=function(e){};assign(ReactDOMTextComponent.prototype,{construct:function(e){this._currentElement=e,this._stringText=""+e,this._rootNodeID=null,this._mountIndex=0},mountComponent:function(e,t,n){if(this._rootNodeID=e,t.useCreateElement){var r=n[ReactMount.ownerDocumentContextKey].createElement("span");return DOMPropertyOperations.setAttributeForID(r,e),ReactMount.getID(r),setTextContent(r,this._stringText),r}var o=escapeTextContentForBrowser(this._stringText);return t.renderToStaticMarkup?o:"<span "+DOMPropertyOperations.createMarkupForID(e)+">"+o+"</span>"},receiveComponent:function(e,t){if(e!==this._currentElement){this._currentElement=e;var n=""+e;if(n!==this._stringText){this._stringText=n;var r=ReactMount.getNode(this._rootNodeID);DOMChildrenOperations.updateTextContent(r,n)}}},unmountComponent:function(){ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID)}}),module.exports=ReactDOMTextComponent;

},{"./DOMChildrenOperations":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/DOMChildrenOperations.js","./DOMPropertyOperations":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/DOMPropertyOperations.js","./Object.assign":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/Object.assign.js","./ReactComponentBrowserEnvironment":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactComponentBrowserEnvironment.js","./ReactMount":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactMount.js","./escapeTextContentForBrowser":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/escapeTextContentForBrowser.js","./setTextContent":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/setTextContent.js","./validateDOMNesting":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/validateDOMNesting.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactDOMTextarea.js":[function(require,module,exports){
"use strict";var LinkedValueUtils=require("./LinkedValueUtils"),ReactDOMIDOperations=require("./ReactDOMIDOperations"),ReactUpdates=require("./ReactUpdates"),assign=require("./Object.assign"),invariant=require("fbjs/lib/invariant"),warning=require("fbjs/lib/warning");function forceUpdateIfMounted(){this._rootNodeID&&ReactDOMTextarea.updateWrapper(this)}var ReactDOMTextarea={getNativeProps:function(e,a,t){return null!=a.dangerouslySetInnerHTML&&invariant(!1),assign({},a,{defaultValue:void 0,value:void 0,children:e._wrapperState.initialValue,onChange:e._wrapperState.onChange})},mountWrapper:function(e,a){var t=a.defaultValue,n=a.children;null!=n&&(null!=t&&invariant(!1),Array.isArray(n)&&(n.length<=1||invariant(!1),n=n[0]),t=""+n),null==t&&(t="");var r=LinkedValueUtils.getValue(a);e._wrapperState={initialValue:""+(null!=r?r:t),onChange:_handleChange.bind(e)}},updateWrapper:function(e){var a=e._currentElement.props,t=LinkedValueUtils.getValue(a);null!=t&&ReactDOMIDOperations.updatePropertyByID(e._rootNodeID,"value",""+t)}};function _handleChange(e){var a=this._currentElement.props,t=LinkedValueUtils.executeOnChange(a,e);return ReactUpdates.asap(forceUpdateIfMounted,this),t}module.exports=ReactDOMTextarea;

},{"./LinkedValueUtils":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/LinkedValueUtils.js","./Object.assign":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/Object.assign.js","./ReactDOMIDOperations":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactDOMIDOperations.js","./ReactUpdates":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactUpdates.js","fbjs/lib/invariant":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/invariant.js","fbjs/lib/warning":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/warning.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactDefaultBatchingStrategy.js":[function(require,module,exports){
"use strict";var ReactUpdates=require("./ReactUpdates"),Transaction=require("./Transaction"),assign=require("./Object.assign"),emptyFunction=require("fbjs/lib/emptyFunction"),RESET_BATCHED_UPDATES={initialize:emptyFunction,close:function(){ReactDefaultBatchingStrategy.isBatchingUpdates=!1}},FLUSH_BATCHED_UPDATES={initialize:emptyFunction,close:ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)},TRANSACTION_WRAPPERS=[FLUSH_BATCHED_UPDATES,RESET_BATCHED_UPDATES];function ReactDefaultBatchingStrategyTransaction(){this.reinitializeTransaction()}assign(ReactDefaultBatchingStrategyTransaction.prototype,Transaction.Mixin,{getTransactionWrappers:function(){return TRANSACTION_WRAPPERS}});var transaction=new ReactDefaultBatchingStrategyTransaction,ReactDefaultBatchingStrategy={isBatchingUpdates:!1,batchedUpdates:function(t,a,e,i,n,c){var r=ReactDefaultBatchingStrategy.isBatchingUpdates;ReactDefaultBatchingStrategy.isBatchingUpdates=!0,r?t(a,e,i,n,c):transaction.perform(t,null,a,e,i,n,c)}};module.exports=ReactDefaultBatchingStrategy;

},{"./Object.assign":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/Object.assign.js","./ReactUpdates":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactUpdates.js","./Transaction":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/Transaction.js","fbjs/lib/emptyFunction":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/emptyFunction.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactDefaultInjection.js":[function(require,module,exports){
"use strict";var BeforeInputEventPlugin=require("./BeforeInputEventPlugin"),ChangeEventPlugin=require("./ChangeEventPlugin"),ClientReactRootIndex=require("./ClientReactRootIndex"),DefaultEventPluginOrder=require("./DefaultEventPluginOrder"),EnterLeaveEventPlugin=require("./EnterLeaveEventPlugin"),ExecutionEnvironment=require("fbjs/lib/ExecutionEnvironment"),HTMLDOMPropertyConfig=require("./HTMLDOMPropertyConfig"),ReactBrowserComponentMixin=require("./ReactBrowserComponentMixin"),ReactComponentBrowserEnvironment=require("./ReactComponentBrowserEnvironment"),ReactDefaultBatchingStrategy=require("./ReactDefaultBatchingStrategy"),ReactDOMComponent=require("./ReactDOMComponent"),ReactDOMTextComponent=require("./ReactDOMTextComponent"),ReactEventListener=require("./ReactEventListener"),ReactInjection=require("./ReactInjection"),ReactInstanceHandles=require("./ReactInstanceHandles"),ReactMount=require("./ReactMount"),ReactReconcileTransaction=require("./ReactReconcileTransaction"),SelectEventPlugin=require("./SelectEventPlugin"),ServerReactRootIndex=require("./ServerReactRootIndex"),SimpleEventPlugin=require("./SimpleEventPlugin"),SVGDOMPropertyConfig=require("./SVGDOMPropertyConfig"),alreadyInjected=!1;function inject(){alreadyInjected||(alreadyInjected=!0,ReactInjection.EventEmitter.injectReactEventListener(ReactEventListener),ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder),ReactInjection.EventPluginHub.injectInstanceHandle(ReactInstanceHandles),ReactInjection.EventPluginHub.injectMount(ReactMount),ReactInjection.EventPluginHub.injectEventPluginsByName({SimpleEventPlugin:SimpleEventPlugin,EnterLeaveEventPlugin:EnterLeaveEventPlugin,ChangeEventPlugin:ChangeEventPlugin,SelectEventPlugin:SelectEventPlugin,BeforeInputEventPlugin:BeforeInputEventPlugin}),ReactInjection.NativeComponent.injectGenericComponentClass(ReactDOMComponent),ReactInjection.NativeComponent.injectTextComponentClass(ReactDOMTextComponent),ReactInjection.Class.injectMixin(ReactBrowserComponentMixin),ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig),ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig),ReactInjection.EmptyComponent.injectEmptyComponent("noscript"),ReactInjection.Updates.injectReconcileTransaction(ReactReconcileTransaction),ReactInjection.Updates.injectBatchingStrategy(ReactDefaultBatchingStrategy),ReactInjection.RootIndex.injectCreateReactRootIndex(ExecutionEnvironment.canUseDOM?ClientReactRootIndex.createReactRootIndex:ServerReactRootIndex.createReactRootIndex),ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment))}module.exports={inject:inject};

},{"./BeforeInputEventPlugin":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/BeforeInputEventPlugin.js","./ChangeEventPlugin":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ChangeEventPlugin.js","./ClientReactRootIndex":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ClientReactRootIndex.js","./DefaultEventPluginOrder":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/DefaultEventPluginOrder.js","./EnterLeaveEventPlugin":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/EnterLeaveEventPlugin.js","./HTMLDOMPropertyConfig":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/HTMLDOMPropertyConfig.js","./ReactBrowserComponentMixin":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactBrowserComponentMixin.js","./ReactComponentBrowserEnvironment":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactComponentBrowserEnvironment.js","./ReactDOMComponent":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactDOMComponent.js","./ReactDOMTextComponent":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactDOMTextComponent.js","./ReactDefaultBatchingStrategy":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactDefaultBatchingStrategy.js","./ReactEventListener":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactEventListener.js","./ReactInjection":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactInjection.js","./ReactInstanceHandles":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactInstanceHandles.js","./ReactMount":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactMount.js","./ReactReconcileTransaction":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactReconcileTransaction.js","./SVGDOMPropertyConfig":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/SVGDOMPropertyConfig.js","./SelectEventPlugin":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/SelectEventPlugin.js","./ServerReactRootIndex":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ServerReactRootIndex.js","./SimpleEventPlugin":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/SimpleEventPlugin.js","fbjs/lib/ExecutionEnvironment":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/ExecutionEnvironment.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactElement.js":[function(require,module,exports){
"use strict";var ReactCurrentOwner=require("./ReactCurrentOwner"),assign=require("./Object.assign"),canDefineProperty=require("./canDefineProperty"),REACT_ELEMENT_TYPE="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,RESERVED_PROPS={key:!0,ref:!0,__self:!0,__source:!0},ReactElement=function(e,r,n,t,l,o,c){var a={$$typeof:REACT_ELEMENT_TYPE,type:e,key:r,ref:n,props:c,_owner:o};return a};ReactElement.createElement=function(e,r,n){var t,l={},o=null,c=null,a=null,u=null;if(null!=r)for(t in c=void 0===r.ref?null:r.ref,o=void 0===r.key?null:""+r.key,a=void 0===r.__self?null:r.__self,u=void 0===r.__source?null:r.__source,r)r.hasOwnProperty(t)&&!RESERVED_PROPS.hasOwnProperty(t)&&(l[t]=r[t]);var f=arguments.length-2;if(1===f)l.children=n;else if(f>1){for(var i=Array(f),E=0;E<f;E++)i[E]=arguments[E+2];l.children=i}if(e&&e.defaultProps){var s=e.defaultProps;for(t in s)void 0===l[t]&&(l[t]=s[t])}return ReactElement(e,o,c,a,u,ReactCurrentOwner.current,l)},ReactElement.createFactory=function(e){var r=ReactElement.createElement.bind(null,e);return r.type=e,r},ReactElement.cloneAndReplaceKey=function(e,r){return ReactElement(e.type,r,e.ref,e._self,e._source,e._owner,e.props)},ReactElement.cloneAndReplaceProps=function(e,r){var n=ReactElement(e.type,e.key,e.ref,e._self,e._source,e._owner,r);return n},ReactElement.cloneElement=function(e,r,n){var t,l=assign({},e.props),o=e.key,c=e.ref,a=e._self,u=e._source,f=e._owner;if(null!=r)for(t in void 0!==r.ref&&(c=r.ref,f=ReactCurrentOwner.current),void 0!==r.key&&(o=""+r.key),r)r.hasOwnProperty(t)&&!RESERVED_PROPS.hasOwnProperty(t)&&(l[t]=r[t]);var i=arguments.length-2;if(1===i)l.children=n;else if(i>1){for(var E=Array(i),s=0;s<i;s++)E[s]=arguments[s+2];l.children=E}return ReactElement(e.type,o,c,a,u,f,l)},ReactElement.isValidElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===REACT_ELEMENT_TYPE},module.exports=ReactElement;

},{"./Object.assign":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/Object.assign.js","./ReactCurrentOwner":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactCurrentOwner.js","./canDefineProperty":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/canDefineProperty.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactElementValidator.js":[function(require,module,exports){
"use strict";var ReactElement=require("./ReactElement"),ReactPropTypeLocations=require("./ReactPropTypeLocations"),ReactPropTypeLocationNames=require("./ReactPropTypeLocationNames"),ReactCurrentOwner=require("./ReactCurrentOwner"),canDefineProperty=require("./canDefineProperty"),getIteratorFn=require("./getIteratorFn"),invariant=require("fbjs/lib/invariant"),warning=require("fbjs/lib/warning");function getDeclarationErrorAddendum(){if(ReactCurrentOwner.current){var e=ReactCurrentOwner.current.getName();if(e)return" Check the render method of `"+e+"`."}return""}var ownerHasKeyUseWarning={},loggedTypeFailures={};function validateExplicitKey(e,r){if(e._store&&!e._store.validated&&null==e.key){e._store.validated=!0;getAddendaForKeyUse("uniqueKey",e,r)}}function getAddendaForKeyUse(e,r,t){var a=getDeclarationErrorAddendum();if(!a){var n="string"==typeof t?t:t.displayName||t.name;n&&(a=" Check the top-level render call using <"+n+">.")}var i=ownerHasKeyUseWarning[e]||(ownerHasKeyUseWarning[e]={});if(i[a])return null;i[a]=!0;var o={parentOrOwner:a,url:" See https://fb.me/react-warning-keys for more information.",childOwner:null};return r&&r._owner&&r._owner!==ReactCurrentOwner.current&&(o.childOwner=" It was passed a child from "+r._owner.getName()+"."),o}function validateChildKeys(e,r){if("object"==typeof e)if(Array.isArray(e))for(var t=0;t<e.length;t++){var a=e[t];ReactElement.isValidElement(a)&&validateExplicitKey(a,r)}else if(ReactElement.isValidElement(e))e._store&&(e._store.validated=!0);else if(e){var n=getIteratorFn(e);if(n&&n!==e.entries)for(var i,o=n.call(e);!(i=o.next()).done;)ReactElement.isValidElement(i.value)&&validateExplicitKey(i.value,r)}}function checkPropTypes(e,r,t,a){for(var n in r)if(r.hasOwnProperty(n)){var i;try{"function"!=typeof r[n]&&invariant(!1),i=r[n](t,n,e,a,null,"SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED")}catch(e){i=e}if(i instanceof Error&&!(i.message in loggedTypeFailures)){loggedTypeFailures[i.message]=!0;getDeclarationErrorAddendum()}}}function validatePropTypes(e){var r=e.type;if("function"==typeof r){var t=r.displayName||r.name;r.propTypes&&checkPropTypes(t,r.propTypes,e.props,ReactPropTypeLocations.prop),r.getDefaultProps}}var ReactElementValidator={createElement:function(e,r,t){var a="string"==typeof e||"function"==typeof e,n=ReactElement.createElement.apply(this,arguments);if(null==n)return n;if(a)for(var i=2;i<arguments.length;i++)validateChildKeys(arguments[i],e);return validatePropTypes(n),n},createFactory:function(e){var r=ReactElementValidator.createElement.bind(null,e);return r.type=e,r},cloneElement:function(e,r,t){for(var a=ReactElement.cloneElement.apply(this,arguments),n=2;n<arguments.length;n++)validateChildKeys(arguments[n],a.type);return validatePropTypes(a),a}};module.exports=ReactElementValidator;

},{"./ReactCurrentOwner":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactCurrentOwner.js","./ReactElement":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactElement.js","./ReactPropTypeLocationNames":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactPropTypeLocationNames.js","./ReactPropTypeLocations":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactPropTypeLocations.js","./canDefineProperty":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/canDefineProperty.js","./getIteratorFn":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/getIteratorFn.js","fbjs/lib/invariant":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/invariant.js","fbjs/lib/warning":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/warning.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactEmptyComponent.js":[function(require,module,exports){
"use strict";var placeholderElement,ReactElement=require("./ReactElement"),ReactEmptyComponentRegistry=require("./ReactEmptyComponentRegistry"),ReactReconciler=require("./ReactReconciler"),assign=require("./Object.assign"),ReactEmptyComponentInjection={injectEmptyComponent:function(e){placeholderElement=ReactElement.createElement(e)}};function registerNullComponentID(){ReactEmptyComponentRegistry.registerNullComponentID(this._rootNodeID)}var ReactEmptyComponent=function(e){this._currentElement=null,this._rootNodeID=null,this._renderedComponent=e(placeholderElement)};assign(ReactEmptyComponent.prototype,{construct:function(e){},mountComponent:function(e,t,n){return t.getReactMountReady().enqueue(registerNullComponentID,this),this._rootNodeID=e,ReactReconciler.mountComponent(this._renderedComponent,e,t,n)},receiveComponent:function(){},unmountComponent:function(e,t,n){ReactReconciler.unmountComponent(this._renderedComponent),ReactEmptyComponentRegistry.deregisterNullComponentID(this._rootNodeID),this._rootNodeID=null,this._renderedComponent=null}}),ReactEmptyComponent.injection=ReactEmptyComponentInjection,module.exports=ReactEmptyComponent;

},{"./Object.assign":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/Object.assign.js","./ReactElement":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactElement.js","./ReactEmptyComponentRegistry":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactEmptyComponentRegistry.js","./ReactReconciler":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactReconciler.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactEmptyComponentRegistry.js":[function(require,module,exports){
"use strict";var nullComponentIDsRegistry={};function isNullComponentID(e){return!!nullComponentIDsRegistry[e]}function registerNullComponentID(e){nullComponentIDsRegistry[e]=!0}function deregisterNullComponentID(e){delete nullComponentIDsRegistry[e]}var ReactEmptyComponentRegistry={isNullComponentID:isNullComponentID,registerNullComponentID:registerNullComponentID,deregisterNullComponentID:deregisterNullComponentID};module.exports=ReactEmptyComponentRegistry;

},{}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactErrorUtils.js":[function(require,module,exports){
"use strict";var caughtError=null;function invokeGuardedCallback(r,a,t,o){try{return a(t,o)}catch(r){return void(null===caughtError&&(caughtError=r))}}var fakeNode,ReactErrorUtils={invokeGuardedCallback:invokeGuardedCallback,invokeGuardedCallbackWithCatch:invokeGuardedCallback,rethrowCaughtError:function(){if(caughtError){var r=caughtError;throw caughtError=null,r}}};module.exports=ReactErrorUtils;

},{}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactEventEmitterMixin.js":[function(require,module,exports){
"use strict";var EventPluginHub=require("./EventPluginHub");function runEventQueueInBatch(e){EventPluginHub.enqueueEvents(e),EventPluginHub.processEventQueue(!1)}var ReactEventEmitterMixin={handleTopLevel:function(e,n,t,u,i){runEventQueueInBatch(EventPluginHub.extractEvents(e,n,t,u,i))}};module.exports=ReactEventEmitterMixin;

},{"./EventPluginHub":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/EventPluginHub.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactEventListener.js":[function(require,module,exports){
"use strict";var EventListener=require("fbjs/lib/EventListener"),ExecutionEnvironment=require("fbjs/lib/ExecutionEnvironment"),PooledClass=require("./PooledClass"),ReactInstanceHandles=require("./ReactInstanceHandles"),ReactMount=require("./ReactMount"),ReactUpdates=require("./ReactUpdates"),assign=require("./Object.assign"),getEventTarget=require("./getEventTarget"),getUnboundedScrollPosition=require("fbjs/lib/getUnboundedScrollPosition"),DOCUMENT_FRAGMENT_NODE_TYPE=11;function findParent(e){var t=ReactMount.getID(e),n=ReactInstanceHandles.getReactRootIDFromNodeID(t),a=ReactMount.findReactContainerForID(n);return ReactMount.getFirstReactDOM(a)}function TopLevelCallbackBookKeeping(e,t){this.topLevelType=e,this.nativeEvent=t,this.ancestors=[]}function handleTopLevelImpl(e){handleTopLevelWithoutPath(e)}function handleTopLevelWithoutPath(e){for(var t=ReactMount.getFirstReactDOM(getEventTarget(e.nativeEvent))||window,n=t;n;)e.ancestors.push(n),n=findParent(n);for(var a=0;a<e.ancestors.length;a++){t=e.ancestors[a];var o=ReactMount.getID(t)||"";ReactEventListener._handleTopLevel(e.topLevelType,t,o,e.nativeEvent,getEventTarget(e.nativeEvent))}}function handleTopLevelWithPath(e){for(var t=e.nativeEvent.path,n=t[0],a=0,o=0;o<t.length;o++){var l=t[o];if(l.nodeType===DOCUMENT_FRAGMENT_NODE_TYPE&&(n=t[o+1]),ReactMount.getFirstReactDOM(l)===l){var i=ReactMount.getID(l),r=ReactInstanceHandles.getReactRootIDFromNodeID(i);e.ancestors.push(l);var s=ReactMount.getID(l)||"";for(a++,ReactEventListener._handleTopLevel(e.topLevelType,l,s,e.nativeEvent,n);i!==r;)l=t[++o],i=ReactMount.getID(l)}}0===a&&ReactEventListener._handleTopLevel(e.topLevelType,window,"",e.nativeEvent,getEventTarget(e.nativeEvent))}function scrollValueMonitor(e){e(getUnboundedScrollPosition(window))}assign(TopLevelCallbackBookKeeping.prototype,{destructor:function(){this.topLevelType=null,this.nativeEvent=null,this.ancestors.length=0}}),PooledClass.addPoolingTo(TopLevelCallbackBookKeeping,PooledClass.twoArgumentPooler);var ReactEventListener={_enabled:!0,_handleTopLevel:null,WINDOW_HANDLE:ExecutionEnvironment.canUseDOM?window:null,setHandleTopLevel:function(e){ReactEventListener._handleTopLevel=e},setEnabled:function(e){ReactEventListener._enabled=!!e},isEnabled:function(){return ReactEventListener._enabled},trapBubbledEvent:function(e,t,n){var a=n;return a?EventListener.listen(a,t,ReactEventListener.dispatchEvent.bind(null,e)):null},trapCapturedEvent:function(e,t,n){var a=n;return a?EventListener.capture(a,t,ReactEventListener.dispatchEvent.bind(null,e)):null},monitorScrollValue:function(e){var t=scrollValueMonitor.bind(null,e);EventListener.listen(window,"scroll",t)},dispatchEvent:function(e,t){if(ReactEventListener._enabled){var n=TopLevelCallbackBookKeeping.getPooled(e,t);try{ReactUpdates.batchedUpdates(handleTopLevelImpl,n)}finally{TopLevelCallbackBookKeeping.release(n)}}}};module.exports=ReactEventListener;

},{"./Object.assign":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/Object.assign.js","./PooledClass":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/PooledClass.js","./ReactInstanceHandles":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactInstanceHandles.js","./ReactMount":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactMount.js","./ReactUpdates":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactUpdates.js","./getEventTarget":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/getEventTarget.js","fbjs/lib/EventListener":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/EventListener.js","fbjs/lib/ExecutionEnvironment":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/ExecutionEnvironment.js","fbjs/lib/getUnboundedScrollPosition":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/getUnboundedScrollPosition.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactInjection.js":[function(require,module,exports){
"use strict";var DOMProperty=require("./DOMProperty"),EventPluginHub=require("./EventPluginHub"),ReactComponentEnvironment=require("./ReactComponentEnvironment"),ReactClass=require("./ReactClass"),ReactEmptyComponent=require("./ReactEmptyComponent"),ReactBrowserEventEmitter=require("./ReactBrowserEventEmitter"),ReactNativeComponent=require("./ReactNativeComponent"),ReactPerf=require("./ReactPerf"),ReactRootIndex=require("./ReactRootIndex"),ReactUpdates=require("./ReactUpdates"),ReactInjection={Component:ReactComponentEnvironment.injection,Class:ReactClass.injection,DOMProperty:DOMProperty.injection,EmptyComponent:ReactEmptyComponent.injection,EventPluginHub:EventPluginHub.injection,EventEmitter:ReactBrowserEventEmitter.injection,NativeComponent:ReactNativeComponent.injection,Perf:ReactPerf.injection,RootIndex:ReactRootIndex.injection,Updates:ReactUpdates.injection};module.exports=ReactInjection;

},{"./DOMProperty":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/DOMProperty.js","./EventPluginHub":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/EventPluginHub.js","./ReactBrowserEventEmitter":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactBrowserEventEmitter.js","./ReactClass":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactClass.js","./ReactComponentEnvironment":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactComponentEnvironment.js","./ReactEmptyComponent":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactEmptyComponent.js","./ReactNativeComponent":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactNativeComponent.js","./ReactPerf":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactPerf.js","./ReactRootIndex":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactRootIndex.js","./ReactUpdates":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactUpdates.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactInputSelection.js":[function(require,module,exports){
"use strict";var ReactDOMSelection=require("./ReactDOMSelection"),containsNode=require("fbjs/lib/containsNode"),focusNode=require("fbjs/lib/focusNode"),getActiveElement=require("fbjs/lib/getActiveElement");function isInDocument(e){return containsNode(document.documentElement,e)}var ReactInputSelection={hasSelectionCapabilities:function(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&"text"===e.type||"textarea"===t||"true"===e.contentEditable)},getSelectionInformation:function(){var e=getActiveElement();return{focusedElem:e,selectionRange:ReactInputSelection.hasSelectionCapabilities(e)?ReactInputSelection.getSelection(e):null}},restoreSelection:function(e){var t=getActiveElement(),n=e.focusedElem,o=e.selectionRange;t!==n&&isInDocument(n)&&(ReactInputSelection.hasSelectionCapabilities(n)&&ReactInputSelection.setSelection(n,o),focusNode(n))},getSelection:function(e){var t;if("selectionStart"in e)t={start:e.selectionStart,end:e.selectionEnd};else if(document.selection&&e.nodeName&&"input"===e.nodeName.toLowerCase()){var n=document.selection.createRange();n.parentElement()===e&&(t={start:-n.moveStart("character",-e.value.length),end:-n.moveEnd("character",-e.value.length)})}else t=ReactDOMSelection.getOffsets(e);return t||{start:0,end:0}},setSelection:function(e,t){var n=t.start,o=t.end;if(void 0===o&&(o=n),"selectionStart"in e)e.selectionStart=n,e.selectionEnd=Math.min(o,e.value.length);else if(document.selection&&e.nodeName&&"input"===e.nodeName.toLowerCase()){var c=e.createTextRange();c.collapse(!0),c.moveStart("character",n),c.moveEnd("character",o-n),c.select()}else ReactDOMSelection.setOffsets(e,t)}};module.exports=ReactInputSelection;

},{"./ReactDOMSelection":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactDOMSelection.js","fbjs/lib/containsNode":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/containsNode.js","fbjs/lib/focusNode":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/focusNode.js","fbjs/lib/getActiveElement":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/getActiveElement.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactInstanceHandles.js":[function(require,module,exports){
"use strict";var ReactRootIndex=require("./ReactRootIndex"),invariant=require("fbjs/lib/invariant"),SEPARATOR=".",SEPARATOR_LENGTH=SEPARATOR.length,MAX_TREE_DEPTH=1e4;function getReactRootIDString(t){return SEPARATOR+t.toString(36)}function isBoundary(t,e){return t.charAt(e)===SEPARATOR||e===t.length}function isValidID(t){return""===t||t.charAt(0)===SEPARATOR&&t.charAt(t.length-1)!==SEPARATOR}function isAncestorIDOf(t,e){return 0===e.indexOf(t)&&isBoundary(e,t.length)}function getParentID(t){return t?t.substr(0,t.lastIndexOf(SEPARATOR)):""}function getNextDescendantID(t,e){if(isValidID(t)&&isValidID(e)||invariant(!1),isAncestorIDOf(t,e)||invariant(!1),t===e)return t;var r;for(r=t.length+SEPARATOR_LENGTH;r<e.length&&!isBoundary(e,r);r++);return e.substr(0,r)}function getFirstCommonAncestorID(t,e){var r=Math.min(t.length,e.length);if(0===r)return"";for(var n=0,a=0;a<=r;a++)if(isBoundary(t,a)&&isBoundary(e,a))n=a;else if(t.charAt(a)!==e.charAt(a))break;var i=t.substr(0,n);return isValidID(i)||invariant(!1),i}function traverseParentPath(t,e,r,n,a,i){(t=t||"")===(e=e||"")&&invariant(!1);var s=isAncestorIDOf(e,t);s||isAncestorIDOf(t,e)||invariant(!1);for(var o=0,c=s?getParentID:getNextDescendantID,R=t;;R=c(R,e)){var A;if(a&&R===t||i&&R===e||(A=r(R,s,n)),!1===A||R===e)break;o++<MAX_TREE_DEPTH||invariant(!1)}}var ReactInstanceHandles={createReactRootID:function(){return getReactRootIDString(ReactRootIndex.createReactRootIndex())},createReactID:function(t,e){return t+e},getReactRootIDFromNodeID:function(t){if(t&&t.charAt(0)===SEPARATOR&&t.length>1){var e=t.indexOf(SEPARATOR,1);return e>-1?t.substr(0,e):t}return null},traverseEnterLeave:function(t,e,r,n,a){var i=getFirstCommonAncestorID(t,e);i!==t&&traverseParentPath(t,i,r,n,!1,!0),i!==e&&traverseParentPath(i,e,r,a,!0,!1)},traverseTwoPhase:function(t,e,r){t&&(traverseParentPath("",t,e,r,!0,!1),traverseParentPath(t,"",e,r,!1,!0))},traverseTwoPhaseSkipTarget:function(t,e,r){t&&(traverseParentPath("",t,e,r,!0,!0),traverseParentPath(t,"",e,r,!0,!0))},traverseAncestors:function(t,e,r){traverseParentPath("",t,e,r,!0,!1)},getFirstCommonAncestorID:getFirstCommonAncestorID,_getNextDescendantID:getNextDescendantID,isAncestorIDOf:isAncestorIDOf,SEPARATOR:SEPARATOR};module.exports=ReactInstanceHandles;

},{"./ReactRootIndex":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactRootIndex.js","fbjs/lib/invariant":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/invariant.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactInstanceMap.js":[function(require,module,exports){
"use strict";var ReactInstanceMap={remove:function(n){n._reactInternalInstance=void 0},get:function(n){return n._reactInternalInstance},has:function(n){return void 0!==n._reactInternalInstance},set:function(n,t){n._reactInternalInstance=t}};module.exports=ReactInstanceMap;

},{}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactIsomorphic.js":[function(require,module,exports){
"use strict";var ReactChildren=require("./ReactChildren"),ReactComponent=require("./ReactComponent"),ReactClass=require("./ReactClass"),ReactDOMFactories=require("./ReactDOMFactories"),ReactElement=require("./ReactElement"),ReactElementValidator=require("./ReactElementValidator"),ReactPropTypes=require("./ReactPropTypes"),ReactVersion=require("./ReactVersion"),assign=require("./Object.assign"),onlyChild=require("./onlyChild"),createElement=ReactElement.createElement,createFactory=ReactElement.createFactory,cloneElement=ReactElement.cloneElement;var React={Children:{map:ReactChildren.map,forEach:ReactChildren.forEach,count:ReactChildren.count,toArray:ReactChildren.toArray,only:onlyChild},Component:ReactComponent,createElement:createElement,cloneElement:cloneElement,isValidElement:ReactElement.isValidElement,PropTypes:ReactPropTypes,createClass:ReactClass.createClass,createFactory:createFactory,createMixin:function(e){return e},DOM:ReactDOMFactories,version:ReactVersion,__spread:assign};module.exports=React;

},{"./Object.assign":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/Object.assign.js","./ReactChildren":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactChildren.js","./ReactClass":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactClass.js","./ReactComponent":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactComponent.js","./ReactDOMFactories":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactDOMFactories.js","./ReactElement":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactElement.js","./ReactElementValidator":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactElementValidator.js","./ReactPropTypes":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactPropTypes.js","./ReactVersion":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactVersion.js","./onlyChild":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/onlyChild.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactMarkupChecksum.js":[function(require,module,exports){
"use strict";var adler32=require("./adler32"),TAG_END=/\/?>/,ReactMarkupChecksum={CHECKSUM_ATTR_NAME:"data-react-checksum",addChecksumToMarkup:function(e){var r=adler32(e);return e.replace(TAG_END," "+ReactMarkupChecksum.CHECKSUM_ATTR_NAME+'="'+r+'"$&')},canReuseMarkup:function(e,r){var a=r.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);return a=a&&parseInt(a,10),adler32(e)===a}};module.exports=ReactMarkupChecksum;

},{"./adler32":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/adler32.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactMount.js":[function(require,module,exports){
"use strict";var rootElementsByReactRootID,DOMProperty=require("./DOMProperty"),ReactBrowserEventEmitter=require("./ReactBrowserEventEmitter"),ReactCurrentOwner=require("./ReactCurrentOwner"),ReactDOMFeatureFlags=require("./ReactDOMFeatureFlags"),ReactElement=require("./ReactElement"),ReactEmptyComponentRegistry=require("./ReactEmptyComponentRegistry"),ReactInstanceHandles=require("./ReactInstanceHandles"),ReactInstanceMap=require("./ReactInstanceMap"),ReactMarkupChecksum=require("./ReactMarkupChecksum"),ReactPerf=require("./ReactPerf"),ReactReconciler=require("./ReactReconciler"),ReactUpdateQueue=require("./ReactUpdateQueue"),ReactUpdates=require("./ReactUpdates"),assign=require("./Object.assign"),emptyObject=require("fbjs/lib/emptyObject"),containsNode=require("fbjs/lib/containsNode"),instantiateReactComponent=require("./instantiateReactComponent"),invariant=require("fbjs/lib/invariant"),setInnerHTML=require("./setInnerHTML"),shouldUpdateReactComponent=require("./shouldUpdateReactComponent"),validateDOMNesting=require("./validateDOMNesting"),warning=require("fbjs/lib/warning"),ATTR_NAME=DOMProperty.ID_ATTRIBUTE_NAME,nodeCache={},ELEMENT_NODE_TYPE=1,DOC_NODE_TYPE=9,DOCUMENT_FRAGMENT_NODE_TYPE=11,ownerDocumentContextKey="__ReactMount_ownerDocument$"+Math.random().toString(36).slice(2),instancesByReactRootID={},containersByReactRootID={},findComponentRootReusableArray=[];function firstDifferenceIndex(e,t){for(var n=Math.min(e.length,t.length),o=0;o<n;o++)if(e.charAt(o)!==t.charAt(o))return o;return e.length===t.length?-1:n}function getReactRootElementInContainer(e){return e?e.nodeType===DOC_NODE_TYPE?e.documentElement:e.firstChild:null}function getReactRootID(e){var t=getReactRootElementInContainer(e);return t&&ReactMount.getID(t)}function getID(e){var t=internalGetID(e);if(t)if(nodeCache.hasOwnProperty(t)){var n=nodeCache[t];n!==e&&(isValid(n,t)&&invariant(!1),nodeCache[t]=e)}else nodeCache[t]=e;return t}function internalGetID(e){return e&&e.getAttribute&&e.getAttribute(ATTR_NAME)||""}function setID(e,t){var n=internalGetID(e);n!==t&&delete nodeCache[n],e.setAttribute(ATTR_NAME,t),nodeCache[t]=e}function getNode(e){return nodeCache.hasOwnProperty(e)&&isValid(nodeCache[e],e)||(nodeCache[e]=ReactMount.findReactNodeByID(e)),nodeCache[e]}function getNodeFromInstance(e){var t=ReactInstanceMap.get(e)._rootNodeID;return ReactEmptyComponentRegistry.isNullComponentID(t)?null:(nodeCache.hasOwnProperty(t)&&isValid(nodeCache[t],t)||(nodeCache[t]=ReactMount.findReactNodeByID(t)),nodeCache[t])}function isValid(e,t){if(e){internalGetID(e)!==t&&invariant(!1);var n=ReactMount.findReactContainerForID(t);if(n&&containsNode(n,e))return!0}return!1}function purgeID(e){delete nodeCache[e]}var deepestNodeSoFar=null;function findDeepestCachedAncestorImpl(e){var t=nodeCache[e];if(!t||!isValid(t,e))return!1;deepestNodeSoFar=t}function findDeepestCachedAncestor(e){deepestNodeSoFar=null,ReactInstanceHandles.traverseAncestors(e,findDeepestCachedAncestorImpl);var t=deepestNodeSoFar;return deepestNodeSoFar=null,t}function mountComponentIntoNode(e,t,n,o,r,a){ReactDOMFeatureFlags.useCreateElement&&(a=assign({},a),n.nodeType===DOC_NODE_TYPE?a[ownerDocumentContextKey]=n:a[ownerDocumentContextKey]=n.ownerDocument);var c=ReactReconciler.mountComponent(e,t,o,a);e._renderedComponent._topLevelWrapper=e,ReactMount._mountImageIntoNode(c,n,r,o)}function batchedMountComponentIntoNode(e,t,n,o,r){var a=ReactUpdates.ReactReconcileTransaction.getPooled(o);a.perform(mountComponentIntoNode,null,e,t,n,a,o,r),ReactUpdates.ReactReconcileTransaction.release(a)}function unmountComponentFromNode(e,t){for(ReactReconciler.unmountComponent(e),t.nodeType===DOC_NODE_TYPE&&(t=t.documentElement);t.lastChild;)t.removeChild(t.lastChild)}function hasNonRootReactChild(e){var t=getReactRootID(e);return!!t&&t!==ReactInstanceHandles.getReactRootIDFromNodeID(t)}function findFirstReactDOMImpl(e){for(;e&&e.parentNode!==e;e=e.parentNode)if(1===e.nodeType){var t=internalGetID(e);if(t){var n,o=ReactInstanceHandles.getReactRootIDFromNodeID(t),r=e;do{if(n=internalGetID(r),null==(r=r.parentNode))return null}while(n!==o);if(r===containersByReactRootID[o])return e}}return null}var TopLevelWrapper=function(){};TopLevelWrapper.prototype.isReactComponent={},TopLevelWrapper.prototype.render=function(){return this.props};var ReactMount={TopLevelWrapper:TopLevelWrapper,_instancesByReactRootID:instancesByReactRootID,scrollMonitor:function(e,t){t()},_updateRootComponent:function(e,t,n,o){return ReactMount.scrollMonitor(n,function(){ReactUpdateQueue.enqueueElementInternal(e,t),o&&ReactUpdateQueue.enqueueCallbackInternal(e,o)}),e},_registerComponent:function(e,t){(!t||t.nodeType!==ELEMENT_NODE_TYPE&&t.nodeType!==DOC_NODE_TYPE&&t.nodeType!==DOCUMENT_FRAGMENT_NODE_TYPE)&&invariant(!1),ReactBrowserEventEmitter.ensureScrollValueMonitoring();var n=ReactMount.registerContainer(t);return instancesByReactRootID[n]=e,n},_renderNewRootComponent:function(e,t,n,o){var r=instantiateReactComponent(e,null),a=ReactMount._registerComponent(r,t);return ReactUpdates.batchedUpdates(batchedMountComponentIntoNode,r,a,t,n,o),r},renderSubtreeIntoContainer:function(e,t,n,o){return(null==e||null==e._reactInternalInstance)&&invariant(!1),ReactMount._renderSubtreeIntoContainer(e,t,n,o)},_renderSubtreeIntoContainer:function(e,t,n,o){ReactElement.isValidElement(t)||invariant(!1);var r=new ReactElement(TopLevelWrapper,null,null,null,null,null,t),a=instancesByReactRootID[getReactRootID(n)];if(a){var c=a._currentElement.props;if(shouldUpdateReactComponent(c,t)){var i=a._renderedComponent.getPublicInstance(),u=o&&function(){o.call(i)};return ReactMount._updateRootComponent(a,r,n,u),i}ReactMount.unmountComponentAtNode(n)}var R=getReactRootElementInContainer(n),d=R&&!!internalGetID(R),s=hasNonRootReactChild(n),l=d&&!a&&!s,p=ReactMount._renderNewRootComponent(r,n,l,null!=e?e._reactInternalInstance._processChildContext(e._reactInternalInstance._context):emptyObject)._renderedComponent.getPublicInstance();return o&&o.call(p),p},render:function(e,t,n){return ReactMount._renderSubtreeIntoContainer(null,e,t,n)},registerContainer:function(e){var t=getReactRootID(e);return t&&(t=ReactInstanceHandles.getReactRootIDFromNodeID(t)),t||(t=ReactInstanceHandles.createReactRootID()),containersByReactRootID[t]=e,t},unmountComponentAtNode:function(e){(!e||e.nodeType!==ELEMENT_NODE_TYPE&&e.nodeType!==DOC_NODE_TYPE&&e.nodeType!==DOCUMENT_FRAGMENT_NODE_TYPE)&&invariant(!1);var t=getReactRootID(e),n=instancesByReactRootID[t];if(!n){hasNonRootReactChild(e);var o=internalGetID(e);o&&ReactInstanceHandles.getReactRootIDFromNodeID(o);return!1}return ReactUpdates.batchedUpdates(unmountComponentFromNode,n,e),delete instancesByReactRootID[t],delete containersByReactRootID[t],!0},findReactContainerForID:function(e){var t=ReactInstanceHandles.getReactRootIDFromNodeID(e),n=containersByReactRootID[t];return n},findReactNodeByID:function(e){var t=ReactMount.findReactContainerForID(e);return ReactMount.findComponentRoot(t,e)},getFirstReactDOM:function(e){return findFirstReactDOMImpl(e)},findComponentRoot:function(e,t){var n=findComponentRootReusableArray,o=0,r=findDeepestCachedAncestor(t)||e;for(0,n[0]=r.firstChild,n.length=1;o<n.length;){for(var a,c=n[o++];c;){var i=ReactMount.getID(c);i?t===i?a=c:ReactInstanceHandles.isAncestorIDOf(i,t)&&(n.length=o=0,n.push(c.firstChild)):n.push(c.firstChild),c=c.nextSibling}if(a)return n.length=0,a}n.length=0,invariant(!1)},_mountImageIntoNode:function(e,t,n,o){if((!t||t.nodeType!==ELEMENT_NODE_TYPE&&t.nodeType!==DOC_NODE_TYPE&&t.nodeType!==DOCUMENT_FRAGMENT_NODE_TYPE)&&invariant(!1),n){var r=getReactRootElementInContainer(t);if(ReactMarkupChecksum.canReuseMarkup(e,r))return;var a=r.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);r.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);var c=r.outerHTML;r.setAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME,a);var i=e,u=firstDifferenceIndex(i,c);i.substring(u-20,u+20),c.substring(u-20,u+20);t.nodeType===DOC_NODE_TYPE&&invariant(!1)}if(t.nodeType===DOC_NODE_TYPE&&invariant(!1),o.useCreateElement){for(;t.lastChild;)t.removeChild(t.lastChild);t.appendChild(e)}else setInnerHTML(t,e)},ownerDocumentContextKey:ownerDocumentContextKey,getReactRootID:getReactRootID,getID:getID,setID:setID,getNode:getNode,getNodeFromInstance:getNodeFromInstance,isValid:isValid,purgeID:purgeID};ReactPerf.measureMethods(ReactMount,"ReactMount",{_renderNewRootComponent:"_renderNewRootComponent",_mountImageIntoNode:"_mountImageIntoNode"}),module.exports=ReactMount;

},{"./DOMProperty":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/DOMProperty.js","./Object.assign":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/Object.assign.js","./ReactBrowserEventEmitter":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactBrowserEventEmitter.js","./ReactCurrentOwner":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactCurrentOwner.js","./ReactDOMFeatureFlags":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactDOMFeatureFlags.js","./ReactElement":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactElement.js","./ReactEmptyComponentRegistry":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactEmptyComponentRegistry.js","./ReactInstanceHandles":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactInstanceHandles.js","./ReactInstanceMap":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactInstanceMap.js","./ReactMarkupChecksum":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactMarkupChecksum.js","./ReactPerf":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactPerf.js","./ReactReconciler":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactReconciler.js","./ReactUpdateQueue":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactUpdateQueue.js","./ReactUpdates":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactUpdates.js","./instantiateReactComponent":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/instantiateReactComponent.js","./setInnerHTML":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/setInnerHTML.js","./shouldUpdateReactComponent":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/shouldUpdateReactComponent.js","./validateDOMNesting":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/validateDOMNesting.js","fbjs/lib/containsNode":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/containsNode.js","fbjs/lib/emptyObject":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/emptyObject.js","fbjs/lib/invariant":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/invariant.js","fbjs/lib/warning":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/warning.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactMultiChild.js":[function(require,module,exports){
"use strict";var ReactComponentEnvironment=require("./ReactComponentEnvironment"),ReactMultiChildUpdateTypes=require("./ReactMultiChildUpdateTypes"),ReactCurrentOwner=require("./ReactCurrentOwner"),ReactReconciler=require("./ReactReconciler"),ReactChildReconciler=require("./ReactChildReconciler"),flattenChildren=require("./flattenChildren"),updateDepth=0,updateQueue=[],markupQueue=[];function enqueueInsertMarkup(e,n,t){updateQueue.push({parentID:e,parentNode:null,type:ReactMultiChildUpdateTypes.INSERT_MARKUP,markupIndex:markupQueue.push(n)-1,content:null,fromIndex:null,toIndex:t})}function enqueueMove(e,n,t){updateQueue.push({parentID:e,parentNode:null,type:ReactMultiChildUpdateTypes.MOVE_EXISTING,markupIndex:null,content:null,fromIndex:n,toIndex:t})}function enqueueRemove(e,n){updateQueue.push({parentID:e,parentNode:null,type:ReactMultiChildUpdateTypes.REMOVE_NODE,markupIndex:null,content:null,fromIndex:n,toIndex:null})}function enqueueSetMarkup(e,n){updateQueue.push({parentID:e,parentNode:null,type:ReactMultiChildUpdateTypes.SET_MARKUP,markupIndex:null,content:n,fromIndex:null,toIndex:null})}function enqueueTextContent(e,n){updateQueue.push({parentID:e,parentNode:null,type:ReactMultiChildUpdateTypes.TEXT_CONTENT,markupIndex:null,content:n,fromIndex:null,toIndex:null})}function processQueue(){updateQueue.length&&(ReactComponentEnvironment.processChildrenUpdates(updateQueue,markupQueue),clearQueue())}function clearQueue(){updateQueue.length=0,markupQueue.length=0}var ReactMultiChild={Mixin:{_reconcilerInstantiateChildren:function(e,n,t){return ReactChildReconciler.instantiateChildren(e,n,t)},_reconcilerUpdateChildren:function(e,n,t,u){var r;return r=flattenChildren(n),ReactChildReconciler.updateChildren(e,r,t,u)},mountChildren:function(e,n,t){var u=this._reconcilerInstantiateChildren(e,n,t);this._renderedChildren=u;var r=[],i=0;for(var o in u)if(u.hasOwnProperty(o)){var d=u[o],l=this._rootNodeID+o,a=ReactReconciler.mountComponent(d,l,n,t);d._mountIndex=i++,r.push(a)}return r},updateTextContent:function(e){updateDepth++;var n=!0;try{var t=this._renderedChildren;for(var u in ReactChildReconciler.unmountChildren(t),t)t.hasOwnProperty(u)&&this._unmountChild(t[u]);this.setTextContent(e),n=!1}finally{--updateDepth||(n?clearQueue():processQueue())}},updateMarkup:function(e){updateDepth++;var n=!0;try{var t=this._renderedChildren;for(var u in ReactChildReconciler.unmountChildren(t),t)t.hasOwnProperty(u)&&this._unmountChildByName(t[u],u);this.setMarkup(e),n=!1}finally{--updateDepth||(n?clearQueue():processQueue())}},updateChildren:function(e,n,t){updateDepth++;var u=!0;try{this._updateChildren(e,n,t),u=!1}finally{--updateDepth||(u?clearQueue():processQueue())}},_updateChildren:function(e,n,t){var u=this._renderedChildren,r=this._reconcilerUpdateChildren(u,e,n,t);if(this._renderedChildren=r,r||u){var i,o=0,d=0;for(i in r)if(r.hasOwnProperty(i)){var l=u&&u[i],a=r[i];l===a?(this.moveChild(l,d,o),o=Math.max(l._mountIndex,o),l._mountIndex=d):(l&&(o=Math.max(l._mountIndex,o),this._unmountChild(l)),this._mountChildByNameAtIndex(a,i,d,n,t)),d++}for(i in u)!u.hasOwnProperty(i)||r&&r.hasOwnProperty(i)||this._unmountChild(u[i])}},unmountChildren:function(){var e=this._renderedChildren;ReactChildReconciler.unmountChildren(e),this._renderedChildren=null},moveChild:function(e,n,t){e._mountIndex<t&&enqueueMove(this._rootNodeID,e._mountIndex,n)},createChild:function(e,n){enqueueInsertMarkup(this._rootNodeID,n,e._mountIndex)},removeChild:function(e){enqueueRemove(this._rootNodeID,e._mountIndex)},setTextContent:function(e){enqueueTextContent(this._rootNodeID,e)},setMarkup:function(e){enqueueSetMarkup(this._rootNodeID,e)},_mountChildByNameAtIndex:function(e,n,t,u,r){var i=this._rootNodeID+n,o=ReactReconciler.mountComponent(e,i,u,r);e._mountIndex=t,this.createChild(e,o)},_unmountChild:function(e){this.removeChild(e),e._mountIndex=null}}};module.exports=ReactMultiChild;

},{"./ReactChildReconciler":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactChildReconciler.js","./ReactComponentEnvironment":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactComponentEnvironment.js","./ReactCurrentOwner":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactCurrentOwner.js","./ReactMultiChildUpdateTypes":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactMultiChildUpdateTypes.js","./ReactReconciler":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactReconciler.js","./flattenChildren":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/flattenChildren.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactMultiChildUpdateTypes.js":[function(require,module,exports){
"use strict";var keyMirror=require("fbjs/lib/keyMirror"),ReactMultiChildUpdateTypes=keyMirror({INSERT_MARKUP:null,MOVE_EXISTING:null,REMOVE_NODE:null,SET_MARKUP:null,TEXT_CONTENT:null});module.exports=ReactMultiChildUpdateTypes;

},{"fbjs/lib/keyMirror":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/keyMirror.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactNativeComponent.js":[function(require,module,exports){
"use strict";var assign=require("./Object.assign"),invariant=require("fbjs/lib/invariant"),autoGenerateWrapperClass=null,genericComponentClass=null,tagToComponentClass={},textComponentClass=null,ReactNativeComponentInjection={injectGenericComponentClass:function(n){genericComponentClass=n},injectTextComponentClass:function(n){textComponentClass=n},injectComponentClasses:function(n){assign(tagToComponentClass,n)}};function getComponentClassForElement(n){if("function"==typeof n.type)return n.type;var e=n.type,t=tagToComponentClass[e];return null==t&&(tagToComponentClass[e]=t=autoGenerateWrapperClass(e)),t}function createInternalComponent(n){return genericComponentClass||invariant(!1),new genericComponentClass(n.type,n.props)}function createInstanceForText(n){return new textComponentClass(n)}function isTextComponent(n){return n instanceof textComponentClass}var ReactNativeComponent={getComponentClassForElement:getComponentClassForElement,createInternalComponent:createInternalComponent,createInstanceForText:createInstanceForText,isTextComponent:isTextComponent,injection:ReactNativeComponentInjection};module.exports=ReactNativeComponent;

},{"./Object.assign":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/Object.assign.js","fbjs/lib/invariant":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/invariant.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactNoopUpdateQueue.js":[function(require,module,exports){
"use strict";var warning=require("fbjs/lib/warning");function warnTDZ(e,n){0}var ReactNoopUpdateQueue={isMounted:function(e){return!1},enqueueCallback:function(e,n){},enqueueForceUpdate:function(e){warnTDZ(e,"forceUpdate")},enqueueReplaceState:function(e,n){warnTDZ(e,"replaceState")},enqueueSetState:function(e,n){warnTDZ(e,"setState")},enqueueSetProps:function(e,n){warnTDZ(e,"setProps")},enqueueReplaceProps:function(e,n){warnTDZ(e,"replaceProps")}};module.exports=ReactNoopUpdateQueue;

},{"fbjs/lib/warning":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/warning.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactOwner.js":[function(require,module,exports){
"use strict";var invariant=require("fbjs/lib/invariant"),ReactOwner={isValidOwner:function(e){return!(!e||"function"!=typeof e.attachRef||"function"!=typeof e.detachRef)},addComponentAsRefTo:function(e,n,t){ReactOwner.isValidOwner(t)||invariant(!1),t.attachRef(n,e)},removeComponentAsRefFrom:function(e,n,t){ReactOwner.isValidOwner(t)||invariant(!1),t.getPublicInstance().refs[n]===e.getPublicInstance()&&t.detachRef(n)}};module.exports=ReactOwner;

},{"fbjs/lib/invariant":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/invariant.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactPerf.js":[function(require,module,exports){
"use strict";var ReactPerf={enableMeasure:!1,storedMeasure:_noMeasure,measureMethods:function(e,r,t){},measure:function(e,r,t){return t},injection:{injectMeasure:function(e){ReactPerf.storedMeasure=e}}};function _noMeasure(e,r,t){return t}module.exports=ReactPerf;

},{}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactPropTypeLocationNames.js":[function(require,module,exports){
"use strict";var ReactPropTypeLocationNames={};module.exports=ReactPropTypeLocationNames;

},{}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactPropTypeLocations.js":[function(require,module,exports){
"use strict";var keyMirror=require("fbjs/lib/keyMirror"),ReactPropTypeLocations=keyMirror({prop:null,context:null,childContext:null});module.exports=ReactPropTypeLocations;

},{"fbjs/lib/keyMirror":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/keyMirror.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactPropTypes.js":[function(require,module,exports){
"use strict";var ReactElement=require("./ReactElement"),ReactPropTypeLocationNames=require("./ReactPropTypeLocationNames"),emptyFunction=require("fbjs/lib/emptyFunction"),getIteratorFn=require("./getIteratorFn"),ANONYMOUS="<<anonymous>>",ReactPropTypes={array:createPrimitiveTypeChecker("array"),bool:createPrimitiveTypeChecker("boolean"),func:createPrimitiveTypeChecker("function"),number:createPrimitiveTypeChecker("number"),object:createPrimitiveTypeChecker("object"),string:createPrimitiveTypeChecker("string"),any:createAnyTypeChecker(),arrayOf:createArrayOfTypeChecker,element:createElementTypeChecker(),instanceOf:createInstanceTypeChecker,node:createNodeChecker(),objectOf:createObjectOfTypeChecker,oneOf:createEnumTypeChecker,oneOfType:createUnionTypeChecker,shape:createShapeTypeChecker};function createChainableTypeChecker(e){function r(r,n,t,a,c,i){if(a=a||ANONYMOUS,i=i||t,null==n[t]){var o=ReactPropTypeLocationNames[c];return r?new Error("Required "+o+" `"+i+"` was not specified in `"+a+"`."):null}return e(n,t,a,c,i)}var n=r.bind(null,!1);return n.isRequired=r.bind(null,!0),n}function createPrimitiveTypeChecker(e){return createChainableTypeChecker(function(r,n,t,a,c){var i=r[n];if(getPropType(i)!==e){var o=ReactPropTypeLocationNames[a],u=getPreciseType(i);return new Error("Invalid "+o+" `"+c+"` of type `"+u+"` supplied to `"+t+"`, expected `"+e+"`.")}return null})}function createAnyTypeChecker(){return createChainableTypeChecker(emptyFunction.thatReturns(null))}function createArrayOfTypeChecker(e){return createChainableTypeChecker(function(r,n,t,a,c){var i=r[n];if(!Array.isArray(i)){var o=ReactPropTypeLocationNames[a],u=getPropType(i);return new Error("Invalid "+o+" `"+c+"` of type `"+u+"` supplied to `"+t+"`, expected an array.")}for(var p=0;p<i.length;p++){var l=e(i,p,t,a,c+"["+p+"]","SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");if(l instanceof Error)return l}return null})}function createElementTypeChecker(){return createChainableTypeChecker(function(e,r,n,t,a){if(!ReactElement.isValidElement(e[r])){var c=ReactPropTypeLocationNames[t];return new Error("Invalid "+c+" `"+a+"` supplied to `"+n+"`, expected a single ReactElement.")}return null})}function createInstanceTypeChecker(e){return createChainableTypeChecker(function(r,n,t,a,c){if(!(r[n]instanceof e)){var i=ReactPropTypeLocationNames[a],o=e.name||ANONYMOUS,u=getClassName(r[n]);return new Error("Invalid "+i+" `"+c+"` of type `"+u+"` supplied to `"+t+"`, expected instance of `"+o+"`.")}return null})}function createEnumTypeChecker(e){if(!Array.isArray(e))return createChainableTypeChecker(function(){return new Error("Invalid argument supplied to oneOf, expected an instance of array.")});return createChainableTypeChecker(function(r,n,t,a,c){for(var i=r[n],o=0;o<e.length;o++)if(i===e[o])return null;var u=ReactPropTypeLocationNames[a],p=JSON.stringify(e);return new Error("Invalid "+u+" `"+c+"` of value `"+i+"` supplied to `"+t+"`, expected one of "+p+".")})}function createObjectOfTypeChecker(e){return createChainableTypeChecker(function(r,n,t,a,c){var i=r[n],o=getPropType(i);if("object"!==o){var u=ReactPropTypeLocationNames[a];return new Error("Invalid "+u+" `"+c+"` of type `"+o+"` supplied to `"+t+"`, expected an object.")}for(var p in i)if(i.hasOwnProperty(p)){var l=e(i,p,t,a,c+"."+p,"SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");if(l instanceof Error)return l}return null})}function createUnionTypeChecker(e){if(!Array.isArray(e))return createChainableTypeChecker(function(){return new Error("Invalid argument supplied to oneOfType, expected an instance of array.")});return createChainableTypeChecker(function(r,n,t,a,c){for(var i=0;i<e.length;i++)if(null==(0,e[i])(r,n,t,a,c,"SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"))return null;var o=ReactPropTypeLocationNames[a];return new Error("Invalid "+o+" `"+c+"` supplied to `"+t+"`.")})}function createNodeChecker(){return createChainableTypeChecker(function(e,r,n,t,a){if(!isNode(e[r])){var c=ReactPropTypeLocationNames[t];return new Error("Invalid "+c+" `"+a+"` supplied to `"+n+"`, expected a ReactNode.")}return null})}function createShapeTypeChecker(e){return createChainableTypeChecker(function(r,n,t,a,c){var i=r[n],o=getPropType(i);if("object"!==o){var u=ReactPropTypeLocationNames[a];return new Error("Invalid "+u+" `"+c+"` of type `"+o+"` supplied to `"+t+"`, expected `object`.")}for(var p in e){var l=e[p];if(l){var y=l(i,p,t,a,c+"."+p,"SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");if(y)return y}}return null})}function isNode(e){switch(typeof e){case"number":case"string":case"undefined":return!0;case"boolean":return!e;case"object":if(Array.isArray(e))return e.every(isNode);if(null===e||ReactElement.isValidElement(e))return!0;var r=getIteratorFn(e);if(!r)return!1;var n,t=r.call(e);if(r!==e.entries){for(;!(n=t.next()).done;)if(!isNode(n.value))return!1}else for(;!(n=t.next()).done;){var a=n.value;if(a&&!isNode(a[1]))return!1}return!0;default:return!1}}function getPropType(e){var r=typeof e;return Array.isArray(e)?"array":e instanceof RegExp?"object":r}function getPreciseType(e){var r=getPropType(e);if("object"===r){if(e instanceof Date)return"date";if(e instanceof RegExp)return"regexp"}return r}function getClassName(e){return e.constructor&&e.constructor.name?e.constructor.name:"<<anonymous>>"}module.exports=ReactPropTypes;

},{"./ReactElement":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactElement.js","./ReactPropTypeLocationNames":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactPropTypeLocationNames.js","./getIteratorFn":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/getIteratorFn.js","fbjs/lib/emptyFunction":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/emptyFunction.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactReconcileTransaction.js":[function(require,module,exports){
"use strict";var CallbackQueue=require("./CallbackQueue"),PooledClass=require("./PooledClass"),ReactBrowserEventEmitter=require("./ReactBrowserEventEmitter"),ReactDOMFeatureFlags=require("./ReactDOMFeatureFlags"),ReactInputSelection=require("./ReactInputSelection"),Transaction=require("./Transaction"),assign=require("./Object.assign"),SELECTION_RESTORATION={initialize:ReactInputSelection.getSelectionInformation,close:ReactInputSelection.restoreSelection},EVENT_SUPPRESSION={initialize:function(){var e=ReactBrowserEventEmitter.isEnabled();return ReactBrowserEventEmitter.setEnabled(!1),e},close:function(e){ReactBrowserEventEmitter.setEnabled(e)}},ON_DOM_READY_QUEUEING={initialize:function(){this.reactMountReady.reset()},close:function(){this.reactMountReady.notifyAll()}},TRANSACTION_WRAPPERS=[SELECTION_RESTORATION,EVENT_SUPPRESSION,ON_DOM_READY_QUEUEING];function ReactReconcileTransaction(e){this.reinitializeTransaction(),this.renderToStaticMarkup=!1,this.reactMountReady=CallbackQueue.getPooled(null),this.useCreateElement=!e&&ReactDOMFeatureFlags.useCreateElement}var Mixin={getTransactionWrappers:function(){return TRANSACTION_WRAPPERS},getReactMountReady:function(){return this.reactMountReady},destructor:function(){CallbackQueue.release(this.reactMountReady),this.reactMountReady=null}};assign(ReactReconcileTransaction.prototype,Transaction.Mixin,Mixin),PooledClass.addPoolingTo(ReactReconcileTransaction),module.exports=ReactReconcileTransaction;

},{"./CallbackQueue":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/CallbackQueue.js","./Object.assign":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/Object.assign.js","./PooledClass":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/PooledClass.js","./ReactBrowserEventEmitter":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactBrowserEventEmitter.js","./ReactDOMFeatureFlags":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactDOMFeatureFlags.js","./ReactInputSelection":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactInputSelection.js","./Transaction":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/Transaction.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactReconciler.js":[function(require,module,exports){
"use strict";var ReactRef=require("./ReactRef");function attachRefs(){ReactRef.attachRefs(this,this._currentElement)}var ReactReconciler={mountComponent:function(e,t,n,c){var r=e.mountComponent(t,n,c);return e._currentElement&&null!=e._currentElement.ref&&n.getReactMountReady().enqueue(attachRefs,e),r},unmountComponent:function(e){ReactRef.detachRefs(e,e._currentElement),e.unmountComponent()},receiveComponent:function(e,t,n,c){var r=e._currentElement;if(t!==r||c!==e._context){var a=ReactRef.shouldUpdateRefs(r,t);a&&ReactRef.detachRefs(e,r),e.receiveComponent(t,n,c),a&&e._currentElement&&null!=e._currentElement.ref&&n.getReactMountReady().enqueue(attachRefs,e)}},performUpdateIfNecessary:function(e,t){e.performUpdateIfNecessary(t)}};module.exports=ReactReconciler;

},{"./ReactRef":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactRef.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactRef.js":[function(require,module,exports){
"use strict";var ReactOwner=require("./ReactOwner"),ReactRef={};function attachRef(e,n,t){"function"==typeof e?e(n.getPublicInstance()):ReactOwner.addComponentAsRefTo(n,e,t)}function detachRef(e,n,t){"function"==typeof e?e(null):ReactOwner.removeComponentAsRefFrom(n,e,t)}ReactRef.attachRefs=function(e,n){if(null!==n&&!1!==n){var t=n.ref;null!=t&&attachRef(t,e,n._owner)}},ReactRef.shouldUpdateRefs=function(e,n){return null===e||!1===e||(null===n||!1===n)||n._owner!==e._owner||n.ref!==e.ref},ReactRef.detachRefs=function(e,n){if(null!==n&&!1!==n){var t=n.ref;null!=t&&detachRef(t,e,n._owner)}},module.exports=ReactRef;

},{"./ReactOwner":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactOwner.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactRootIndex.js":[function(require,module,exports){
"use strict";var ReactRootIndexInjection={injectCreateReactRootIndex:function(e){ReactRootIndex.createReactRootIndex=e}},ReactRootIndex={createReactRootIndex:null,injection:ReactRootIndexInjection};module.exports=ReactRootIndex;

},{}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactServerBatchingStrategy.js":[function(require,module,exports){
"use strict";var ReactServerBatchingStrategy={isBatchingUpdates:!1,batchedUpdates:function(t){}};module.exports=ReactServerBatchingStrategy;

},{}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactServerRendering.js":[function(require,module,exports){
"use strict";var ReactDefaultBatchingStrategy=require("./ReactDefaultBatchingStrategy"),ReactElement=require("./ReactElement"),ReactInstanceHandles=require("./ReactInstanceHandles"),ReactMarkupChecksum=require("./ReactMarkupChecksum"),ReactServerBatchingStrategy=require("./ReactServerBatchingStrategy"),ReactServerRenderingTransaction=require("./ReactServerRenderingTransaction"),ReactUpdates=require("./ReactUpdates"),emptyObject=require("fbjs/lib/emptyObject"),instantiateReactComponent=require("./instantiateReactComponent"),invariant=require("fbjs/lib/invariant");function renderToString(e){var t;ReactElement.isValidElement(e)||invariant(!1);try{ReactUpdates.injection.injectBatchingStrategy(ReactServerBatchingStrategy);var a=ReactInstanceHandles.createReactRootID();return(t=ReactServerRenderingTransaction.getPooled(!1)).perform(function(){var n=instantiateReactComponent(e,null).mountComponent(a,t,emptyObject);return ReactMarkupChecksum.addChecksumToMarkup(n)},null)}finally{ReactServerRenderingTransaction.release(t),ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy)}}function renderToStaticMarkup(e){var t;ReactElement.isValidElement(e)||invariant(!1);try{ReactUpdates.injection.injectBatchingStrategy(ReactServerBatchingStrategy);var a=ReactInstanceHandles.createReactRootID();return(t=ReactServerRenderingTransaction.getPooled(!0)).perform(function(){return instantiateReactComponent(e,null).mountComponent(a,t,emptyObject)},null)}finally{ReactServerRenderingTransaction.release(t),ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy)}}module.exports={renderToString:renderToString,renderToStaticMarkup:renderToStaticMarkup};

},{"./ReactDefaultBatchingStrategy":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactDefaultBatchingStrategy.js","./ReactElement":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactElement.js","./ReactInstanceHandles":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactInstanceHandles.js","./ReactMarkupChecksum":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactMarkupChecksum.js","./ReactServerBatchingStrategy":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactServerBatchingStrategy.js","./ReactServerRenderingTransaction":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactServerRenderingTransaction.js","./ReactUpdates":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactUpdates.js","./instantiateReactComponent":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/instantiateReactComponent.js","fbjs/lib/emptyObject":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/emptyObject.js","fbjs/lib/invariant":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/invariant.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactServerRenderingTransaction.js":[function(require,module,exports){
"use strict";var PooledClass=require("./PooledClass"),CallbackQueue=require("./CallbackQueue"),Transaction=require("./Transaction"),assign=require("./Object.assign"),emptyFunction=require("fbjs/lib/emptyFunction"),ON_DOM_READY_QUEUEING={initialize:function(){this.reactMountReady.reset()},close:emptyFunction},TRANSACTION_WRAPPERS=[ON_DOM_READY_QUEUEING];function ReactServerRenderingTransaction(e){this.reinitializeTransaction(),this.renderToStaticMarkup=e,this.reactMountReady=CallbackQueue.getPooled(null),this.useCreateElement=!1}var Mixin={getTransactionWrappers:function(){return TRANSACTION_WRAPPERS},getReactMountReady:function(){return this.reactMountReady},destructor:function(){CallbackQueue.release(this.reactMountReady),this.reactMountReady=null}};assign(ReactServerRenderingTransaction.prototype,Transaction.Mixin,Mixin),PooledClass.addPoolingTo(ReactServerRenderingTransaction),module.exports=ReactServerRenderingTransaction;

},{"./CallbackQueue":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/CallbackQueue.js","./Object.assign":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/Object.assign.js","./PooledClass":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/PooledClass.js","./Transaction":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/Transaction.js","fbjs/lib/emptyFunction":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/emptyFunction.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactUpdateQueue.js":[function(require,module,exports){
"use strict";var ReactCurrentOwner=require("./ReactCurrentOwner"),ReactElement=require("./ReactElement"),ReactInstanceMap=require("./ReactInstanceMap"),ReactUpdates=require("./ReactUpdates"),assign=require("./Object.assign"),invariant=require("fbjs/lib/invariant"),warning=require("fbjs/lib/warning");function enqueueUpdate(e){ReactUpdates.enqueueUpdate(e)}function getInternalInstanceReadyForUpdate(e,n){var t=ReactInstanceMap.get(e);return t||null}var ReactUpdateQueue={isMounted:function(e){var n=ReactInstanceMap.get(e);return!!n&&!!n._renderedComponent},enqueueCallback:function(e,n){"function"!=typeof n&&invariant(!1);var t=getInternalInstanceReadyForUpdate(e);if(!t)return null;t._pendingCallbacks?t._pendingCallbacks.push(n):t._pendingCallbacks=[n],enqueueUpdate(t)},enqueueCallbackInternal:function(e,n){"function"!=typeof n&&invariant(!1),e._pendingCallbacks?e._pendingCallbacks.push(n):e._pendingCallbacks=[n],enqueueUpdate(e)},enqueueForceUpdate:function(e){var n=getInternalInstanceReadyForUpdate(e,"forceUpdate");n&&(n._pendingForceUpdate=!0,enqueueUpdate(n))},enqueueReplaceState:function(e,n){var t=getInternalInstanceReadyForUpdate(e,"replaceState");t&&(t._pendingStateQueue=[n],t._pendingReplaceState=!0,enqueueUpdate(t))},enqueueSetState:function(e,n){var t=getInternalInstanceReadyForUpdate(e,"setState");t&&((t._pendingStateQueue||(t._pendingStateQueue=[])).push(n),enqueueUpdate(t))},enqueueSetProps:function(e,n){var t=getInternalInstanceReadyForUpdate(e,"setProps");t&&ReactUpdateQueue.enqueueSetPropsInternal(t,n)},enqueueSetPropsInternal:function(e,n){var t=e._topLevelWrapper;t||invariant(!1);var a=t._pendingElement||t._currentElement,r=a.props,u=assign({},r.props,n);t._pendingElement=ReactElement.cloneAndReplaceProps(a,ReactElement.cloneAndReplaceProps(r,u)),enqueueUpdate(t)},enqueueReplaceProps:function(e,n){var t=getInternalInstanceReadyForUpdate(e,"replaceProps");t&&ReactUpdateQueue.enqueueReplacePropsInternal(t,n)},enqueueReplacePropsInternal:function(e,n){var t=e._topLevelWrapper;t||invariant(!1);var a=t._pendingElement||t._currentElement,r=a.props;t._pendingElement=ReactElement.cloneAndReplaceProps(a,ReactElement.cloneAndReplaceProps(r,n)),enqueueUpdate(t)},enqueueElementInternal:function(e,n){e._pendingElement=n,enqueueUpdate(e)}};module.exports=ReactUpdateQueue;

},{"./Object.assign":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/Object.assign.js","./ReactCurrentOwner":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactCurrentOwner.js","./ReactElement":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactElement.js","./ReactInstanceMap":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactInstanceMap.js","./ReactUpdates":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactUpdates.js","fbjs/lib/invariant":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/invariant.js","fbjs/lib/warning":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/warning.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactUpdates.js":[function(require,module,exports){
"use strict";var CallbackQueue=require("./CallbackQueue"),PooledClass=require("./PooledClass"),ReactPerf=require("./ReactPerf"),ReactReconciler=require("./ReactReconciler"),Transaction=require("./Transaction"),assign=require("./Object.assign"),invariant=require("fbjs/lib/invariant"),dirtyComponents=[],asapCallbackQueue=CallbackQueue.getPooled(),asapEnqueued=!1,batchingStrategy=null;function ensureInjected(){ReactUpdates.ReactReconcileTransaction&&batchingStrategy||invariant(!1)}var NESTED_UPDATES={initialize:function(){this.dirtyComponentsLength=dirtyComponents.length},close:function(){this.dirtyComponentsLength!==dirtyComponents.length?(dirtyComponents.splice(0,this.dirtyComponentsLength),flushBatchedUpdates()):dirtyComponents.length=0}},UPDATE_QUEUEING={initialize:function(){this.callbackQueue.reset()},close:function(){this.callbackQueue.notifyAll()}},TRANSACTION_WRAPPERS=[NESTED_UPDATES,UPDATE_QUEUEING];function ReactUpdatesFlushTransaction(){this.reinitializeTransaction(),this.dirtyComponentsLength=null,this.callbackQueue=CallbackQueue.getPooled(),this.reconcileTransaction=ReactUpdates.ReactReconcileTransaction.getPooled(!1)}function batchedUpdates(e,t,a,n,i,c){ensureInjected(),batchingStrategy.batchedUpdates(e,t,a,n,i,c)}function mountOrderComparator(e,t){return e._mountOrder-t._mountOrder}function runBatchedUpdates(e){var t=e.dirtyComponentsLength;t!==dirtyComponents.length&&invariant(!1),dirtyComponents.sort(mountOrderComparator);for(var a=0;a<t;a++){var n=dirtyComponents[a],i=n._pendingCallbacks;if(n._pendingCallbacks=null,ReactReconciler.performUpdateIfNecessary(n,e.reconcileTransaction),i)for(var c=0;c<i.length;c++)e.callbackQueue.enqueue(i[c],n.getPublicInstance())}}assign(ReactUpdatesFlushTransaction.prototype,Transaction.Mixin,{getTransactionWrappers:function(){return TRANSACTION_WRAPPERS},destructor:function(){this.dirtyComponentsLength=null,CallbackQueue.release(this.callbackQueue),this.callbackQueue=null,ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction),this.reconcileTransaction=null},perform:function(e,t,a){return Transaction.Mixin.perform.call(this,this.reconcileTransaction.perform,this.reconcileTransaction,e,t,a)}}),PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);var flushBatchedUpdates=function(){for(;dirtyComponents.length||asapEnqueued;){if(dirtyComponents.length){var e=ReactUpdatesFlushTransaction.getPooled();e.perform(runBatchedUpdates,null,e),ReactUpdatesFlushTransaction.release(e)}if(asapEnqueued){asapEnqueued=!1;var t=asapCallbackQueue;asapCallbackQueue=CallbackQueue.getPooled(),t.notifyAll(),CallbackQueue.release(t)}}};function enqueueUpdate(e){ensureInjected(),batchingStrategy.isBatchingUpdates?dirtyComponents.push(e):batchingStrategy.batchedUpdates(enqueueUpdate,e)}function asap(e,t){batchingStrategy.isBatchingUpdates||invariant(!1),asapCallbackQueue.enqueue(e,t),asapEnqueued=!0}var ReactUpdatesInjection={injectReconcileTransaction:function(e){e||invariant(!1),ReactUpdates.ReactReconcileTransaction=e},injectBatchingStrategy:function(e){e||invariant(!1),"function"!=typeof e.batchedUpdates&&invariant(!1),"boolean"!=typeof e.isBatchingUpdates&&invariant(!1),batchingStrategy=e}},ReactUpdates={ReactReconcileTransaction:null,batchedUpdates:batchedUpdates,enqueueUpdate:enqueueUpdate,flushBatchedUpdates:flushBatchedUpdates=ReactPerf.measure("ReactUpdates","flushBatchedUpdates",flushBatchedUpdates),injection:ReactUpdatesInjection,asap:asap};module.exports=ReactUpdates;

},{"./CallbackQueue":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/CallbackQueue.js","./Object.assign":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/Object.assign.js","./PooledClass":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/PooledClass.js","./ReactPerf":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactPerf.js","./ReactReconciler":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactReconciler.js","./Transaction":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/Transaction.js","fbjs/lib/invariant":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/invariant.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactVersion.js":[function(require,module,exports){
"use strict";module.exports="0.14.10";

},{}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/SVGDOMPropertyConfig.js":[function(require,module,exports){
"use strict";var DOMProperty=require("./DOMProperty"),MUST_USE_ATTRIBUTE=DOMProperty.injection.MUST_USE_ATTRIBUTE,NS={xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace"},SVGDOMPropertyConfig={Properties:{clipPath:MUST_USE_ATTRIBUTE,cx:MUST_USE_ATTRIBUTE,cy:MUST_USE_ATTRIBUTE,d:MUST_USE_ATTRIBUTE,dx:MUST_USE_ATTRIBUTE,dy:MUST_USE_ATTRIBUTE,fill:MUST_USE_ATTRIBUTE,fillOpacity:MUST_USE_ATTRIBUTE,fontFamily:MUST_USE_ATTRIBUTE,fontSize:MUST_USE_ATTRIBUTE,fx:MUST_USE_ATTRIBUTE,fy:MUST_USE_ATTRIBUTE,gradientTransform:MUST_USE_ATTRIBUTE,gradientUnits:MUST_USE_ATTRIBUTE,markerEnd:MUST_USE_ATTRIBUTE,markerMid:MUST_USE_ATTRIBUTE,markerStart:MUST_USE_ATTRIBUTE,offset:MUST_USE_ATTRIBUTE,opacity:MUST_USE_ATTRIBUTE,patternContentUnits:MUST_USE_ATTRIBUTE,patternUnits:MUST_USE_ATTRIBUTE,points:MUST_USE_ATTRIBUTE,preserveAspectRatio:MUST_USE_ATTRIBUTE,r:MUST_USE_ATTRIBUTE,rx:MUST_USE_ATTRIBUTE,ry:MUST_USE_ATTRIBUTE,spreadMethod:MUST_USE_ATTRIBUTE,stopColor:MUST_USE_ATTRIBUTE,stopOpacity:MUST_USE_ATTRIBUTE,stroke:MUST_USE_ATTRIBUTE,strokeDasharray:MUST_USE_ATTRIBUTE,strokeLinecap:MUST_USE_ATTRIBUTE,strokeOpacity:MUST_USE_ATTRIBUTE,strokeWidth:MUST_USE_ATTRIBUTE,textAnchor:MUST_USE_ATTRIBUTE,transform:MUST_USE_ATTRIBUTE,version:MUST_USE_ATTRIBUTE,viewBox:MUST_USE_ATTRIBUTE,x1:MUST_USE_ATTRIBUTE,x2:MUST_USE_ATTRIBUTE,x:MUST_USE_ATTRIBUTE,xlinkActuate:MUST_USE_ATTRIBUTE,xlinkArcrole:MUST_USE_ATTRIBUTE,xlinkHref:MUST_USE_ATTRIBUTE,xlinkRole:MUST_USE_ATTRIBUTE,xlinkShow:MUST_USE_ATTRIBUTE,xlinkTitle:MUST_USE_ATTRIBUTE,xlinkType:MUST_USE_ATTRIBUTE,xmlBase:MUST_USE_ATTRIBUTE,xmlLang:MUST_USE_ATTRIBUTE,xmlSpace:MUST_USE_ATTRIBUTE,y1:MUST_USE_ATTRIBUTE,y2:MUST_USE_ATTRIBUTE,y:MUST_USE_ATTRIBUTE},DOMAttributeNamespaces:{xlinkActuate:NS.xlink,xlinkArcrole:NS.xlink,xlinkHref:NS.xlink,xlinkRole:NS.xlink,xlinkShow:NS.xlink,xlinkTitle:NS.xlink,xlinkType:NS.xlink,xmlBase:NS.xml,xmlLang:NS.xml,xmlSpace:NS.xml},DOMAttributeNames:{clipPath:"clip-path",fillOpacity:"fill-opacity",fontFamily:"font-family",fontSize:"font-size",gradientTransform:"gradientTransform",gradientUnits:"gradientUnits",markerEnd:"marker-end",markerMid:"marker-mid",markerStart:"marker-start",patternContentUnits:"patternContentUnits",patternUnits:"patternUnits",preserveAspectRatio:"preserveAspectRatio",spreadMethod:"spreadMethod",stopColor:"stop-color",stopOpacity:"stop-opacity",strokeDasharray:"stroke-dasharray",strokeLinecap:"stroke-linecap",strokeOpacity:"stroke-opacity",strokeWidth:"stroke-width",textAnchor:"text-anchor",viewBox:"viewBox",xlinkActuate:"xlink:actuate",xlinkArcrole:"xlink:arcrole",xlinkHref:"xlink:href",xlinkRole:"xlink:role",xlinkShow:"xlink:show",xlinkTitle:"xlink:title",xlinkType:"xlink:type",xmlBase:"xml:base",xmlLang:"xml:lang",xmlSpace:"xml:space"}};module.exports=SVGDOMPropertyConfig;

},{"./DOMProperty":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/DOMProperty.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/SelectEventPlugin.js":[function(require,module,exports){
"use strict";var EventConstants=require("./EventConstants"),EventPropagators=require("./EventPropagators"),ExecutionEnvironment=require("fbjs/lib/ExecutionEnvironment"),ReactInputSelection=require("./ReactInputSelection"),SyntheticEvent=require("./SyntheticEvent"),getActiveElement=require("fbjs/lib/getActiveElement"),isTextInputElement=require("./isTextInputElement"),keyOf=require("fbjs/lib/keyOf"),shallowEqual=require("fbjs/lib/shallowEqual"),topLevelTypes=EventConstants.topLevelTypes,skipSelectionChangeEvent=ExecutionEnvironment.canUseDOM&&"documentMode"in document&&document.documentMode<=11,eventTypes={select:{phasedRegistrationNames:{bubbled:keyOf({onSelect:null}),captured:keyOf({onSelectCapture:null})},dependencies:[topLevelTypes.topBlur,topLevelTypes.topContextMenu,topLevelTypes.topFocus,topLevelTypes.topKeyDown,topLevelTypes.topMouseDown,topLevelTypes.topMouseUp,topLevelTypes.topSelectionChange]}},activeElement=null,activeElementID=null,lastSelection=null,mouseDown=!1,hasListener=!1,ON_SELECT_KEY=keyOf({onSelect:null});function getSelection(e){if("selectionStart"in e&&ReactInputSelection.hasSelectionCapabilities(e))return{start:e.selectionStart,end:e.selectionEnd};if(window.getSelection){var t=window.getSelection();return{anchorNode:t.anchorNode,anchorOffset:t.anchorOffset,focusNode:t.focusNode,focusOffset:t.focusOffset}}if(document.selection){var n=document.selection.createRange();return{parentElement:n.parentElement(),text:n.text,top:n.boundingTop,left:n.boundingLeft}}}function constructSelectEvent(e,t){if(mouseDown||null==activeElement||activeElement!==getActiveElement())return null;var n=getSelection(activeElement);if(!lastSelection||!shallowEqual(lastSelection,n)){lastSelection=n;var o=SyntheticEvent.getPooled(eventTypes.select,activeElementID,e,t);return o.type="select",o.target=activeElement,EventPropagators.accumulateTwoPhaseDispatches(o),o}return null}var SelectEventPlugin={eventTypes:eventTypes,extractEvents:function(e,t,n,o,l){if(!hasListener)return null;switch(e){case topLevelTypes.topFocus:(isTextInputElement(t)||"true"===t.contentEditable)&&(activeElement=t,activeElementID=n,lastSelection=null);break;case topLevelTypes.topBlur:activeElement=null,activeElementID=null,lastSelection=null;break;case topLevelTypes.topMouseDown:mouseDown=!0;break;case topLevelTypes.topContextMenu:case topLevelTypes.topMouseUp:return mouseDown=!1,constructSelectEvent(o,l);case topLevelTypes.topSelectionChange:if(skipSelectionChangeEvent)break;case topLevelTypes.topKeyDown:case topLevelTypes.topKeyUp:return constructSelectEvent(o,l)}return null},didPutListener:function(e,t,n){t===ON_SELECT_KEY&&(hasListener=!0)}};module.exports=SelectEventPlugin;

},{"./EventConstants":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/EventConstants.js","./EventPropagators":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/EventPropagators.js","./ReactInputSelection":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactInputSelection.js","./SyntheticEvent":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/SyntheticEvent.js","./isTextInputElement":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/isTextInputElement.js","fbjs/lib/ExecutionEnvironment":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/ExecutionEnvironment.js","fbjs/lib/getActiveElement":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/getActiveElement.js","fbjs/lib/keyOf":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/keyOf.js","fbjs/lib/shallowEqual":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/shallowEqual.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ServerReactRootIndex.js":[function(require,module,exports){
"use strict";var GLOBAL_MOUNT_POINT_MAX=Math.pow(2,53),ServerReactRootIndex={createReactRootIndex:function(){return Math.ceil(Math.random()*GLOBAL_MOUNT_POINT_MAX)}};module.exports=ServerReactRootIndex;

},{}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/SimpleEventPlugin.js":[function(require,module,exports){
"use strict";var EventConstants=require("./EventConstants"),EventListener=require("fbjs/lib/EventListener"),EventPropagators=require("./EventPropagators"),ReactMount=require("./ReactMount"),SyntheticClipboardEvent=require("./SyntheticClipboardEvent"),SyntheticEvent=require("./SyntheticEvent"),SyntheticFocusEvent=require("./SyntheticFocusEvent"),SyntheticKeyboardEvent=require("./SyntheticKeyboardEvent"),SyntheticMouseEvent=require("./SyntheticMouseEvent"),SyntheticDragEvent=require("./SyntheticDragEvent"),SyntheticTouchEvent=require("./SyntheticTouchEvent"),SyntheticUIEvent=require("./SyntheticUIEvent"),SyntheticWheelEvent=require("./SyntheticWheelEvent"),emptyFunction=require("fbjs/lib/emptyFunction"),getEventCharCode=require("./getEventCharCode"),invariant=require("fbjs/lib/invariant"),keyOf=require("fbjs/lib/keyOf"),topLevelTypes=EventConstants.topLevelTypes,eventTypes={abort:{phasedRegistrationNames:{bubbled:keyOf({onAbort:!0}),captured:keyOf({onAbortCapture:!0})}},blur:{phasedRegistrationNames:{bubbled:keyOf({onBlur:!0}),captured:keyOf({onBlurCapture:!0})}},canPlay:{phasedRegistrationNames:{bubbled:keyOf({onCanPlay:!0}),captured:keyOf({onCanPlayCapture:!0})}},canPlayThrough:{phasedRegistrationNames:{bubbled:keyOf({onCanPlayThrough:!0}),captured:keyOf({onCanPlayThroughCapture:!0})}},click:{phasedRegistrationNames:{bubbled:keyOf({onClick:!0}),captured:keyOf({onClickCapture:!0})}},contextMenu:{phasedRegistrationNames:{bubbled:keyOf({onContextMenu:!0}),captured:keyOf({onContextMenuCapture:!0})}},copy:{phasedRegistrationNames:{bubbled:keyOf({onCopy:!0}),captured:keyOf({onCopyCapture:!0})}},cut:{phasedRegistrationNames:{bubbled:keyOf({onCut:!0}),captured:keyOf({onCutCapture:!0})}},doubleClick:{phasedRegistrationNames:{bubbled:keyOf({onDoubleClick:!0}),captured:keyOf({onDoubleClickCapture:!0})}},drag:{phasedRegistrationNames:{bubbled:keyOf({onDrag:!0}),captured:keyOf({onDragCapture:!0})}},dragEnd:{phasedRegistrationNames:{bubbled:keyOf({onDragEnd:!0}),captured:keyOf({onDragEndCapture:!0})}},dragEnter:{phasedRegistrationNames:{bubbled:keyOf({onDragEnter:!0}),captured:keyOf({onDragEnterCapture:!0})}},dragExit:{phasedRegistrationNames:{bubbled:keyOf({onDragExit:!0}),captured:keyOf({onDragExitCapture:!0})}},dragLeave:{phasedRegistrationNames:{bubbled:keyOf({onDragLeave:!0}),captured:keyOf({onDragLeaveCapture:!0})}},dragOver:{phasedRegistrationNames:{bubbled:keyOf({onDragOver:!0}),captured:keyOf({onDragOverCapture:!0})}},dragStart:{phasedRegistrationNames:{bubbled:keyOf({onDragStart:!0}),captured:keyOf({onDragStartCapture:!0})}},drop:{phasedRegistrationNames:{bubbled:keyOf({onDrop:!0}),captured:keyOf({onDropCapture:!0})}},durationChange:{phasedRegistrationNames:{bubbled:keyOf({onDurationChange:!0}),captured:keyOf({onDurationChangeCapture:!0})}},emptied:{phasedRegistrationNames:{bubbled:keyOf({onEmptied:!0}),captured:keyOf({onEmptiedCapture:!0})}},encrypted:{phasedRegistrationNames:{bubbled:keyOf({onEncrypted:!0}),captured:keyOf({onEncryptedCapture:!0})}},ended:{phasedRegistrationNames:{bubbled:keyOf({onEnded:!0}),captured:keyOf({onEndedCapture:!0})}},error:{phasedRegistrationNames:{bubbled:keyOf({onError:!0}),captured:keyOf({onErrorCapture:!0})}},focus:{phasedRegistrationNames:{bubbled:keyOf({onFocus:!0}),captured:keyOf({onFocusCapture:!0})}},input:{phasedRegistrationNames:{bubbled:keyOf({onInput:!0}),captured:keyOf({onInputCapture:!0})}},keyDown:{phasedRegistrationNames:{bubbled:keyOf({onKeyDown:!0}),captured:keyOf({onKeyDownCapture:!0})}},keyPress:{phasedRegistrationNames:{bubbled:keyOf({onKeyPress:!0}),captured:keyOf({onKeyPressCapture:!0})}},keyUp:{phasedRegistrationNames:{bubbled:keyOf({onKeyUp:!0}),captured:keyOf({onKeyUpCapture:!0})}},load:{phasedRegistrationNames:{bubbled:keyOf({onLoad:!0}),captured:keyOf({onLoadCapture:!0})}},loadedData:{phasedRegistrationNames:{bubbled:keyOf({onLoadedData:!0}),captured:keyOf({onLoadedDataCapture:!0})}},loadedMetadata:{phasedRegistrationNames:{bubbled:keyOf({onLoadedMetadata:!0}),captured:keyOf({onLoadedMetadataCapture:!0})}},loadStart:{phasedRegistrationNames:{bubbled:keyOf({onLoadStart:!0}),captured:keyOf({onLoadStartCapture:!0})}},mouseDown:{phasedRegistrationNames:{bubbled:keyOf({onMouseDown:!0}),captured:keyOf({onMouseDownCapture:!0})}},mouseMove:{phasedRegistrationNames:{bubbled:keyOf({onMouseMove:!0}),captured:keyOf({onMouseMoveCapture:!0})}},mouseOut:{phasedRegistrationNames:{bubbled:keyOf({onMouseOut:!0}),captured:keyOf({onMouseOutCapture:!0})}},mouseOver:{phasedRegistrationNames:{bubbled:keyOf({onMouseOver:!0}),captured:keyOf({onMouseOverCapture:!0})}},mouseUp:{phasedRegistrationNames:{bubbled:keyOf({onMouseUp:!0}),captured:keyOf({onMouseUpCapture:!0})}},paste:{phasedRegistrationNames:{bubbled:keyOf({onPaste:!0}),captured:keyOf({onPasteCapture:!0})}},pause:{phasedRegistrationNames:{bubbled:keyOf({onPause:!0}),captured:keyOf({onPauseCapture:!0})}},play:{phasedRegistrationNames:{bubbled:keyOf({onPlay:!0}),captured:keyOf({onPlayCapture:!0})}},playing:{phasedRegistrationNames:{bubbled:keyOf({onPlaying:!0}),captured:keyOf({onPlayingCapture:!0})}},progress:{phasedRegistrationNames:{bubbled:keyOf({onProgress:!0}),captured:keyOf({onProgressCapture:!0})}},rateChange:{phasedRegistrationNames:{bubbled:keyOf({onRateChange:!0}),captured:keyOf({onRateChangeCapture:!0})}},reset:{phasedRegistrationNames:{bubbled:keyOf({onReset:!0}),captured:keyOf({onResetCapture:!0})}},scroll:{phasedRegistrationNames:{bubbled:keyOf({onScroll:!0}),captured:keyOf({onScrollCapture:!0})}},seeked:{phasedRegistrationNames:{bubbled:keyOf({onSeeked:!0}),captured:keyOf({onSeekedCapture:!0})}},seeking:{phasedRegistrationNames:{bubbled:keyOf({onSeeking:!0}),captured:keyOf({onSeekingCapture:!0})}},stalled:{phasedRegistrationNames:{bubbled:keyOf({onStalled:!0}),captured:keyOf({onStalledCapture:!0})}},submit:{phasedRegistrationNames:{bubbled:keyOf({onSubmit:!0}),captured:keyOf({onSubmitCapture:!0})}},suspend:{phasedRegistrationNames:{bubbled:keyOf({onSuspend:!0}),captured:keyOf({onSuspendCapture:!0})}},timeUpdate:{phasedRegistrationNames:{bubbled:keyOf({onTimeUpdate:!0}),captured:keyOf({onTimeUpdateCapture:!0})}},touchCancel:{phasedRegistrationNames:{bubbled:keyOf({onTouchCancel:!0}),captured:keyOf({onTouchCancelCapture:!0})}},touchEnd:{phasedRegistrationNames:{bubbled:keyOf({onTouchEnd:!0}),captured:keyOf({onTouchEndCapture:!0})}},touchMove:{phasedRegistrationNames:{bubbled:keyOf({onTouchMove:!0}),captured:keyOf({onTouchMoveCapture:!0})}},touchStart:{phasedRegistrationNames:{bubbled:keyOf({onTouchStart:!0}),captured:keyOf({onTouchStartCapture:!0})}},volumeChange:{phasedRegistrationNames:{bubbled:keyOf({onVolumeChange:!0}),captured:keyOf({onVolumeChangeCapture:!0})}},waiting:{phasedRegistrationNames:{bubbled:keyOf({onWaiting:!0}),captured:keyOf({onWaitingCapture:!0})}},wheel:{phasedRegistrationNames:{bubbled:keyOf({onWheel:!0}),captured:keyOf({onWheelCapture:!0})}}},topLevelEventsToDispatchConfig={topAbort:eventTypes.abort,topBlur:eventTypes.blur,topCanPlay:eventTypes.canPlay,topCanPlayThrough:eventTypes.canPlayThrough,topClick:eventTypes.click,topContextMenu:eventTypes.contextMenu,topCopy:eventTypes.copy,topCut:eventTypes.cut,topDoubleClick:eventTypes.doubleClick,topDrag:eventTypes.drag,topDragEnd:eventTypes.dragEnd,topDragEnter:eventTypes.dragEnter,topDragExit:eventTypes.dragExit,topDragLeave:eventTypes.dragLeave,topDragOver:eventTypes.dragOver,topDragStart:eventTypes.dragStart,topDrop:eventTypes.drop,topDurationChange:eventTypes.durationChange,topEmptied:eventTypes.emptied,topEncrypted:eventTypes.encrypted,topEnded:eventTypes.ended,topError:eventTypes.error,topFocus:eventTypes.focus,topInput:eventTypes.input,topKeyDown:eventTypes.keyDown,topKeyPress:eventTypes.keyPress,topKeyUp:eventTypes.keyUp,topLoad:eventTypes.load,topLoadedData:eventTypes.loadedData,topLoadedMetadata:eventTypes.loadedMetadata,topLoadStart:eventTypes.loadStart,topMouseDown:eventTypes.mouseDown,topMouseMove:eventTypes.mouseMove,topMouseOut:eventTypes.mouseOut,topMouseOver:eventTypes.mouseOver,topMouseUp:eventTypes.mouseUp,topPaste:eventTypes.paste,topPause:eventTypes.pause,topPlay:eventTypes.play,topPlaying:eventTypes.playing,topProgress:eventTypes.progress,topRateChange:eventTypes.rateChange,topReset:eventTypes.reset,topScroll:eventTypes.scroll,topSeeked:eventTypes.seeked,topSeeking:eventTypes.seeking,topStalled:eventTypes.stalled,topSubmit:eventTypes.submit,topSuspend:eventTypes.suspend,topTimeUpdate:eventTypes.timeUpdate,topTouchCancel:eventTypes.touchCancel,topTouchEnd:eventTypes.touchEnd,topTouchMove:eventTypes.touchMove,topTouchStart:eventTypes.touchStart,topVolumeChange:eventTypes.volumeChange,topWaiting:eventTypes.waiting,topWheel:eventTypes.wheel};for(var type in topLevelEventsToDispatchConfig)topLevelEventsToDispatchConfig[type].dependencies=[type];var ON_CLICK_KEY=keyOf({onClick:null}),onClickListeners={},SimpleEventPlugin={eventTypes:eventTypes,extractEvents:function(e,t,a,o,p){var s,n=topLevelEventsToDispatchConfig[e];if(!n)return null;switch(e){case topLevelTypes.topAbort:case topLevelTypes.topCanPlay:case topLevelTypes.topCanPlayThrough:case topLevelTypes.topDurationChange:case topLevelTypes.topEmptied:case topLevelTypes.topEncrypted:case topLevelTypes.topEnded:case topLevelTypes.topError:case topLevelTypes.topInput:case topLevelTypes.topLoad:case topLevelTypes.topLoadedData:case topLevelTypes.topLoadedMetadata:case topLevelTypes.topLoadStart:case topLevelTypes.topPause:case topLevelTypes.topPlay:case topLevelTypes.topPlaying:case topLevelTypes.topProgress:case topLevelTypes.topRateChange:case topLevelTypes.topReset:case topLevelTypes.topSeeked:case topLevelTypes.topSeeking:case topLevelTypes.topStalled:case topLevelTypes.topSubmit:case topLevelTypes.topSuspend:case topLevelTypes.topTimeUpdate:case topLevelTypes.topVolumeChange:case topLevelTypes.topWaiting:s=SyntheticEvent;break;case topLevelTypes.topKeyPress:if(0===getEventCharCode(o))return null;case topLevelTypes.topKeyDown:case topLevelTypes.topKeyUp:s=SyntheticKeyboardEvent;break;case topLevelTypes.topBlur:case topLevelTypes.topFocus:s=SyntheticFocusEvent;break;case topLevelTypes.topClick:if(2===o.button)return null;case topLevelTypes.topContextMenu:case topLevelTypes.topDoubleClick:case topLevelTypes.topMouseDown:case topLevelTypes.topMouseMove:case topLevelTypes.topMouseOut:case topLevelTypes.topMouseOver:case topLevelTypes.topMouseUp:s=SyntheticMouseEvent;break;case topLevelTypes.topDrag:case topLevelTypes.topDragEnd:case topLevelTypes.topDragEnter:case topLevelTypes.topDragExit:case topLevelTypes.topDragLeave:case topLevelTypes.topDragOver:case topLevelTypes.topDragStart:case topLevelTypes.topDrop:s=SyntheticDragEvent;break;case topLevelTypes.topTouchCancel:case topLevelTypes.topTouchEnd:case topLevelTypes.topTouchMove:case topLevelTypes.topTouchStart:s=SyntheticTouchEvent;break;case topLevelTypes.topScroll:s=SyntheticUIEvent;break;case topLevelTypes.topWheel:s=SyntheticWheelEvent;break;case topLevelTypes.topCopy:case topLevelTypes.topCut:case topLevelTypes.topPaste:s=SyntheticClipboardEvent}s||invariant(!1);var r=s.getPooled(n,a,o,p);return EventPropagators.accumulateTwoPhaseDispatches(r),r},didPutListener:function(e,t,a){if(t===ON_CLICK_KEY){var o=ReactMount.getNode(e);onClickListeners[e]||(onClickListeners[e]=EventListener.listen(o,"click",emptyFunction))}},willDeleteListener:function(e,t){t===ON_CLICK_KEY&&(onClickListeners[e].remove(),delete onClickListeners[e])}};module.exports=SimpleEventPlugin;

},{"./EventConstants":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/EventConstants.js","./EventPropagators":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/EventPropagators.js","./ReactMount":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactMount.js","./SyntheticClipboardEvent":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/SyntheticClipboardEvent.js","./SyntheticDragEvent":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/SyntheticDragEvent.js","./SyntheticEvent":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/SyntheticEvent.js","./SyntheticFocusEvent":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/SyntheticFocusEvent.js","./SyntheticKeyboardEvent":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/SyntheticKeyboardEvent.js","./SyntheticMouseEvent":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/SyntheticMouseEvent.js","./SyntheticTouchEvent":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/SyntheticTouchEvent.js","./SyntheticUIEvent":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/SyntheticUIEvent.js","./SyntheticWheelEvent":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/SyntheticWheelEvent.js","./getEventCharCode":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/getEventCharCode.js","fbjs/lib/EventListener":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/EventListener.js","fbjs/lib/emptyFunction":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/emptyFunction.js","fbjs/lib/invariant":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/invariant.js","fbjs/lib/keyOf":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/keyOf.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/SyntheticClipboardEvent.js":[function(require,module,exports){
"use strict";var SyntheticEvent=require("./SyntheticEvent"),ClipboardEventInterface={clipboardData:function(t){return"clipboardData"in t?t.clipboardData:window.clipboardData}};function SyntheticClipboardEvent(t,e,n,a){SyntheticEvent.call(this,t,e,n,a)}SyntheticEvent.augmentClass(SyntheticClipboardEvent,ClipboardEventInterface),module.exports=SyntheticClipboardEvent;

},{"./SyntheticEvent":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/SyntheticEvent.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/SyntheticCompositionEvent.js":[function(require,module,exports){
"use strict";var SyntheticEvent=require("./SyntheticEvent"),CompositionEventInterface={data:null};function SyntheticCompositionEvent(t,n,e,i){SyntheticEvent.call(this,t,n,e,i)}SyntheticEvent.augmentClass(SyntheticCompositionEvent,CompositionEventInterface),module.exports=SyntheticCompositionEvent;

},{"./SyntheticEvent":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/SyntheticEvent.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/SyntheticDragEvent.js":[function(require,module,exports){
"use strict";var SyntheticMouseEvent=require("./SyntheticMouseEvent"),DragEventInterface={dataTransfer:null};function SyntheticDragEvent(t,e,n,a){SyntheticMouseEvent.call(this,t,e,n,a)}SyntheticMouseEvent.augmentClass(SyntheticDragEvent,DragEventInterface),module.exports=SyntheticDragEvent;

},{"./SyntheticMouseEvent":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/SyntheticMouseEvent.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/SyntheticEvent.js":[function(require,module,exports){
"use strict";var PooledClass=require("./PooledClass"),assign=require("./Object.assign"),emptyFunction=require("fbjs/lib/emptyFunction"),warning=require("fbjs/lib/warning"),EventInterface={type:null,target:null,currentTarget:emptyFunction.thatReturnsNull,eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(t){return t.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};function SyntheticEvent(t,e,n,r){this.dispatchConfig=t,this.dispatchMarker=e,this.nativeEvent=n;var s=this.constructor.Interface;for(var a in s)if(s.hasOwnProperty(a)){var i=s[a];i?this[a]=i(n):"target"===a?this.target=r:this[a]=n[a]}var o=null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue;this.isDefaultPrevented=o?emptyFunction.thatReturnsTrue:emptyFunction.thatReturnsFalse,this.isPropagationStopped=emptyFunction.thatReturnsFalse}assign(SyntheticEvent.prototype,{preventDefault:function(){this.defaultPrevented=!0;var t=this.nativeEvent;t&&(t.preventDefault?t.preventDefault():t.returnValue=!1,this.isDefaultPrevented=emptyFunction.thatReturnsTrue)},stopPropagation:function(){var t=this.nativeEvent;t&&(t.stopPropagation?t.stopPropagation():t.cancelBubble=!0,this.isPropagationStopped=emptyFunction.thatReturnsTrue)},persist:function(){this.isPersistent=emptyFunction.thatReturnsTrue},isPersistent:emptyFunction.thatReturnsFalse,destructor:function(){var t=this.constructor.Interface;for(var e in t)this[e]=null;this.dispatchConfig=null,this.dispatchMarker=null,this.nativeEvent=null}}),SyntheticEvent.Interface=EventInterface,SyntheticEvent.augmentClass=function(t,e){var n=Object.create(this.prototype);assign(n,t.prototype),t.prototype=n,t.prototype.constructor=t,t.Interface=assign({},this.Interface,e),t.augmentClass=this.augmentClass,PooledClass.addPoolingTo(t,PooledClass.fourArgumentPooler)},PooledClass.addPoolingTo(SyntheticEvent,PooledClass.fourArgumentPooler),module.exports=SyntheticEvent;

},{"./Object.assign":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/Object.assign.js","./PooledClass":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/PooledClass.js","fbjs/lib/emptyFunction":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/emptyFunction.js","fbjs/lib/warning":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/warning.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/SyntheticFocusEvent.js":[function(require,module,exports){
"use strict";var SyntheticUIEvent=require("./SyntheticUIEvent"),FocusEventInterface={relatedTarget:null};function SyntheticFocusEvent(t,e,n,c){SyntheticUIEvent.call(this,t,e,n,c)}SyntheticUIEvent.augmentClass(SyntheticFocusEvent,FocusEventInterface),module.exports=SyntheticFocusEvent;

},{"./SyntheticUIEvent":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/SyntheticUIEvent.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/SyntheticInputEvent.js":[function(require,module,exports){
"use strict";var SyntheticEvent=require("./SyntheticEvent"),InputEventInterface={data:null};function SyntheticInputEvent(t,n,e,c){SyntheticEvent.call(this,t,n,e,c)}SyntheticEvent.augmentClass(SyntheticInputEvent,InputEventInterface),module.exports=SyntheticInputEvent;

},{"./SyntheticEvent":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/SyntheticEvent.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/SyntheticKeyboardEvent.js":[function(require,module,exports){
"use strict";var SyntheticUIEvent=require("./SyntheticUIEvent"),getEventCharCode=require("./getEventCharCode"),getEventKey=require("./getEventKey"),getEventModifierState=require("./getEventModifierState"),KeyboardEventInterface={key:getEventKey,location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:getEventModifierState,charCode:function(e){return"keypress"===e.type?getEventCharCode(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?getEventCharCode(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}};function SyntheticKeyboardEvent(e,t,n,r){SyntheticUIEvent.call(this,e,t,n,r)}SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent,KeyboardEventInterface),module.exports=SyntheticKeyboardEvent;

},{"./SyntheticUIEvent":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/SyntheticUIEvent.js","./getEventCharCode":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/getEventCharCode.js","./getEventKey":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/getEventKey.js","./getEventModifierState":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/getEventModifierState.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/SyntheticMouseEvent.js":[function(require,module,exports){
"use strict";var SyntheticUIEvent=require("./SyntheticUIEvent"),ViewportMetrics=require("./ViewportMetrics"),getEventModifierState=require("./getEventModifierState"),MouseEventInterface={screenX:null,screenY:null,clientX:null,clientY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:getEventModifierState,button:function(e){var t=e.button;return"which"in e?t:2===t?2:4===t?1:0},buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},pageX:function(e){return"pageX"in e?e.pageX:e.clientX+ViewportMetrics.currentScrollLeft},pageY:function(e){return"pageY"in e?e.pageY:e.clientY+ViewportMetrics.currentScrollTop}};function SyntheticMouseEvent(e,t,n,r){SyntheticUIEvent.call(this,e,t,n,r)}SyntheticUIEvent.augmentClass(SyntheticMouseEvent,MouseEventInterface),module.exports=SyntheticMouseEvent;

},{"./SyntheticUIEvent":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/SyntheticUIEvent.js","./ViewportMetrics":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ViewportMetrics.js","./getEventModifierState":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/getEventModifierState.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/SyntheticTouchEvent.js":[function(require,module,exports){
"use strict";var SyntheticUIEvent=require("./SyntheticUIEvent"),getEventModifierState=require("./getEventModifierState"),TouchEventInterface={touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:getEventModifierState};function SyntheticTouchEvent(e,t,n,c){SyntheticUIEvent.call(this,e,t,n,c)}SyntheticUIEvent.augmentClass(SyntheticTouchEvent,TouchEventInterface),module.exports=SyntheticTouchEvent;

},{"./SyntheticUIEvent":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/SyntheticUIEvent.js","./getEventModifierState":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/getEventModifierState.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/SyntheticUIEvent.js":[function(require,module,exports){
"use strict";var SyntheticEvent=require("./SyntheticEvent"),getEventTarget=require("./getEventTarget"),UIEventInterface={view:function(e){if(e.view)return e.view;var t=getEventTarget(e);if(null!=t&&t.window===t)return t;var n=t.ownerDocument;return n?n.defaultView||n.parentWindow:window},detail:function(e){return e.detail||0}};function SyntheticUIEvent(e,t,n,i){SyntheticEvent.call(this,e,t,n,i)}SyntheticEvent.augmentClass(SyntheticUIEvent,UIEventInterface),module.exports=SyntheticUIEvent;

},{"./SyntheticEvent":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/SyntheticEvent.js","./getEventTarget":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/getEventTarget.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/SyntheticWheelEvent.js":[function(require,module,exports){
"use strict";var SyntheticMouseEvent=require("./SyntheticMouseEvent"),WheelEventInterface={deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null};function SyntheticWheelEvent(e,t,n,l){SyntheticMouseEvent.call(this,e,t,n,l)}SyntheticMouseEvent.augmentClass(SyntheticWheelEvent,WheelEventInterface),module.exports=SyntheticWheelEvent;

},{"./SyntheticMouseEvent":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/SyntheticMouseEvent.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/Transaction.js":[function(require,module,exports){
"use strict";var invariant=require("fbjs/lib/invariant"),Mixin={reinitializeTransaction:function(){this.transactionWrappers=this.getTransactionWrappers(),this.wrapperInitData?this.wrapperInitData.length=0:this.wrapperInitData=[],this._isInTransaction=!1},_isInTransaction:!1,getTransactionWrappers:null,isInTransaction:function(){return!!this._isInTransaction},perform:function(i,t,a,n,r,s,l,e){var c,o;this.isInTransaction()&&invariant(!1);try{this._isInTransaction=!0,c=!0,this.initializeAll(0),o=i.call(t,a,n,r,s,l,e),c=!1}finally{try{if(c)try{this.closeAll(0)}catch(i){}else this.closeAll(0)}finally{this._isInTransaction=!1}}return o},initializeAll:function(i){for(var t=this.transactionWrappers,a=i;a<t.length;a++){var n=t[a];try{this.wrapperInitData[a]=Transaction.OBSERVED_ERROR,this.wrapperInitData[a]=n.initialize?n.initialize.call(this):null}finally{if(this.wrapperInitData[a]===Transaction.OBSERVED_ERROR)try{this.initializeAll(a+1)}catch(i){}}}},closeAll:function(i){this.isInTransaction()||invariant(!1);for(var t=this.transactionWrappers,a=i;a<t.length;a++){var n,r=t[a],s=this.wrapperInitData[a];try{n=!0,s!==Transaction.OBSERVED_ERROR&&r.close&&r.close.call(this,s),n=!1}finally{if(n)try{this.closeAll(a+1)}catch(i){}}}this.wrapperInitData.length=0}},Transaction={Mixin:Mixin,OBSERVED_ERROR:{}};module.exports=Transaction;

},{"fbjs/lib/invariant":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/invariant.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ViewportMetrics.js":[function(require,module,exports){
"use strict";var ViewportMetrics={currentScrollLeft:0,currentScrollTop:0,refreshScrollValues:function(r){ViewportMetrics.currentScrollLeft=r.x,ViewportMetrics.currentScrollTop=r.y}};module.exports=ViewportMetrics;

},{}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/accumulateInto.js":[function(require,module,exports){
"use strict";var invariant=require("fbjs/lib/invariant");function accumulateInto(r,a){if(null==a&&invariant(!1),null==r)return a;var n=Array.isArray(r),t=Array.isArray(a);return n&&t?(r.push.apply(r,a),r):n?(r.push(a),r):t?[r].concat(a):[r,a]}module.exports=accumulateInto;

},{"fbjs/lib/invariant":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/invariant.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/adler32.js":[function(require,module,exports){
"use strict";var MOD=65521;function adler32(r){for(var e=1,t=0,o=0,a=r.length,d=-4&a;o<d;){for(;o<Math.min(o+4096,d);o+=4)t+=(e+=r.charCodeAt(o))+(e+=r.charCodeAt(o+1))+(e+=r.charCodeAt(o+2))+(e+=r.charCodeAt(o+3));e%=MOD,t%=MOD}for(;o<a;o++)t+=e+=r.charCodeAt(o);return(e%=MOD)|(t%=MOD)<<16}module.exports=adler32;

},{}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/canDefineProperty.js":[function(require,module,exports){
"use strict";var canDefineProperty=!1;module.exports=canDefineProperty;

},{}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/dangerousStyleValue.js":[function(require,module,exports){
"use strict";var CSSProperty=require("./CSSProperty"),isUnitlessNumber=CSSProperty.isUnitlessNumber;function dangerousStyleValue(e,r){return null==r||"boolean"==typeof r||""===r?"":isNaN(r)||0===r||isUnitlessNumber.hasOwnProperty(e)&&isUnitlessNumber[e]?""+r:("string"==typeof r&&(r=r.trim()),r+"px")}module.exports=dangerousStyleValue;

},{"./CSSProperty":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/CSSProperty.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/deprecated.js":[function(require,module,exports){
"use strict";var assign=require("./Object.assign"),warning=require("fbjs/lib/warning");function deprecated(e,r,i,n,s){return s}module.exports=deprecated;

},{"./Object.assign":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/Object.assign.js","fbjs/lib/warning":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/warning.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/escapeTextContentForBrowser.js":[function(require,module,exports){
"use strict";var ESCAPE_LOOKUP={"&":"&amp;",">":"&gt;","<":"&lt;",'"':"&quot;","'":"&#x27;"},ESCAPE_REGEX=/[&><"']/g;function escaper(e){return ESCAPE_LOOKUP[e]}function escapeTextContentForBrowser(e){return(""+e).replace(ESCAPE_REGEX,escaper)}module.exports=escapeTextContentForBrowser;

},{}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/findDOMNode.js":[function(require,module,exports){
"use strict";var ReactCurrentOwner=require("./ReactCurrentOwner"),ReactInstanceMap=require("./ReactInstanceMap"),ReactMount=require("./ReactMount"),invariant=require("fbjs/lib/invariant"),warning=require("fbjs/lib/warning");function findDOMNode(e){return null==e?null:1===e.nodeType?e:ReactInstanceMap.has(e)?ReactMount.getNodeFromInstance(e):(null!=e.render&&"function"==typeof e.render&&invariant(!1),void invariant(!1))}module.exports=findDOMNode;

},{"./ReactCurrentOwner":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactCurrentOwner.js","./ReactInstanceMap":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactInstanceMap.js","./ReactMount":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactMount.js","fbjs/lib/invariant":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/invariant.js","fbjs/lib/warning":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/warning.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/flattenChildren.js":[function(require,module,exports){
"use strict";var traverseAllChildren=require("./traverseAllChildren"),warning=require("fbjs/lib/warning");function flattenSingleChildIntoContext(e,n,r){var l=e,t=void 0===l[r];t&&null!=n&&(l[r]=n)}function flattenChildren(e){if(null==e)return e;var n={};return traverseAllChildren(e,flattenSingleChildIntoContext,n),n}module.exports=flattenChildren;

},{"./traverseAllChildren":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/traverseAllChildren.js","fbjs/lib/warning":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/warning.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/forEachAccumulated.js":[function(require,module,exports){
"use strict";var forEachAccumulated=function(c,r,a){Array.isArray(c)?c.forEach(r,a):c&&r.call(a,c)};module.exports=forEachAccumulated;

},{}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/getEventCharCode.js":[function(require,module,exports){
"use strict";function getEventCharCode(e){var r,t=e.keyCode;return"charCode"in e?0===(r=e.charCode)&&13===t&&(r=13):r=t,r>=32||13===r?r:0}module.exports=getEventCharCode;

},{}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/getEventKey.js":[function(require,module,exports){
"use strict";var getEventCharCode=require("./getEventCharCode"),normalizeKey={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},translateToKey={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"};function getEventKey(e){if(e.key){var r=normalizeKey[e.key]||e.key;if("Unidentified"!==r)return r}if("keypress"===e.type){var t=getEventCharCode(e);return 13===t?"Enter":String.fromCharCode(t)}return"keydown"===e.type||"keyup"===e.type?translateToKey[e.keyCode]||"Unidentified":""}module.exports=getEventKey;

},{"./getEventCharCode":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/getEventCharCode.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/getEventModifierState.js":[function(require,module,exports){
"use strict";var modifierKeyToProp={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function modifierStateGetter(t){var e=this.nativeEvent;if(e.getModifierState)return e.getModifierState(t);var r=modifierKeyToProp[t];return!!r&&!!e[r]}function getEventModifierState(t){return modifierStateGetter}module.exports=getEventModifierState;

},{}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/getEventTarget.js":[function(require,module,exports){
"use strict";function getEventTarget(e){var t=e.target||e.srcElement||window;return 3===t.nodeType?t.parentNode:t}module.exports=getEventTarget;

},{}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/getIteratorFn.js":[function(require,module,exports){
"use strict";var ITERATOR_SYMBOL="function"==typeof Symbol&&Symbol.iterator,FAUX_ITERATOR_SYMBOL="@@iterator";function getIteratorFn(t){var r=t&&(ITERATOR_SYMBOL&&t[ITERATOR_SYMBOL]||t[FAUX_ITERATOR_SYMBOL]);if("function"==typeof r)return r}module.exports=getIteratorFn;

},{}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/getNodeForCharacterOffset.js":[function(require,module,exports){
"use strict";function getLeafNode(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function getSiblingNode(e){for(;e;){if(e.nextSibling)return e.nextSibling;e=e.parentNode}}function getNodeForCharacterOffset(e,t){for(var o=getLeafNode(e),n=0,r=0;o;){if(3===o.nodeType){if(r=n+o.textContent.length,n<=t&&r>=t)return{node:o,offset:t-n};n=r}o=getLeafNode(getSiblingNode(o))}}module.exports=getNodeForCharacterOffset;

},{}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/getTextContentAccessor.js":[function(require,module,exports){
"use strict";var ExecutionEnvironment=require("fbjs/lib/ExecutionEnvironment"),contentKey=null;function getTextContentAccessor(){return!contentKey&&ExecutionEnvironment.canUseDOM&&(contentKey="textContent"in document.documentElement?"textContent":"innerText"),contentKey}module.exports=getTextContentAccessor;

},{"fbjs/lib/ExecutionEnvironment":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/ExecutionEnvironment.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/instantiateReactComponent.js":[function(require,module,exports){
"use strict";var ReactCompositeComponent=require("./ReactCompositeComponent"),ReactEmptyComponent=require("./ReactEmptyComponent"),ReactNativeComponent=require("./ReactNativeComponent"),assign=require("./Object.assign"),invariant=require("fbjs/lib/invariant"),warning=require("fbjs/lib/warning"),ReactCompositeComponentWrapper=function(){};function getDeclarationErrorAddendum(e){if(e){var t=e.getName();if(t)return" Check the render method of `"+t+"`."}return""}function isInternalComponentType(e){return"function"==typeof e&&void 0!==e.prototype&&"function"==typeof e.prototype.mountComponent&&"function"==typeof e.prototype.receiveComponent}function instantiateReactComponent(e){var t;if(null===e||!1===e)t=new ReactEmptyComponent(instantiateReactComponent);else if("object"==typeof e){var n=e;(!n||"function"!=typeof n.type&&"string"!=typeof n.type)&&invariant(!1),t="string"==typeof n.type?ReactNativeComponent.createInternalComponent(n):isInternalComponentType(n.type)?new n.type(n):new ReactCompositeComponentWrapper}else"string"==typeof e||"number"==typeof e?t=ReactNativeComponent.createInstanceForText(e):invariant(!1);return t.construct(e),t._mountIndex=0,t._mountImage=null,t}assign(ReactCompositeComponentWrapper.prototype,ReactCompositeComponent.Mixin,{_instantiateReactComponent:instantiateReactComponent}),module.exports=instantiateReactComponent;

},{"./Object.assign":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/Object.assign.js","./ReactCompositeComponent":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactCompositeComponent.js","./ReactEmptyComponent":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactEmptyComponent.js","./ReactNativeComponent":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactNativeComponent.js","fbjs/lib/invariant":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/invariant.js","fbjs/lib/warning":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/warning.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/isEventSupported.js":[function(require,module,exports){
"use strict";var useHasFeature,ExecutionEnvironment=require("fbjs/lib/ExecutionEnvironment");function isEventSupported(e,t){if(!ExecutionEnvironment.canUseDOM||t&&!("addEventListener"in document))return!1;var n="on"+e,u=n in document;if(!u){var i=document.createElement("div");i.setAttribute(n,"return;"),u="function"==typeof i[n]}return!u&&useHasFeature&&"wheel"===e&&(u=document.implementation.hasFeature("Events.wheel","3.0")),u}ExecutionEnvironment.canUseDOM&&(useHasFeature=document.implementation&&document.implementation.hasFeature&&!0!==document.implementation.hasFeature("","")),module.exports=isEventSupported;

},{"fbjs/lib/ExecutionEnvironment":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/ExecutionEnvironment.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/isTextInputElement.js":[function(require,module,exports){
"use strict";var supportedInputTypes={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function isTextInputElement(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&supportedInputTypes[e.type]||"textarea"===t)}module.exports=isTextInputElement;

},{}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/onlyChild.js":[function(require,module,exports){
"use strict";var ReactElement=require("./ReactElement"),invariant=require("fbjs/lib/invariant");function onlyChild(e){return ReactElement.isValidElement(e)||invariant(!1),e}module.exports=onlyChild;

},{"./ReactElement":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactElement.js","fbjs/lib/invariant":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/invariant.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/quoteAttributeValueForBrowser.js":[function(require,module,exports){
"use strict";var escapeTextContentForBrowser=require("./escapeTextContentForBrowser");function quoteAttributeValueForBrowser(e){return'"'+escapeTextContentForBrowser(e)+'"'}module.exports=quoteAttributeValueForBrowser;

},{"./escapeTextContentForBrowser":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/escapeTextContentForBrowser.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/renderSubtreeIntoContainer.js":[function(require,module,exports){
"use strict";var ReactMount=require("./ReactMount");module.exports=ReactMount.renderSubtreeIntoContainer;

},{"./ReactMount":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactMount.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/setInnerHTML.js":[function(require,module,exports){
"use strict";var ExecutionEnvironment=require("fbjs/lib/ExecutionEnvironment"),WHITESPACE_TEST=/^[ \r\n\t\f]/,NONVISIBLE_TEST=/<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/,setInnerHTML=function(e,n){e.innerHTML=n};if("undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction&&(setInnerHTML=function(e,n){MSApp.execUnsafeLocalFunction(function(){e.innerHTML=n})}),ExecutionEnvironment.canUseDOM){var testElement=document.createElement("div");testElement.innerHTML=" ",""===testElement.innerHTML&&(setInnerHTML=function(e,n){if(e.parentNode&&e.parentNode.replaceChild(e,e),WHITESPACE_TEST.test(n)||"<"===n[0]&&NONVISIBLE_TEST.test(n)){e.innerHTML=String.fromCharCode(65279)+n;var t=e.firstChild;1===t.data.length?e.removeChild(t):t.deleteData(0,1)}else e.innerHTML=n})}module.exports=setInnerHTML;

},{"fbjs/lib/ExecutionEnvironment":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/ExecutionEnvironment.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/setTextContent.js":[function(require,module,exports){
"use strict";var ExecutionEnvironment=require("fbjs/lib/ExecutionEnvironment"),escapeTextContentForBrowser=require("./escapeTextContentForBrowser"),setInnerHTML=require("./setInnerHTML"),setTextContent=function(e,t){e.textContent=t};ExecutionEnvironment.canUseDOM&&("textContent"in document.documentElement||(setTextContent=function(e,t){setInnerHTML(e,escapeTextContentForBrowser(t))})),module.exports=setTextContent;

},{"./escapeTextContentForBrowser":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/escapeTextContentForBrowser.js","./setInnerHTML":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/setInnerHTML.js","fbjs/lib/ExecutionEnvironment":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/ExecutionEnvironment.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/shouldUpdateReactComponent.js":[function(require,module,exports){
"use strict";function shouldUpdateReactComponent(e,t){var n=null===e||!1===e,o=null===t||!1===t;if(n||o)return n===o;var r=typeof e,u=typeof t;return"string"===r||"number"===r?"string"===u||"number"===u:"object"===u&&e.type===t.type&&e.key===t.key}module.exports=shouldUpdateReactComponent;

},{}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/traverseAllChildren.js":[function(require,module,exports){
"use strict";var ReactCurrentOwner=require("./ReactCurrentOwner"),ReactElement=require("./ReactElement"),ReactInstanceHandles=require("./ReactInstanceHandles"),getIteratorFn=require("./getIteratorFn"),invariant=require("fbjs/lib/invariant"),warning=require("fbjs/lib/warning"),SEPARATOR=ReactInstanceHandles.SEPARATOR,SUBSEPARATOR=":",userProvidedKeyEscaperLookup={"=":"=0",".":"=1",":":"=2"},userProvidedKeyEscapeRegex=/[=.:]/g,didWarnAboutMaps=!1;function userProvidedKeyEscaper(e){return userProvidedKeyEscaperLookup[e]}function getComponentKey(e,r){return e&&null!=e.key?wrapUserProvidedKey(e.key):r.toString(36)}function escapeUserProvidedKey(e){return(""+e).replace(userProvidedKeyEscapeRegex,userProvidedKeyEscaper)}function wrapUserProvidedKey(e){return"$"+escapeUserProvidedKey(e)}function traverseAllChildrenImpl(e,r,n,t){var a,i=typeof e;if("undefined"!==i&&"boolean"!==i||(e=null),null===e||"string"===i||"number"===i||ReactElement.isValidElement(e))return n(t,e,""===r?SEPARATOR+getComponentKey(e,0):r),1;var l=0,o=""===r?SEPARATOR:r+SUBSEPARATOR;if(Array.isArray(e))for(var s=0;s<e.length;s++)l+=traverseAllChildrenImpl(a=e[s],o+getComponentKey(a,s),n,t);else{var d=getIteratorFn(e);if(d){var u,v=d.call(e);if(d!==e.entries)for(var c=0;!(u=v.next()).done;)l+=traverseAllChildrenImpl(a=u.value,o+getComponentKey(a,c++),n,t);else for(0;!(u=v.next()).done;){var p=u.value;p&&(l+=traverseAllChildrenImpl(a=p[1],o+wrapUserProvidedKey(p[0])+SUBSEPARATOR+getComponentKey(a,0),n,t))}}else if("object"===i){String(e);invariant(!1)}}return l}function traverseAllChildren(e,r,n){return null==e?0:traverseAllChildrenImpl(e,"",r,n)}module.exports=traverseAllChildren;

},{"./ReactCurrentOwner":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactCurrentOwner.js","./ReactElement":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactElement.js","./ReactInstanceHandles":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/ReactInstanceHandles.js","./getIteratorFn":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/getIteratorFn.js","fbjs/lib/invariant":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/invariant.js","fbjs/lib/warning":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/warning.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/validateDOMNesting.js":[function(require,module,exports){
"use strict";var specialTags,inScopeTags,buttonScopeTags,impliedEndTags,emptyAncestorInfo,updatedAncestorInfo,isTagValidWithParent,findInvalidAncestorForTag,findOwnerStack,didWarn,assign=require("./Object.assign"),emptyFunction=require("fbjs/lib/emptyFunction"),warning=require("fbjs/lib/warning"),validateDOMNesting=emptyFunction;module.exports=validateDOMNesting;

},{"./Object.assign":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/Object.assign.js","fbjs/lib/emptyFunction":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/emptyFunction.js","fbjs/lib/warning":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/fbjs/lib/warning.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/react.js":[function(require,module,exports){
"use strict";module.exports=require("./lib/React");

},{"./lib/React":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/lib/React.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/src/CasparCGHelper.js":[function(require,module,exports){
"use strict";var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),_events=require("events");function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var CasparCGHelper=function(e){function t(){_classCallCheck(this,t);for(var e=_possibleConstructorReturn(this,(t.__proto__||Object.getPrototypeOf(t)).call(this)),n=["play","update","stop","next"],o=0;o<n.length;o++){var r=n[o];if("function"==typeof window[r]&&!/\{\s*\[native code\]\s*\}/.test(""+window[r])){var a=window[r];e.on(r,a)}window[r]=e[r].bind(e)}return e}return _inherits(t,_events.EventEmitter),_createClass(t,[{key:"play",value:function(){this.emit("play")}},{key:"stop",value:function(){this.emit("stop")}},{key:"update",value:function(e){this.emit("update",t.parseData(e))}},{key:"next",value:function(){this.emit("next")}}],[{key:"isCasgparCG",value:function(e){var t="undefined"!=typeof window&&void 0!==window.tickAnimations;return e&&(window.isCasparCG=t,"undefined"!=typeof document&&document.getElementsByTagName("body")[0].classList.toggle("not-casparcg",!t)),t}},{key:"parseData",value:function(e){var t={};if("object"===(void 0===e?"undefined":_typeof(e)))t=e;else if("string"==typeof e)try{t=JSON.parse(e)}catch(u){if(e&&"<templateData>"==e.substr(0,14)){var n=new DOMParser;try{for(var o=n.parseFromString(e,"text/xml").getElementsByTagName("componentData"),r=0;r<o.length;r++){var a=o[r],i=a.getAttribute("id"),s=a.getElementsByTagName("data");s.length&&(s=s[0])&&(s=s.getAttribute("value"),i&&s&&(t[i.trim()]=s.trim()))}}catch(e){}}}return t}}]),t}();module.exports=CasparCGHelper;

},{"events":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/events/events.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/src/app.jsx":[function(require,module,exports){
"use strict";var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),_react=require("react"),_react2=_interopRequireDefault(_react),_reactDom=require("react-dom"),_reactDom2=_interopRequireDefault(_reactDom),_classnames=require("classnames"),_classnames2=_interopRequireDefault(_classnames),_countdown_timer=require("./countdown_timer.jsx"),_countdown_timer2=_interopRequireDefault(_countdown_timer),_CasparCGHelper=require("./CasparCGHelper.js"),_CasparCGHelper2=_interopRequireDefault(_CasparCGHelper),_gsap=require("gsap"),_gsap2=_interopRequireDefault(_gsap);function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var App=function(e){function t(e){_classCallCheck(this,t);var n=_possibleConstructorReturn(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e)),o=n;o.state={time:"3:00",visible:!1,hideOnEnd:!0};var i=new _CasparCGHelper2.default;return i.on("play",function(){o.setState({visible:!0}),"function"==typeof play_hook&&play_hook()}),i.on("stop",function(){"function"==typeof stop_hook&&stop_hook(),setTimeout(function(){o.setState({visible:!1})},500)}),i.on("update",function(e){var t={},n=0;e.f0?n=e.f0+"":e.time&&(n=e.time+""),n&&(t.time=n),void 0!==e.f1?t.hideOnEnd=e.f1:void 0!==e.hideOnEnd&&(t.hideOnEnd=e.hideOnEnd),t.hideOnEnd&&("string"==typeof t.hideOnEnd?t.hideOnEnd="true"===t.hideOnEnd.toLowerCase()&&"false"!==t.hideOnEnd.toLowerCase()&&!!t.hideOnEnd:t.hideOnEnd=!!t.hideOnEnd),void 0!==e.f2?t.countUp=e.f2:void 0!==e.countUp&&(t.countUp=e.countUp),t.countUp&&("string"==typeof t.countUp?t.countUp="true"===t.countUp.toLowerCase()&&"false"!==t.countUp.toLowerCase()&&!!t.countUp:t.countUp=!!t.countUp),Object.keys(t).length&&o.setState(t),"function"==typeof update_hook&&update_hook()}),_CasparCGHelper2.default.isCasgparCG(!0)||void 0===window.isCasparCG||window.isCasparCG||(window.setTimeout(function(){i.emit("update",{time:"89:58",hideOnEnd:!1,countUp:!0}),i.emit("play")},500),window.setTimeout(function(){i.emit("stop")},1e4)),n}return _inherits(t,_react2.default.Component),_createClass(t,[{key:"onCountdownComplete",value:function(){this.state.hideOnEnd&&stop_hook()}},{key:"render",value:function(){return _react2.default.createElement(_countdown_timer2.default,{initialTimeRemaining:this.state.time,visible:this.state.visible,completeCallback:this.onCountdownComplete.bind(this),countUp:this.state.countUp})}}]),t}();function play_hook(){setTimeout(function(){_gsap2.default.to("#countdown",.5,{css:{height:"5vh"}})},40)}function update_hook(){}function stop_hook(){_gsap2.default.to("#countdown",.5,{css:{height:"0vh"}})}_reactDom2.default.render(_react2.default.createElement(App,null),document.getElementById("countdown"));

},{"./CasparCGHelper.js":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/src/CasparCGHelper.js","./countdown_timer.jsx":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/src/countdown_timer.jsx","classnames":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/classnames/index.js","gsap":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/gsap/TweenMax.js","react":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/react.js","react-dom":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react-dom/index.js"}],"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/src/countdown_timer.jsx":[function(require,module,exports){
"use strict";var _createClass=function(){function t(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,i,n){return i&&t(e.prototype,i),n&&t(e,n),e}}(),_react=require("react"),_react2=_interopRequireDefault(_react);function _interopRequireDefault(t){return t&&t.__esModule?t:{default:t}}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}var CountdownTimer=function(t){function e(t){_classCallCheck(this,e);var i=_possibleConstructorReturn(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t));i.showMinutes=!!i.props.showMinutes&&"false"!==i.props.showMinutes,i.showHours=!!i.props.showHours&&"false"!==i.props.showHours;var n=i.parseTimeString(i.props.initialTimeRemaining),r=!isNaN(n);return i.state={timeRemaining:r?n:0,timeoutId:null,prevTime:null,visible:r&&i.props.visible,countUp:i.props.countUp},i.tick=i.tick.bind(i),i}return _inherits(e,_react2.default.Component),_createClass(e,[{key:"parseTimeString",value:function(t){if(!t.match(/[^\d]/)&&!isNaN(parseInt(t,10)))return 1e3*t;if(t.match(/:/)){var e=t.split(":");t=0;var i=e.pop(),n=e.pop(),r=e.pop();i&&(t+=1*i),void 0!==n&&(this.showMinutes=!0,t+=60*n),void 0!==r&&(this.showHours=!0,t+=60*r*60)}return t*=1e3,isNaN(t)?0:t}},{key:"componentDidMount",value:function(){this.tick()}},{key:"componentWillReceiveProps",value:function(t){this.state.timeoutId&&clearTimeout(this.state.timeoutId);var e=this.parseTimeString(t.initialTimeRemaining);this.setState({prevTime:null,timeRemaining:e,countUp:t.countUp})}},{key:"componentDidUpdate",value:function(){!this.state.prevTime&&(this.state.timeRemaining>0||this.state.countUp)&&this.tick()}},{key:"componentWillUnmount",value:function(){clearTimeout(this.state.timeoutId)}},{key:"tick",value:function(){var t=Date.now(),e=this.state.prevTime?t-this.state.prevTime:0,i=this.props.interval,n=i-e%i,r=n;n<i/2&&(r+=i),this.state.countUp&&(e=0-e);var o=this.state.timeRemaining-e,s=Math.max(o,0),a=!this.state.countUp&&this.state.prevTime&&o<=-1;this.state.timeoutId&&clearTimeout(this.state.timeoutId),this.setState({timeoutId:a?null:setTimeout(this.tick,r),prevTime:t,timeRemaining:s}),a?this.props.completeCallback&&this.props.completeCallback():this.props.tickCallback&&this.props.tickCallback(s)}},{key:"getFormattedTime",value:function(t){if(this.props.formatFunc)return this.props.formatFunc(t);var e=Math.round(t/1e3),i=parseInt(e%60,10),n=parseInt(e/60,10)%60,r=parseInt(e/60,10),o=parseInt(e/3600,10);i=i<10?"0"+i:i,n=n<10?"0"+n:n,r=r<10?"0"+r:r,o=o<10?"0"+o:o;var s="";return this.showHours?s+=o+":"+n+":":this.showMinutes&&(s+=r+":"),s+=i}},{key:"render",value:function(){var t={};return this.props.visible||(t.display="none"),_react2.default.createElement("span",{className:"timer",style:t}," ",this.getFormattedTime(this.state.timeRemaining)," ")}}]),e}();CountdownTimer.propTypes={initialTimeRemaining:_react2.default.PropTypes.string.isRequired,interval:_react2.default.PropTypes.number,formatFunc:_react2.default.PropTypes.func,tickCallback:_react2.default.PropTypes.func,completeCallback:_react2.default.PropTypes.func,countUp:_react2.default.PropTypes.bool},CountdownTimer.defaultProps={interval:1e3,formatFunc:null,tickCallback:null,completeCallback:null,showMinutes:!0,showHours:!1,countUp:!1},module.exports=CountdownTimer;

},{"react":"/home/wrybits/Projects/casparcg/casparcg-countdown-timer/node_modules/react/react.js"}]},{},["/home/wrybits/Projects/casparcg/casparcg-countdown-timer/src/app.jsx"])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
